<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http</name>
  </assembly>
  <members>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.InvalidByteRangeException)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)">
      <summary>Vytvoří položku <see cref="T:System.Net.Http.HttpResponseMessage" />, která představuje výjimku.</summary>
      <returns>Požadavek musí být přidružen k instanci <see cref="T:System.Web.Http.HttpConfiguration" />.Položka <see cref="T:System.Net.Http.HttpResponseMessage" />, jejíž obsah je serializovaná reprezentace instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Žádost HTTP</param>
      <param name="statusCode">Stavový kód odpovědi.</param>
      <param name="exception">Výjimka</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)">
      <summary>Vytvoří položku <see cref="T:System.Net.Http.HttpResponseMessage" />, která představuje chybovou zprávu.</summary>
      <returns>Požadavek musí být přidružen k instanci <see cref="T:System.Web.Http.HttpConfiguration" />.Položka <see cref="T:System.Net.Http.HttpResponseMessage" />, jejíž obsah je serializovaná reprezentace instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Žádost HTTP</param>
      <param name="statusCode">Stavový kód odpovědi.</param>
      <param name="message">Chybová zpráva</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)">
      <summary>Vytvoří položku <see cref="T:System.Net.Http.HttpResponseMessage" />, která představuje výjimku s chybovou zprávou.</summary>
      <returns>Požadavek musí být přidružen k instanci <see cref="T:System.Web.Http.HttpConfiguration" />.Položka <see cref="T:System.Net.Http.HttpResponseMessage" />, jejíž obsah je serializovaná reprezentace instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Žádost HTTP</param>
      <param name="statusCode">Stavový kód odpovědi.</param>
      <param name="message">Chybová zpráva</param>
      <param name="exception">Výjimka</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)">
      <summary>Vytvoří položku <see cref="T:System.Net.Http.HttpResponseMessage" />, která představuje chybu.</summary>
      <returns>Požadavek musí být přidružen k instanci <see cref="T:System.Web.Http.HttpConfiguration" />.Položka <see cref="T:System.Net.Http.HttpResponseMessage" />, jejíž obsah je serializovaná reprezentace instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Žádost HTTP</param>
      <param name="statusCode">Stavový kód odpovědi.</param>
      <param name="error">Chyba protokolu HTTP.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Vytvoří položku <see cref="T:System.Net.Http.HttpResponseMessage" />, která představuje chybu ve stavu modelu.</summary>
      <returns>Požadavek musí být přidružen k instanci <see cref="T:System.Web.Http.HttpConfiguration" />.Položka <see cref="T:System.Net.Http.HttpResponseMessage" />, jejíž obsah je serializovaná reprezentace instance <see cref="T:System.Web.Http.HttpError" />.</returns>
      <param name="request">Žádost HTTP</param>
      <param name="statusCode">Stavový kód odpovědi.</param>
      <param name="modelState">Stav modelu.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)">
      <summary>Vytvoří třídu <see cref="T:System.Net.Http.HttpResponseMessage" /> svázanou s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Inicializovaný objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> svázaný s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva požadavku HTTP, která vyvolala tuto zprávu s odpovědí</param>
      <param name="statusCode">Stavový kód odpovědi HTTP</param>
      <param name="value">Obsah zprávy s odpovědí HTTP</param>
      <typeparam name="T">Typ zprávy s odpovědí HTTP</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Vytvoří třídu <see cref="T:System.Net.Http.HttpResponseMessage" /> svázanou s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Inicializovaný objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> svázaný s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva požadavku HTTP, která vyvolala tuto zprávu s odpovědí</param>
      <param name="statusCode">Stavový kód odpovědi HTTP</param>
      <param name="value">Obsah zprávy s odpovědí HTTP</param>
      <param name="formatter">Formátovací modul typu média</param>
      <typeparam name="T">Typ zprávy s odpovědí HTTP</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Vytvoří třídu <see cref="T:System.Net.Http.HttpResponseMessage" /> svázanou s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Inicializovaný objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> svázaný s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva požadavku HTTP, která vyvolala tuto zprávu s odpovědí</param>
      <param name="statusCode">Stavový kód odpovědi HTTP</param>
      <param name="value">Obsah zprávy s odpovědí HTTP</param>
      <param name="formatter">Formátovací modul typu média</param>
      <param name="mediaType">Hodnota hlavičky typu média</param>
      <typeparam name="T">Typ zprávy s odpovědí HTTP</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Vytvoří třídu <see cref="T:System.Net.Http.HttpResponseMessage" /> svázanou s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Inicializovaný objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> svázaný s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva požadavku HTTP, která vyvolala tuto zprávu s odpovědí</param>
      <param name="statusCode">Stavový kód odpovědi HTTP</param>
      <param name="value">Obsah zprávy s odpovědí HTTP</param>
      <param name="formatter">Formátovací modul typu média</param>
      <param name="mediaType">Typ média.</param>
      <typeparam name="T">Typ zprávy s odpovědí HTTP</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Vytvoří třídu <see cref="T:System.Net.Http.HttpResponseMessage" /> svázanou s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Inicializovaný objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> svázaný s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva požadavku HTTP, která vyvolala tuto zprávu s odpovědí</param>
      <param name="statusCode">Stavový kód odpovědi HTTP</param>
      <param name="value">Obsah zprávy s odpovědí HTTP</param>
      <param name="mediaType">Hodnota hlavičky typu média</param>
      <typeparam name="T">Typ zprávy s odpovědí HTTP</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)">
      <summary>Vytvoří třídu <see cref="T:System.Net.Http.HttpResponseMessage" /> svázanou s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Inicializovaný objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> svázaný s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva požadavku HTTP, která vyvolala tuto zprávu s odpovědí</param>
      <param name="statusCode">Stavový kód odpovědi HTTP</param>
      <param name="value">Obsah zprávy s odpovědí HTTP</param>
      <param name="mediaType">Typ média.</param>
      <typeparam name="T">Typ zprávy s odpovědí HTTP</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)">
      <summary>Vytvoří třídu <see cref="T:System.Net.Http.HttpResponseMessage" /> svázanou s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Inicializovaný objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> svázaný s přiřazenou třídou <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva požadavku HTTP, která vyvolala tuto zprávu s odpovědí</param>
      <param name="statusCode">Stavový kód odpovědi HTTP</param>
      <param name="value">Obsah zprávy s odpovědí HTTP</param>
      <param name="configuration">Konfigurace HTTP obsahující překladač závislostí použitý k rozpoznávání služeb.</param>
      <typeparam name="T">Typ zprávy s odpovědí HTTP</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)">
      <summary>Uvolní všechny sledované prostředky přidružené k objektu <paramref name="request" />, které byly přidány metodou <see cref="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)" />.</summary>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetActionDescriptor(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate(System.Net.Http.HttpRequestMessage)">
      <summary>Získá aktuální certifikát X.509 z daného požadavku HTTP.</summary>
      <returns>Aktuální certifikát <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />, nebo hodnota Null, není-li certifikát k dispozici.</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)">
      <summary>Načte konfiguraci <see cref="T:System.Web.Http.HttpConfiguration" /> pro danou žádost.</summary>
      <returns>Konfigurace <see cref="T:System.Web.Http.HttpConfiguration" /> pro danou žádost</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)">
      <summary>Načte objekt <see cref="T:System.Guid" />, který byl přiřazen jako ID korelace přidružené k tomuto objektu <paramref name="request" />.Hodnota bude vytvořena a nastavena při prvním volání této metody.</summary>
      <returns>Objekt <see cref="T:System.Guid" /> reprezentující ID korelace přidružené k požadavku.</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope(System.Net.Http.HttpRequestMessage)">
      <summary>Načte <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> pro danou žádost nebo hodnotu Null, pokud není k dispozici.</summary>
      <returns>
        <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> pro danou žádost nebo hodnota Null, pokud není k dispozici.</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs(System.Net.Http.HttpRequestMessage)">
      <summary>Získá analyzovaný řetězec dotazu jako kolekci dvojic klíč/hodnota.</summary>
      <returns>Řetězec dotazu jako kolekce dvojic klíč/hodnota.</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRequestContext(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetResourcesForDisposal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>Načte <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> pro danou žádost nebo hodnotu Null, pokud není k dispozici.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> pro danou žádost nebo hodnota Null, pokud není k dispozici.</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)">
      <summary>Načte <see cref="T:System.Threading.SynchronizationContext" /> pro danou žádost nebo hodnotu Null, pokud není k dispozici.</summary>
      <returns>
        <see cref="T:System.Threading.SynchronizationContext" /> pro danou žádost nebo hodnota Null, pokud není k dispozici.</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetUrlHelper(System.Net.Http.HttpRequestMessage)">
      <summary>Získá instanci <see cref="T:System.Web.Http.Routing.UrlHelper" /> pro požadavek HTTP.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Routing.UrlHelper" /> inicializovaná pro zadaný požadavek HTTP.</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsBatchRequest(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsLocal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.IDisposable})"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)">
      <summary>Přidá daný <paramref name="resource" /> do seznamu prostředků, jež hostitel uvolní po uvolnění objektu <paramref name="request" />.</summary>
      <param name="request">Požadavek HTTP, jenž řídí životnost objektu <paramref name="resource" /></param>
      <param name="resource">Prostředek, který má být uvolněn při uvolňování objektu <paramref name="request" /></param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetConfiguration(System.Net.Http.HttpRequestMessage,System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRequestContext(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpRequestContext)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRouteData(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRouteData)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.ShouldIncludeErrorDetail(System.Net.Http.HttpRequestMessage)"></member>
    <member name="T:System.Net.Http.HttpResponseMessageExtensions">
      <summary>Reprezentuje rozšíření zpráv pro odpověď HTTP operace ASP.NET.</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)">
      <summary>Pokusí se načíst hodnotu obsahu pro <see cref="T:System.Net.Http.HttpResponseMessageExtensions" />.</summary>
      <returns>Výsledek načtení hodnoty obsahu</returns>
      <param name="response">Odpověď operace</param>
      <param name="value">Hodnota obsahu</param>
      <typeparam name="T">Typ hodnoty, která se má načíst</typeparam>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterExtensions">
      <summary>Reprezentuje rozšíření pro přidávání položek <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> do třídy <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)"></member>
    <member name="T:System.Net.Http.Formatting.UriPathExtensionMapping">
      <summary>Zprostředkovává hodnoty <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> z rozšíření cesty zobrazovaných v identifikátoru <see cref="T:System.Uri" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" />. </summary>
      <param name="uriPathExtension">Rozšíření odpovídající parametru mediaType. Tato hodnota by neměla obsahovat tečky nebo zástupné znaky.</param>
      <param name="mediaType">Třída <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, která bude vrácena v případě shody s parametrem uriPathExtension.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.String)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" />. </summary>
      <param name="uriPathExtension">Rozšíření odpovídající parametru mediaType. Tato hodnota by neměla obsahovat tečky nebo zástupné znaky.</param>
      <param name="mediaType">Typ média, který bude vrácen v případě shody s parametrem uriPathExtension.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Vrátí hodnotu, která určuje, zda tato instance <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> může zprostředkovat třídu <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> pro identifikátor <see cref="T:System.Uri" />požadavku. </summary>
      <returns>Pokud se tato instance bude shodovat s rozšířením souboru v požadavku, vrátí hodnotu 1,0, jinak vrátí hodnotu 0,0.</returns>
      <param name="request">Hodnota <see cref="T:System.Net.Http.HttpRequestMessage" /> ke kontrole.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension">
      <summary> Získá rozšíření cesty <see cref="T:System.Uri" />. </summary>
      <returns>Rozšíření cesty <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="F:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtensionKey">
      <summary>Klíč rozšíření cesty <see cref="T:System.Uri" /></summary>
    </member>
    <member name="T:System.Web.Http.AcceptVerbsAttribute">
      <summary>Představuje atribut, který určuje, na jaké metody HTTP bude metoda akce odpovídat.</summary>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.AcceptVerbsAttribute" /> pomocí metody akce, na kterou bude odpovídat.</summary>
      <param name="method">Metoda HTTP, na kterou bude odpovídat metoda akce.</param>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.AcceptVerbsAttribute" /> pomocí seznamu metod HTTP, na které bude metoda akce odpovídat.</summary>
      <param name="methods">Metody HTTP, na které bude metoda akce odpovídat</param>
    </member>
    <member name="P:System.Web.Http.AcceptVerbsAttribute.HttpMethods">
      <summary>Získá nebo nastaví seznam metod HTTP, na které bude metoda akce odpovídat.</summary>
      <returns>Získá nebo nastaví seznam metod HTTP, na které bude metoda akce odpovídat.</returns>
    </member>
    <member name="T:System.Web.Http.ActionNameAttribute">
      <summary>Představuje atribut, který slouží jako název akce.</summary>
    </member>
    <member name="M:System.Web.Http.ActionNameAttribute.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ActionNameAttribute" />.</summary>
      <param name="name">Název akce</param>
    </member>
    <member name="P:System.Web.Http.ActionNameAttribute.Name">
      <summary>Získá nebo nastaví název akce.</summary>
      <returns>Název akce</returns>
    </member>
    <member name="T:System.Web.Http.AllowAnonymousAttribute">
      <summary>Určuje, že jsou během autorizace pomocí atributu <see cref="T:System.Web.Http.AuthorizeAttribute" /> vynechány akce a kontrolery.</summary>
    </member>
    <member name="M:System.Web.Http.AllowAnonymousAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.AllowAnonymousAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.ApiController">
      <summary>Definuje vlastnosti a metody pro kontroler API.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.#ctor"></member>
    <member name="P:System.Web.Http.ApiController.ActionContext">
      <summary>Získá kontext akce.</summary>
      <returns>Kontext akce</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.BadRequestResult" />.</summary>
      <returns>Úloha <see cref="T:System.Web.Http.Results.BadRequestResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.String)">
      <summary>Vytvoří položku <see cref="T:System.Web.Http.Results.ErrorMessageResult" /> (400 – Chybný požadavek) se zadanou chybovou zprávou.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> se zadaným stavem modelu</returns>
      <param name="message">Chybová zpráva zobrazovaná uživateli.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> se zadaným stavem modelu.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> se zadaným stavem modelu</returns>
      <param name="modelState">Stav modelu, který má být zahrnut v chybě</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Configuration">
      <summary>Získá hodnotu <see cref="T:System.Web.Http.HttpConfiguration" /> aktuální třídy <see cref="T:System.Web.Http.ApiController" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> aktuální třídy <see cref="T:System.Web.Http.ApiController" /></returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Conflict">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.ConflictResult" /> (409 – Konflikt).</summary>
      <returns>Úloha <see cref="T:System.Web.Http.Results.ConflictResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
      <summary>Vytvoří &lt;viz cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt; se zadanými hodnotami.</summary>
      <returns>&lt;viz cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt; se zadanými hodnotami.</returns>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="value">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Vytvoří &lt;viz cref="T:System.Web.Http.FormattedContentResult`1" /&gt; se zadanými hodnotami.</summary>
      <returns>&lt;viz cref="T:System.Web.Http.FormattedContentResult`1" /&gt; se zadanými hodnotami.</returns>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="value">Hodnota obsahu, která má být naformátována v obsahu entity.</param>
      <param name="formatter">Formátování, které bude použito k naformátování obsahu.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Vytvoří &lt;viz cref="T:System.Web.Http.FormattedContentResult`1" /&gt; se zadanými hodnotami.</summary>
      <returns>&lt;viz cref="T:System.Web.Http.FormattedContentResult`1" /&gt; se zadanými hodnotami.</returns>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="value">Hodnota obsahu, která má být naformátována v obsahu entity.</param>
      <param name="formatter">Formátování, které bude použito k naformátování obsahu.</param>
      <param name="mediaType"> Hodnota hlavičky Content-Type (nebo &lt;viz langword="null" /&gt;) pro výběr výchozí hodnoty formátování. </param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Vytvoří &lt;viz cref="T:System.Web.Http.FormattedContentResult`1" /&gt; se zadanými hodnotami.</summary>
      <returns>&lt;viz cref="T:System.Web.Http.FormattedContentResult`1" /&gt; se zadanými hodnotami.</returns>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="value">Hodnota obsahu, která má být naformátována v obsahu entity.</param>
      <param name="formatter">Formátování, které bude použito k naformátování obsahu.</param>
      <param name="mediaType">Hodnota hlavičky Content-Type.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ControllerContext">
      <summary>Získá hodnotu <see cref="T:System.Web.Http.HttpConfiguration" /> aktuální třídy <see cref="T:System.Web.Http.ApiController" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> aktuální třídy <see cref="T:System.Web.Http.ApiController" /></returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> (201 – Vytvořeno) se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> se zadanými hodnotami</returns>
      <param name="location">Umístění, v němž byl obsah vytvořen.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> (201 – Vytvořeno) se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> se zadanými hodnotami</returns>
      <param name="location">Umístění, v němž byl obsah vytvořen.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> (201 – Vytvořeno) se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> se zadanými hodnotami</returns>
      <param name="routeName">Název trasy, která má být použita ke generování adresy URL.</param>
      <param name="routeValues">Data trasy, která se mají použít ke generování adresy URL.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> (201 – Vytvořeno) se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> se zadanými hodnotami</returns>
      <param name="routeName">Název trasy, která má být použita ke generování adresy URL.</param>
      <param name="routeValues">Data trasy, která se mají použít ke generování adresy URL.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose">
      <summary>Provede aplikací definované úlohy spojené s uvolněním nebo resetováním nespravovaných prostředků.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
      <summary>Uvolní nespravované prostředky využívané objektem a volitelně uvolní spravované prostředky.</summary>
      <param name="disposing">Hodnota true slouží k uvolnění spravovaných i nespravovaných prostředků; hodnota false slouží k uvolnění pouze nespravovaných prostředků.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>Asynchronně provádí jednotlivou operaci HTTP.</summary>
      <returns>Nově spuštěná úloha</returns>
      <param name="controllerContext">Kontext kontroleru pro jednu operaci HTTP</param>
      <param name="cancellationToken">Token zrušení přidružený k operaci HTTP</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>Inicializuje instanci <see cref="T:System.Web.Http.ApiController" /> s určeným parametrem controllerContext.</summary>
      <param name="controllerContext">Objekt <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> použitý k inicializaci</param>
    </member>
    <member name="M:System.Web.Http.ApiController.InternalServerError">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> (500 – Vnitřní chyba serveru).</summary>
      <returns>Úloha <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.ExceptionResult" /> (500 – Vnitřní chyba serveru) se zadanou výjimkou.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.ExceptionResult" /> se zadanou výjimkou.</returns>
      <param name="exception">Výjimka, která má být zahrnuta v chybě.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 – OK) se zadanou hodnotou.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.JsonResult`1" /> se zadanou hodnotou.</returns>
      <param name="content">Hodnota obsahu, která má být serializována v obsahu entity.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 – OK) se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.JsonResult`1" /> se zadanými hodnotami</returns>
      <param name="content">Hodnota obsahu, která má být serializována v obsahu entity.</param>
      <param name="serializerSettings">Nastavení serializátoru.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.JsonResult`1" /> (200 – OK) se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.JsonResult`1" /> se zadanými hodnotami</returns>
      <param name="content">Hodnota obsahu, která má být serializována v obsahu entity.</param>
      <param name="serializerSettings">Nastavení serializátoru.</param>
      <param name="encoding">Kódování obsahu</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ModelState">
      <summary>Získá stav modelu po procesu vázání modelu.</summary>
      <returns>Stav modelu po procesu vázání modelu.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.NotFound">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <returns>Úloha <see cref="T:System.Web.Http.Results.NotFoundResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.OkResult" /> (200 – OK).</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.OkResult" />.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok``1(``0)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> se zadanými hodnotami</returns>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Redirect(System.String)">
      <summary>Vytvoří výsledek přesměrování (302 Found) se zadanou hodnotou.</summary>
      <returns>Výsledek přesměrování (302 Found) se zadanou hodnotou.</returns>
      <param name="location">Umístění pro přesměrování.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Redirect(System.Uri)">
      <summary>Vytvoří výsledek přesměrování (302 Found) se zadanou hodnotou.</summary>
      <returns>Výsledek přesměrování (302 Found) se zadanou hodnotou.</returns>
      <param name="location">Umístění pro přesměrování.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Vytvoří přesměrování pro směrování výsledku (302 Found) se zadanou hodnotou.</summary>
      <returns>Přesměrování pro směrování výsledku (302 Found) se zadanou hodnotou.</returns>
      <param name="routeName">Název trasy, která má být použita ke generování adresy URL.</param>
      <param name="routeValues">Data trasy, která se mají použít ke generování adresy URL.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
      <summary>Vytvoří přesměrování pro směrování výsledku (302 Found) se zadanou hodnotou.</summary>
      <returns>Přesměrování pro směrování výsledku (302 Found) se zadanou hodnotou.</returns>
      <param name="routeName">Název trasy, která má být použita ke generování adresy URL.</param>
      <param name="routeValues">Data trasy, která se mají použít ke generování adresy URL.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Request">
      <summary>Získá nebo nastaví hodnotu HttpRequestMessage aktuálního objektu <see cref="T:System.Web.Http.ApiController" />.</summary>
      <returns>Hodnota HttpRequestMessage aktuálního objektu <see cref="T:System.Web.Http.ApiController" />.</returns>
    </member>
    <member name="P:System.Web.Http.ApiController.RequestContext">
      <summary>Získá kontext požadavku.</summary>
      <returns>Kontext požadavku</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
      <summary>Vytvoří hodnotu <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> se zadanou odpovědí.</summary>
      <returns>Hodnota <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> pro zadanou odpověď.</returns>
      <param name="response">Zpráva odpovědi HTTP.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
      <summary>Vytvoří hodnotu <see cref="T:System.Web.Http.StatusCodeResult" /> se zadaným stavovým kódem.</summary>
      <returns>Hodnota <see cref="T:System.Web.Http.StatusCodeResult" /> se zadaným stavovým kódem.</returns>
      <param name="status">Stavový kód HTTP pro zprávu odpovědi</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> (401 – Neověřeno) se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> se zadanými hodnotami</returns>
      <param name="challenges">Výzvy WWW-Authenticate.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> (401 – Neověřeno) se zadanými hodnotami.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Results.UnauthorizedResult" /> se zadanými hodnotami</returns>
      <param name="challenges">Výzvy WWW-Authenticate.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Url">
      <summary>Získá instanci objektu <see cref="T:System.Web.Http.Routing.UrlHelper" />, která se používá k vygenerování adres URL pro jiná rozhraní API. </summary>
      <returns>Objekt <see cref="T:System.Web.Http.Routing.UrlHelper" /> používaný k vygenerování adres URL pro jiná rozhraní API.</returns>
    </member>
    <member name="P:System.Web.Http.ApiController.User">
      <summary>Vrátí aktuální objekt zabezpečení, který je přidružen k této žádosti.</summary>
      <returns>Aktuální objekt zabezpečení, který je přidružen k této žádosti</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Validate``1(``0)">
      <summary>Ověří danou entitu a přidá chyby ověření do stavu modelu pod prázdnou příponou, pokud existují.</summary>
      <param name="entity">Ověřovaná entita.</param>
      <typeparam name="TEntity">Typ entity, která má být ověřena.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
      <summary>Ověří danou entitu a přidá chyby ověření do stavu modelu, pokud existují.</summary>
      <param name="entity">Ověřovaná entita.</param>
      <param name="keyPrefix">Klíčová předpona, pod kterou mají být chyby stavu modelu přidány do stavu modelu.</param>
      <typeparam name="TEntity">Typ entity, která má být ověřena.</typeparam>
    </member>
    <member name="T:System.Web.Http.AuthorizeAttribute">
      <summary>Určuje autorizační filtr, který ověřuje objekt <see cref="T:System.Security.Principal.IPrincipal" /> žádosti.</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.AuthorizeAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Zpracuje žádosti s neúspěšnou autorizací.</summary>
      <param name="actionContext">Kontext</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Určuje, zda je daný ovládací prvek autorizován.</summary>
      <returns>Hodnota true, je-li ovládací prvek autorizován, jinak hodnota false</returns>
      <param name="actionContext">Kontext</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Volá se při autorizaci akce.</summary>
      <param name="actionContext">Kontext</param>
      <exception cref="T:System.ArgumentNullException">Parametr kontextu má hodnotu null.</exception>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Roles">
      <summary>Získá nebo nastaví autorizované role. </summary>
      <returns>Řetězec s rolemi </returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.TypeId">
      <summary>Získá jedinečný identifikátor pro tento atribut.</summary>
      <returns>Jedinečný identifikátor pro tento atribut.</returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Users">
      <summary>Získá či nastaví autorizované uživatele. </summary>
      <returns>Řetězec s uživateli </returns>
    </member>
    <member name="T:System.Web.Http.FromBodyAttribute">
      <summary> Atribut, který určuje, že parametr akce pochází pouze z obsahu entity příchozí zprávy <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.FromBodyAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Získá vazby parametrů.</summary>
      <returns>Vazba parametru.</returns>
      <param name="parameter">Popis parametru.</param>
    </member>
    <member name="T:System.Web.Http.FromUriAttribute">
      <summary>Atribut, který určuje, že parametr akce pochází z identifikátoru URI příchozí zprávy <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.FromUriAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>Získá objekty factory zprostředkovatele hodnot pro vazač modelu.</summary>
      <returns>Kolekce objektů <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</returns>
      <param name="configuration">Konfigurace</param>
    </member>
    <member name="T:System.Web.Http.HttpBindNeverAttribute">
      <summary>Reprezentuje atributy určující, že má být z vazby HTTP vyloučena určitá vlastnost.</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindNeverAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpBindNeverAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpBindRequiredAttribute">
      <summary>Představuje požadovaný atribut pro vazbu protokolu HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindRequiredAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpBindRequiredAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.HttpConfiguration">
      <summary>Představuje konfiguraci instancí <see cref="T:System.Web.Http.HttpServer" />. </summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor(System.Web.Http.HttpRouteCollection)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpConfiguration" /> s kolekcí tras HTTP.</summary>
      <param name="routes">Kolekce tras HTTP, která má být přidružena k této instanci.</param>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.DependencyResolver">
      <summary>Získá nebo nastaví překladač závislostí přidružený k této instanci.</summary>
      <returns>Překladač závislostí</returns>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose">
      <summary>Provede aplikací definované úlohy spojené s uvolněním nebo resetováním nespravovaných prostředků.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose(System.Boolean)">
      <summary>Uvolní nespravované prostředky využívané objektem a volitelně uvolní spravované prostředky.</summary>
      <param name="disposing">Hodnota true slouží k uvolnění spravovaných i nespravovaných prostředků; hodnota false slouží k uvolnění pouze nespravovaných prostředků.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.EnsureInitialized">
      <summary>Vyvolá hák Intializer.Od tohoto bodu dále je objekt považován za neměnitelný.Několikanásobné volání nezpůsobí potíže.</summary>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Filters">
      <summary>Získá seznam filtrů, které jsou použity na všechny požadavky dodané prostřednictvím této instance <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
      <returns>Seznam filtrů.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Formatters">
      <summary>Získá formátovací moduly typu médií pro tuto instanci.</summary>
      <returns>Kolekce objektů <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.IncludeErrorDetailPolicy">
      <summary>Získá nebo nastaví hodnotu určující, zda mají být do chybových zpráv zahrnovány podrobnosti o chybě.</summary>
      <returns>Hodnota <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" />, která určuje zásadu podrobností o chybě.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Initializer">
      <summary> Získá nebo nastaví akci, která provede konečnou inicializaci instance <see cref="T:System.Web.Http.HttpConfiguration" />, než tato instance začne sloužit ke zpracování požadavků. </summary>
      <returns>Akce, která provede konečnou inicializaci instance <see cref="T:System.Web.Http.HttpConfiguration" />.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.MessageHandlers">
      <summary>Získá uspořádaný seznam instancí <see cref="T:System.Net.Http.DelegatingHandler" />, jež mají být vyvolány, když se zpráva <see cref="T:System.Net.Http.HttpRequestMessage" /> v zásobníku přesunuje směrem nahoru a naopak zpráva <see cref="T:System.Net.Http.HttpResponseMessage" /> se v zásobníku přesunuje směrem dolů. </summary>
      <returns>Kolekce popisovačů zpráv</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.ParameterBindingRules">
      <summary>Získá kolekci pravidel určujících způsob svázání parametrů.</summary>
      <returns>Kolekce funkcí, které mohou vytvořit vazbu parametru pro daný parametr.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Properties">
      <summary>Získá vlastnosti přidružené k této instanci.</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> obsahující dané vlastnosti.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Routes">
      <summary>Získá objekt <see cref="T:System.Web.Http.HttpRouteCollection" />, který je přidružen k této instanci <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.HttpRouteCollection" /></returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Services">
      <summary>Získá kontejner výchozích služeb přidružený k této instanci.</summary>
      <returns>Kontejner <see cref="T:System.Web.Http.Controllers.ServicesContainer" />, který obsahuje výchozí služby pro tuto instanci.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.VirtualPathRoot">
      <summary>Získá virtuální cestu ke kořenovému adresáři.</summary>
      <returns>Virtuální cesta ke kořenovému adresáři</returns>
    </member>
    <member name="T:System.Web.Http.HttpConfigurationExtensions">
      <summary>Obsahuje rozšiřující metody pro třídu <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.BindParameter(System.Web.Http.HttpConfiguration,System.Type,System.Web.Http.ModelBinding.IModelBinder)"></member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IDirectRouteProvider)">
      <summary>Mapuje trasy definované atributy pro aplikaci.</summary>
      <param name="configuration">Konfigurace serveru.</param>
      <param name="directRouteProvider">Třída <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" /> sloužící ke zjišťování a sestavování tras.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Mapuje trasy definované atributy pro aplikaci.</summary>
      <param name="configuration">Konfigurace serveru.</param>
      <param name="constraintResolver">Řešitel omezení.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver,System.Web.Http.Routing.IDirectRouteProvider)">
      <summary>Mapuje trasy definované atributy pro aplikaci.</summary>
      <param name="configuration">Konfigurace serveru.</param>
      <param name="constraintResolver">Objekt <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" />, který má být použit k vyřešení vložených omezení.</param>
      <param name="directRouteProvider">Třída <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" /> sloužící ke zjišťování a sestavování tras.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.SuppressHostPrincipal(System.Web.Http.HttpConfiguration)"></member>
    <member name="T:System.Web.Http.HttpDeleteAttribute">
      <summary>Určuje, že akce podporuje metodu DELETE HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.HttpDeleteAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpDeleteAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpDeleteAttribute.HttpMethods">
      <summary>Získá metody http, které odpovídají tomuto atributu.</summary>
      <returns>Metody http, které odpovídají tomuto atributu.</returns>
    </member>
    <member name="T:System.Web.Http.HttpError">
      <summary>Definuje serializovatelný kontejner pro ukládání informací o chybách. Tyto informace se ukládají jako dvojice klíč-hodnota. Klíče slovníku pro vyhledání standardních informací o chybách jsou k dispozici u typu <see cref="T:System.Web.Http.HttpErrorKeys" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpError" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Exception,System.Boolean)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpError" /> pro <paramref name="exception" />.</summary>
      <param name="exception">Výjimka, která má být použita v informacích o chybě.</param>
      <param name="includeErrorDetail">Hodnota true, mají-li být informace o výjimce zahrnuty v chybě; v opačném případě hodnota false</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpError" /> obsahující chybovou zprávu <paramref name="message" />.</summary>
      <param name="message">Chybová zpráva pro přidružení k této instanci.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpError" /> pro <paramref name="modelState" />.</summary>
      <param name="modelState">Neplatný stav modelu, který má být použit v informacích o chybě.</param>
      <param name="includeErrorDetail">Hodnota true, mají-li být zprávy o výjimkách zahrnuty v chybě; v opačném případě hodnota false</param>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionMessage">
      <summary>Získá nebo nastaví zprávu <see cref="T:System.Exception" />, je-li k dispozici.</summary>
      <returns>Zpráva třídy <see cref="T:System.Exception" />, je-li k dispozici.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionType">
      <summary>Získá nebo nastaví typ <see cref="T:System.Exception" />, je-li k dispozici.</summary>
      <returns>Typ hodnoty <see cref="T:System.Exception" />, je-li k dispozici.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.GetPropertyValue``1(System.String)">
      <summary>Získá konkrétní hodnotu vlastnosti z této instance chyby.</summary>
      <returns>Konkrétní hodnota vlastnosti z této instance chyby.</returns>
      <param name="key">Název vlastnosti chyby.</param>
      <typeparam name="TValue">Typ proměnné</typeparam>
    </member>
    <member name="P:System.Web.Http.HttpError.InnerException">
      <summary>Získá vnitřní výjimku <see cref="T:System.Exception" />, která je přidružena k této instanci, je-li k dispozici.</summary>
      <returns>Třída <see cref="T:System.Exception" />, která je přiřazena k této instanci, je-li k dispozici.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.Message">
      <summary>Získá nebo nastaví zprávu zobrazovanou uživateli, která vysvětluje příčinu chyby. Informace v tomto poli by měly být považovány za veřejné, protože budou přenášeny po síti bez ohledu na zásady <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" /> . V důsledku toho je třeba postupovat obezřetně, aby nebyly o serveru nebo aplikaci prozrazeny citlivé informace.</summary>
      <returns>Zpráva zobrazovaná uživateli, která vysvětluje příčinu chyby Informace v tomto poli by měly být považovány za veřejné, protože budou přenášeny po síti bez ohledu na zásady <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" /> . V důsledku toho je třeba postupovat obezřetně, aby nebyly o serveru nebo aplikaci prozrazeny citlivé informace.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.MessageDetail">
      <summary>Získá nebo nastaví podrobný popis chyby, aby mohl vývojář zjistit, co přesně se nezdařilo.</summary>
      <returns>Podrobný popis chyby, aby mohl vývojář zjistit, co přesně se nezdařilo.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.ModelState">
      <summary>Získá objekt <see cref="P:System.Web.Http.HttpError.ModelState" /> obsahující informace o chybách, ke kterým došlo během vazby modelu.</summary>
      <returns>
        <see cref="P:System.Web.Http.HttpError.ModelState" /> obsahující informace o chybách, ke kterým došlo během vazby modelu.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.StackTrace">
      <summary>Získá nebo nastaví informace trasování zásobníku přidružené k této instanci, jsou-li k dispozici.</summary>
      <returns>Informace trasování zásobníku přidružené k této instanci, jsou-li k dispozici.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Tato metoda je vyhrazena a neměla by se používat.</summary>
      <returns>Vždy vrací hodnotu null.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Generuje instanci <see cref="T:System.Web.Http.HttpError" /> z reprezentace XML.</summary>
      <param name="reader">Datový proud XmlReader, ze kterého je objekt deserializován.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Převede instanci <see cref="T:System.Web.Http.HttpError" /> na reprezentaci XML.</summary>
      <param name="writer">Proud XmlWriter, do kterého je objekt serializován.</param>
    </member>
    <member name="T:System.Web.Http.HttpErrorKeys">
      <summary> Poskytuje klíče pro vyhledání informací o chybách uložených ve slovníku <see cref="T:System.Web.Http.HttpError" />. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ErrorCodeKey">
      <summary> Poskytuje klíč pro ErrorCode. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionMessageKey">
      <summary> Poskytuje klíč pro ExceptionMessage. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionTypeKey">
      <summary> Poskytuje klíč pro ExceptionType. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.InnerExceptionKey">
      <summary> Poskytuje klíč pro InnerException. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageDetailKey">
      <summary> Poskytuje klíč pro MessageDetail. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageKey">
      <summary> Poskytuje klíč pro Message. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageLanguageKey">
      <summary> Poskytuje klíč pro MessageLanguage. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ModelStateKey">
      <summary> Poskytuje klíč pro MessageState. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.StackTraceKey">
      <summary> Poskytuje klíč pro StackTrace. </summary>
    </member>
    <member name="T:System.Web.Http.HttpGetAttribute">
      <summary>Určuje, že akce podporuje metodu GET HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.HttpGetAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpGetAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpGetAttribute.HttpMethods">
      <summary>Získá metody http, které odpovídají tomuto atributu.</summary>
      <returns>Metody http, které odpovídají tomuto atributu.</returns>
    </member>
    <member name="T:System.Web.Http.HttpHeadAttribute">
      <summary> Určuje, že akce podporuje metodu HEAD HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.HttpHeadAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpHeadAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpHeadAttribute.HttpMethods">
      <summary>Získá metody HTTP, které odpovídají tomuto atributu.</summary>
      <returns>Metody HTTP, které odpovídají tomuto atributu.</returns>
    </member>
    <member name="T:System.Web.Http.HttpOptionsAttribute">
      <summary>Představuje atribut, pomocí kterého lze metodu HTTP omezit tak, aby obsluhovala pouze žádosti HTTP OPTIONS.</summary>
    </member>
    <member name="M:System.Web.Http.HttpOptionsAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpOptionsAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpOptionsAttribute.HttpMethods">
      <summary>Získá metody HTTP, které odpovídají tomuto atributu.</summary>
      <returns>Metody HTTP, které odpovídají tomuto atributu.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPatchAttribute">
      <summary> Určuje, že akce podporuje metodu PATCH HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPatchAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpPatchAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPatchAttribute.HttpMethods">
      <summary>Získá metody HTTP, které odpovídají tomuto atributu.</summary>
      <returns>Metody HTTP, které odpovídají tomuto atributu.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPostAttribute">
      <summary>Určuje, že akce podporuje metodu POST HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPostAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpPostAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPostAttribute.HttpMethods">
      <summary>Získá metody HTTP, které odpovídají tomuto atributu.</summary>
      <returns>Metody HTTP, které odpovídají tomuto atributu.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPutAttribute">
      <summary>Představuje atribut, pomocí kterého lze metodu HTTP omezit tak, aby obsluhovala pouze žádosti HTTP PUT.</summary>
    </member>
    <member name="M:System.Web.Http.HttpPutAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpPutAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPutAttribute.HttpMethods">
      <summary>Získá metody HTTP, které odpovídají tomuto atributu.</summary>
      <returns>Metody HTTP, které odpovídají tomuto atributu.</returns>
    </member>
    <member name="T:System.Web.Http.HttpResponseException">
      <summary> Výjimka, která umožňuje vrácení dané zprávy <see cref="T:System.Net.Http.HttpResponseMessage" /> klientovi. </summary>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpResponseException" />.</summary>
      <param name="response">Odpověď HTTP, která má být vrácena klientovi.</param>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.HttpStatusCode)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpResponseException" />. </summary>
      <param name="statusCode">Stavový kód odpovědi.</param>
    </member>
    <member name="P:System.Web.Http.HttpResponseException.Response">
      <summary>Získá odpověď HTTP, která má být vrácena klientovi.</summary>
      <returns>Zpráva <see cref="T:System.Net.Http.HttpResponseMessage" />, která představuje odpověď HTTP.</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollection">
      <summary>Kolekce instancí <see cref="T:System.Web.Http.Routing.IHttpRoute" /></summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpRouteCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpRouteCollection" />.</summary>
      <param name="virtualPathRoot">Kořenový adresář virtuální cesty</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Add(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>Přidá instanci <see cref="T:System.Web.Http.Routing.IHttpRoute" /> do kolekce.</summary>
      <param name="name">Název trasy</param>
      <param name="route">Instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />, která má být přidána do kolekce.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Clear">
      <summary>Odebere všechny položky z kolekce.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Contains(System.Web.Http.Routing.IHttpRoute)">
      <summary>Určuje, zda kolekce obsahuje konkrétní instanci <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Hodnota true, pokud se v kolekci nachází instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />, jinak hodnota false.</returns>
      <param name="item">Objekt, který má být v kolekci vyhledán.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ContainsKey(System.String)">
      <summary>Určuje, zda kolekce obsahuje prvek se zadaným klíčem.</summary>
      <returns>Hodnota true, pokud kolekce obsahuje prvek s daným klíčem, jinak hodnota false.</returns>
      <param name="name">Klíč, který má být v kolekci vyhledán.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.Routing.IHttpRoute}[],System.Int32)">
      <summary>Zkopíruje instance <see cref="T:System.Web.Http.Routing.IHttpRoute" /> z kolekce do pole, počínaje konkrétním indexem pole.</summary>
      <param name="array">Pole, které je cílem prvků zkopírovaných z kolekce.</param>
      <param name="arrayIndex">Index založený na nule v poli <paramref name="array" />, ve kterém kopírování začíná.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Web.Http.Routing.IHttpRoute[],System.Int32)">
      <summary>Zkopíruje názvy tras a instance <see cref="T:System.Web.Http.Routing.IHttpRoute" /> z kolekce do pole, počínaje konkrétním indexem pole.</summary>
      <param name="array">Pole, které je cílem prvků zkopírovaných z kolekce.</param>
      <param name="arrayIndex">Index založený na nule v poli <paramref name="array" />, ve kterém kopírování začíná.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Count">
      <summary>Získá počet prvků v kolekci.</summary>
      <returns>Počet prvků v kolekci.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Vytvoří instanci <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Nová instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Šablona trasy.</param>
      <param name="defaults">Objekt obsahující výchozí parametry trasy.</param>
      <param name="constraints">Objekt obsahující omezení trasy.</param>
      <param name="dataTokens">Tokeny dat trasy.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)">
      <summary>Vytvoří instanci <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Nová instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Šablona trasy.</param>
      <param name="defaults">Objekt obsahující výchozí parametry trasy.</param>
      <param name="constraints">Objekt obsahující omezení trasy.</param>
      <param name="dataTokens">Tokeny dat trasy.</param>
      <param name="handler">Popisovač zpráv pro trasu.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Object,System.Object)">
      <summary>Vytvoří instanci <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</summary>
      <returns>Nová instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routeTemplate">Šablona trasy.</param>
      <param name="defaults">Objekt obsahující výchozí parametry trasy.</param>
      <param name="constraints">Objekt obsahující omezení trasy.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose">
      <summary>Provede aplikací definované úlohy spojené s uvolněním nebo resetováním nespravovaných prostředků.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose(System.Boolean)">
      <summary>Uvolní nespravované prostředky využívané objektem a volitelně uvolní spravované prostředky.</summary>
      <param name="disposing">Hodnota true slouží k uvolnění spravovaných i nespravovaných prostředků; hodnota false slouží k uvolnění pouze nespravovaných prostředků.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetEnumerator">
      <summary>Získá enumerátor, který provádí iteraci v kolekci.</summary>
      <returns>Enumerátor <see cref="T:System.Collections.Generic.IEnumerator`1" />, který lze použít pro iteraci prostřednictvím kolekce</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>Získá data trasy pro zadaný požadavek HTTP.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Routing.IHttpRouteData" />, která představuje data trasy.</returns>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Získá virtuální cestu.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Routing.IHttpVirtualPathData" />, která představuje virtuální cestu.</returns>
      <param name="request">Žádost HTTP</param>
      <param name="name">Název trasy</param>
      <param name="values">Hodnoty trasy</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Insert(System.Int32,System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>Vloží instanci <see cref="T:System.Web.Http.Routing.IHttpRoute" /> do kolekce.</summary>
      <param name="index">Index založený na nule, do kterého se má položka <paramref name="value" /> vložit</param>
      <param name="name">Název trasy</param>
      <param name="value">Instance <see cref="T:System.Web.Http.Routing.IHttpRoute" />, která má být vložena.Hodnota nesmí být Null.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.IsReadOnly">
      <summary>Získá hodnotu, která udává, zda je kolekce určena jen pro čtení.</summary>
      <returns>Hodnota true, pokud je kolekce určena jen pro čtení, jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.Int32)">
      <summary>Získá nebo nastaví prvek u zadaného indexu.</summary>
      <returns>Trasa <see cref="T:System.Web.Http.Routing.IHttpRoute" /> ve stanoveném indexu.</returns>
      <param name="index">Index.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.String)">
      <summary>Získá nebo nastaví prvek se zadaným názvem trasy.</summary>
      <returns>Trasa <see cref="T:System.Web.Http.Routing.IHttpRoute" /> ve stanoveném indexu.</returns>
      <param name="name">Název trasy</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.OnGetEnumerator">
      <summary>Volá se interně za účelem získání enumerátoru pro kolekci.</summary>
      <returns>Enumerátor <see cref="T:System.Collections.IEnumerator" />, který lze použít pro iteraci prostřednictvím kolekce</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Remove(System.String)">
      <summary>Odebere instanci <see cref="T:System.Web.Http.Routing.IHttpRoute" /> z kolekce.</summary>
      <returns>Hodnota true, pokud byl element úspěšně odebrán, jinak hodnota false.Tato metoda také vrátí hodnotu false, pokud klíč <paramref name="name" /> nelze v kolekci nalézt.</returns>
      <param name="name">Název trasy k odebrání.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Add(System.Web.Http.Routing.IHttpRoute)">
      <summary>Přidá položku do kolekce.</summary>
      <param name="route">Objekt, který má být přidán do kolekce.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Remove(System.Web.Http.Routing.IHttpRoute)">
      <summary>Odebere první výskyt určitého objektu z kolekce.</summary>
      <returns>Hodnota true, pokud byla položka <paramref name="route" /> úspěšně odebrána z kolekce, jinak hodnota false.Tato metoda také vrátí hodnotu false, pokud trasu <paramref name="route" /> nelze v původní kolekci nalézt.</returns>
      <param name="route">Objekt, který bude odebrán z kolekce.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Získá enumerátor, který provádí iteraci v kolekci.</summary>
      <returns>Objekt, <see cref="T:System.Collections.IEnumerator" /> který lze použít pro iteraci prostřednictvím kolekce.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.TryGetValue(System.String,System.Web.Http.Routing.IHttpRoute@)">
      <summary>Získá trasu <see cref="T:System.Web.Http.Routing.IHttpRoute" /> se zadaným názvem trasy.</summary>
      <returns>Hodnota true, pokud kolekce obsahuje prvek se zadaným názvem, jinak hodnota false.</returns>
      <param name="name">Název trasy</param>
      <param name="route">Při návratu tato metoda obsahuje instanci <see cref="T:System.Web.Http.Routing.IHttpRoute" />, pokud je nalezen název trasy; jinak má hodnotu Null.Tento parametr se předává neinicializovaný.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ValidateConstraint(System.String,System.String,System.Object)">
      <summary>Ověří, zda je omezení platné pro třídu <see cref="T:System.Web.Http.Routing.IHttpRoute" /> vytvořenou voláním metody <see cref="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)" />.</summary>
      <param name="routeTemplate">Šablona trasy.</param>
      <param name="name">Název omezení.</param>
      <param name="constraint">Objekt omezení.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.VirtualPathRoot">
      <summary>Získá virtuální cestu ke kořenovému adresáři.</summary>
      <returns>Kořenový adresář virtuální cesty</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollectionExtensions">
      <summary> Rozšiřující metody třídy <see cref="T:System.Web.Http.HttpRouteCollection" /></summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>Ignoruje zadanou trasu.</summary>
      <returns>Vrací objekt <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routes">Kolekce tras pro aplikaci</param>
      <param name="routeName">Název trasy, která se má ignorovat.</param>
      <param name="routeTemplate">Šablona trasy pro tuto trasu</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>Ignoruje zadanou trasu.</summary>
      <returns>Vrací objekt <see cref="T:System.Web.Http.Routing.IHttpRoute" />.</returns>
      <param name="routes">Kolekce tras pro aplikaci</param>
      <param name="routeName">Název trasy, která se má ignorovat.</param>
      <param name="routeTemplate">Šablona trasy pro tuto trasu</param>
      <param name="constraints">Sada výrazů, které určují hodnoty pro šablonu trasy</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpBatchRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Web.Http.Batch.HttpBatchHandler)">
      <summary> Mapuje zadanou trasu pro zpracování dávkových žádostí HTTP. </summary>
      <param name="routes">Kolekce tras pro aplikaci</param>
      <param name="routeName">Název mapované trasy</param>
      <param name="routeTemplate">Šablona trasy pro tuto trasu</param>
      <param name="batchHandler">Možnost <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> pro zpracování dávkových žádostí.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>Mapuje zadanou šablonu trasy.</summary>
      <returns>Odkaz na mapovanou trasu</returns>
      <param name="routes">Kolekce tras pro aplikaci</param>
      <param name="name">Název mapované trasy</param>
      <param name="routeTemplate">Šablona trasy pro tuto trasu</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>Mapuje zadanou šablonu trasy a nastaví výchozí hodnoty trasy.</summary>
      <returns>Odkaz na mapovanou trasu</returns>
      <param name="routes">Kolekce tras pro aplikaci</param>
      <param name="name">Název mapované trasy</param>
      <param name="routeTemplate">Šablona trasy pro tuto trasu</param>
      <param name="defaults">Objekt obsahující výchozí hodnoty trasy</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>Mapuje zadanou šablonu trasy a nastavuje výchozí hodnoty trasy a omezení.</summary>
      <returns>Odkaz na mapovanou trasu</returns>
      <param name="routes">Kolekce tras pro aplikaci</param>
      <param name="name">Název mapované trasy</param>
      <param name="routeTemplate">Šablona trasy pro tuto trasu</param>
      <param name="defaults">Objekt obsahující výchozí hodnoty trasy</param>
      <param name="constraints">Sada výrazů, které určují hodnoty pro <paramref name="routeTemplate" /></param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
      <summary>Mapuje zadanou šablonu trasy a nastavuje výchozí hodnoty trasy, omezení a popisovač zpráv pro koncový bod.</summary>
      <returns>Odkaz na mapovanou trasu</returns>
      <param name="routes">Kolekce tras pro aplikaci</param>
      <param name="name">Název mapované trasy</param>
      <param name="routeTemplate">Šablona trasy pro tuto trasu</param>
      <param name="defaults">Objekt obsahující výchozí hodnoty trasy</param>
      <param name="constraints">Sada výrazů, které určují hodnoty pro <paramref name="routeTemplate" /></param>
      <param name="handler">Popisovač, do kterého bude požadavek odeslán.</param>
    </member>
    <member name="T:System.Web.Http.HttpServer">
      <summary> Definuje implementaci obslužné rutiny <see cref="T:System.Net.Http.HttpMessageHandler" />, která odešle příchozí zprávu <see cref="T:System.Net.Http.HttpRequestMessage" /> a jako výsledek vytvoří zprávu <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpServer" /> pomocí výchozí konfigurace a dispečeru.</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpServer" /> se zadaným dispečerem. </summary>
      <param name="dispatcher">Dispečer HTTP, který bude zpracovávat příchozí požadavky.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpServer" /> se zadanou konfigurací.</summary>
      <param name="configuration">Konfigurace <see cref="T:System.Web.Http.HttpConfiguration" /> použitá ke konfiguraci této instance.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.HttpServer" /> se zadanou konfigurací a dispečerem.</summary>
      <param name="configuration">Konfigurace <see cref="T:System.Web.Http.HttpConfiguration" /> použitá ke konfiguraci této instance.</param>
      <param name="dispatcher">Dispečer HTTP, který bude zpracovávat příchozí požadavky.</param>
    </member>
    <member name="P:System.Web.Http.HttpServer.Configuration">
      <summary>Získá konfiguraci <see cref="T:System.Web.Http.HttpConfiguration" /> použitou k nastavení této instance.</summary>
      <returns>Konfigurace <see cref="T:System.Web.Http.HttpConfiguration" /> použitá ke konfiguraci této instance.</returns>
    </member>
    <member name="P:System.Web.Http.HttpServer.Dispatcher">
      <summary>Získá dispečera HTTP, který zpracovává příchozí požadavky.</summary>
      <returns>Dispečer HTTP, který zpracovává příchozí požadavky.</returns>
    </member>
    <member name="M:System.Web.Http.HttpServer.Dispose(System.Boolean)">
      <summary>Uvolní nespravované prostředky využívané objektem a volitelně uvolní spravované prostředky.</summary>
      <param name="disposing">Hodnota true slouží k uvolnění spravovaných i nespravovaných prostředků; hodnota false slouží k uvolnění pouze nespravovaných prostředků.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.Initialize">
      <summary>Připraví server k provozu.</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Odešle příchozí zprávu <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns> Úloha, která reprezentuje asynchronní operaci.</returns>
      <param name="request">Žádost, která má být odeslána</param>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="T:System.Web.Http.IHttpActionResult">
      <summary>Definuje příkaz, který asynchronně vytvoří objekt <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
    </member>
    <member name="M:System.Web.Http.IHttpActionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Asynchronně vytvoří objekt <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Úloha, která po dokončení obsahuje objekt <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="T:System.Web.Http.IncludeErrorDetailPolicy">
      <summary>Určuje, zda mají být do chybových zpráv zahrnuty podrobnosti chyby, například zprávy o výjimkách nebo trasování zásobníku.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Always">
      <summary>Vždy zahrne podrobnosti chyby.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Default">
      <summary>Použije výchozí chování pro hostitelské prostředí.V případě hostování prostředí ASP.NET použije hodnotu z prvku customErrors v souboru Web.config.V případě hostování na vlastním serveru použije hodnotu <see cref="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly" />.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly">
      <summary>Zahrne podrobnosti chyby pouze při odpovědi na místní žádost. </summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Never">
      <summary>Nikdy nezahrne podrobnosti chyby. </summary>
    </member>
    <member name="T:System.Web.Http.NonActionAttribute">
      <summary>Představuje atribut, pomocí kterého lze označit, že metoda kontroleru není metodou akce.</summary>
    </member>
    <member name="M:System.Web.Http.NonActionAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.NonActionAttribute" />.</summary>
    </member>
    <member name="T:System.Web.Http.OverrideActionFiltersAttribute">
      <summary>Reprezentuje atribut filtru, který přepíše filtry akcí definované na vyšší úrovni.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideActionFiltersAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.OverrideActionFiltersAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.AllowMultiple">
      <summary>Získá hodnotu, která určuje, zda filtr akce umožňuje více atributů.</summary>
      <returns>Hodnota true, pokud filtr akce povoluje více atributů, jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.FiltersToOverride">
      <summary>Získá typ filtrů k přepsání.</summary>
      <returns>Typ filtrů k přepsání.</returns>
    </member>
    <member name="T:System.Web.Http.OverrideAuthenticationAttribute">
      <summary>Reprezentuje atribut filtru, který přepíše filtry ověřování definované na vyšší úrovni.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthenticationAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.OverrideAuthorizationAttribute">
      <summary>Reprezentuje atribut filtru, který přepíše filtry ověřování definované na vyšší úrovni.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthorizationAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.OverrideAuthorizationAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.AllowMultiple">
      <summary>Získá nebo nastaví logickou hodnotu informující o tom, zda lze v jednom elementu programu určit více než jednu instanci uvedeného atributu.</summary>
      <returns>Hodnota true, je-li povoleno zadat více než jednu instanci, jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.FiltersToOverride">
      <summary>Získá typ atributů přepsání filtrů.</summary>
      <returns>Typ atributů přepsání filtrů.</returns>
    </member>
    <member name="T:System.Web.Http.OverrideExceptionFiltersAttribute">
      <summary>Reprezentuje atribut filtru, který přepíše filtry výjimek definované na vyšší úrovni.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideExceptionFiltersAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.ParameterBindingAttribute">
      <summary>Atribut parametru nebo typu, který vytvoří položku <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.Jedná-li se o atribut deklarace typu, je to, jako by byl daný atribut přítomen ve všech parametrech akce daného typu.</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ParameterBindingAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Načte vazby parametrů.</summary>
      <returns>Vazba parametru.</returns>
      <param name="parameter">Popis parametru.</param>
    </member>
    <member name="T:System.Web.Http.RouteAttribute">
      <summary>Ustaví akci k přímému zveřejnění prostřednictvím trasy.</summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.RouteAttribute" />. </summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.RouteAttribute" />. </summary>
      <param name="template">Šablona trasy popisující odpovídající vzor identifikátoru URI.</param>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Name">
      <returns>Vrací objekt <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Order">
      <returns>Vrací objekt <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.System#Web#Http#Routing#IDirectRouteFactory#CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)"></member>
    <member name="P:System.Web.Http.RouteAttribute.Template">
      <returns>Vrací objekt <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.RouteParameter">
      <summary>Pomocí třídy <see cref="T:System.Web.Http.RouteParameter" /> lze označit vlastnosti parametru trasy (například literály a zástupné symboly umístěné uvnitř segmentů šablony <see cref="M:IHttpRoute.RouteTemplate" />).S její pomocí lze například označit, že je určitý parametr trasy nepovinný.</summary>
    </member>
    <member name="F:System.Web.Http.RouteParameter.Optional">
      <summary>Nepovinný parametr</summary>
    </member>
    <member name="M:System.Web.Http.RouteParameter.ToString">
      <summary>Vrátí řetězec <see cref="T:System.String" /> představující tuto instanci.</summary>
      <returns>Řetězec <see cref="T:System.String" /> představující tuto instanci</returns>
    </member>
    <member name="T:System.Web.Http.RoutePrefixAttribute">
      <summary> Označí kontroler předponou trasy, která se použije pro všechny akce v rámci kontroleru. </summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.RoutePrefixAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor(System.String)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.RoutePrefixAttribute" />. </summary>
      <param name="prefix">Předpona trasy pro kontroler.</param>
    </member>
    <member name="P:System.Web.Http.RoutePrefixAttribute.Prefix">
      <summary> Získá předponu trasy. </summary>
    </member>
    <member name="T:System.Web.Http.ServicesExtensions">
      <summary>Poskytuje přistupující objekty zajišťující bezpečnost typů získané z objektu <see cref="T:System.Web.Http.Controllers.ServicesContainer" />.</summary>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionInvoker(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionValueBinder(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Controllers.IActionValueBinder" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Controllers.IActionValueBinder" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetApiExplorer(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Description.IApiExplorer" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Description.IApiExplorer" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetAssembliesResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetBodyModelValidator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Validation.IBodyModelValidator" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Validation.IBodyModelValidator" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetContentNegotiator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetDocumentationProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Description.IDocumentationProvider" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Description.IDocumentationProvider" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetExceptionHandler(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Vrátí zaregistrovanou obslužnou rutinu neošetřených výjimek, pokud existuje.</summary>
      <returns>Zaregistrovaná obslužná rutina neošetřených výjimek, pokud existuje; jinak hodnota null.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetExceptionLoggers(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Vrátí kolekci zaregistrovaných protokolovačů neošetřených výjimek.</summary>
      <returns>Kolekce zaregistrovaných protokolovačů neošetřených výjimek.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetFilterProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá kolekci <see cref="T:System.Web.Http.Filters.IFilterProvider" />.</summary>
      <returns>Vrátí kolekci objektů <see cref="T:System.Web.Http.Filters.IFilterProvider" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHostBufferPolicySelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerActivator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />, nebo hodnotu Null, pokud nebyla žádná instance zaregistrována.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerTypeResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelBinderProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá kolekci <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</summary>
      <returns>Vrátí kolekci objektů <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelMetadataProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelValidatorProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá kolekci <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
      <returns>Vrátí kolekci objektů <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceManager(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Tracing.ITraceManager" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Tracing.ITraceManager" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceWriter(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá službu <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</summary>
      <returns>Vrátí instanci <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetValueProviderFactories(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá kolekci <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</summary>
      <returns>Vrátí kolekci objektů <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="T:System.Web.Http.SingleResult">
      <summary>Reprezentuje objekt <see cref="T:System.Linq.IQueryable" /> obsahující žádnou nebo jednu entitu.Používá se společně s atributem [EnableQuery] z oboru názvů System.Web.Http.OData nebo System.Web.OData.</summary>
    </member>
    <member name="M:System.Web.Http.SingleResult.#ctor(System.Linq.IQueryable)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.SingleResult" />.</summary>
      <param name="queryable">Objekt <see cref="T:System.Linq.IQueryable" /> obsahující žádnou nebo jednu entitu.</param>
    </member>
    <member name="M:System.Web.Http.SingleResult.Create``1(System.Linq.IQueryable{``0})">
      <summary>Vytvoří položku <see cref="T:System.Web.Http.SingleResult`1" /> z položky <see cref="T:System.Linq.IQueryable`1" />.Pomocná metoda pro vytvoření instance objektu <see cref="T:System.Web.Http.SingleResult`1" /> bez nutnosti explicitně určovat typ <paramref name="T" />.</summary>
      <returns>Vytvořený objekt <see cref="T:System.Web.Http.SingleResult`1" />.</returns>
      <param name="queryable">Objekt <see cref="T:System.Linq.IQueryable`1" /> obsahující žádnou nebo jednu entitu.</param>
      <typeparam name="T">Typ dat ve zdroji dat.</typeparam>
    </member>
    <member name="P:System.Web.Http.SingleResult.Queryable">
      <summary>Objekt <see cref="T:System.Linq.IQueryable" /> obsahující žádnou nebo jednu entitu.</summary>
    </member>
    <member name="T:System.Web.Http.SingleResult`1">
      <summary>Reprezentuje objekt <see cref="T:System.Linq.IQueryable`1" /> obsahující žádnou nebo jednu entitu.Používá se společně s atributem [EnableQuery] z oboru názvů System.Web.Http.OData nebo System.Web.OData.</summary>
      <typeparam name="T">Typ dat ve zdroji dat.</typeparam>
    </member>
    <member name="M:System.Web.Http.SingleResult`1.#ctor(System.Linq.IQueryable{`0})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.SingleResult`1" />.</summary>
      <param name="queryable">Objekt <see cref="T:System.Linq.IQueryable`1" /> obsahující žádnou nebo jednu entitu.</param>
    </member>
    <member name="P:System.Web.Http.SingleResult`1.Queryable">
      <summary>Objekt <see cref="T:System.Linq.IQueryable`1" /> obsahující žádnou nebo jednu entitu.</summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchExecutionOrder">
      <summary> Definuje pořadí zpracování pro dávkové požadavky. </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.NonSequential">
      <summary> Zpracuje dávkové požadavky nesekvenčně. </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.Sequential">
      <summary> Zpracuje dávkové požadavky sekvenčně. </summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchHttpRequestMessageExtensions">
      <summary> Poskytuje rozšiřující metody pro třídu <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.Batch.BatchHttpRequestMessageExtensions.CopyBatchRequestProperties(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpRequestMessage)">
      <summary> Kopíruje vlastnosti z jiného objektu <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <param name="subRequest">Dílčí žádost.</param>
      <param name="batchRequest">Dávková žádost obsahující vlastnosti ke kopírování.</param>
    </member>
    <member name="T:System.Web.Http.Batch.DefaultHttpBatchHandler">
      <summary>Reprezentuje výchozí implementaci rutiny <see cref="T:System.Web.Http.Batch.HttpBatchHandler" />, která kóduje zprávy požadavků/odpovědí HTTP jako formát MIME s více částmi.</summary>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Batch.DefaultHttpBatchHandler" />.</summary>
      <param name="httpServer">Objekt <see cref="T:System.Web.Http.HttpServer" /> pro zpracování jednotlivých dávkových žádostí</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.CreateResponseMessageAsync(System.Collections.Generic.IList{System.Net.Http.HttpResponseMessage},System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Vytvoří zprávu dávkových odpovědí.</summary>
      <returns>Zpráva dávkových odpovědí</returns>
      <param name="responses">Odpovědi pro dávkové žádosti</param>
      <param name="request">Původní žádost obsahující všechny dávkové žádosti</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecuteRequestMessagesAsync(System.Collections.Generic.IEnumerable{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)">
      <summary>Zpracuje zprávy dávkových požadavků.</summary>
      <returns>Kolekce položek <see cref="T:System.Net.Http.HttpResponseMessage" /> pro dávkové žádosti</returns>
      <param name="requests">Kolekce zpráv dávkových požadavků.</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecutionOrder">
      <summary>Získá nebo nastaví pořadí zpracování pro dávkové požadavky.Výchozí pořadí zpracování je sekvenční.</summary>
      <returns>Pořadí zpracování pro dávkové požadavky.Výchozí pořadí zpracování je sekvenční.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ParseBatchRequestsAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Převede příchozí dávkový požadavek na kolekci zpráv požadavků.</summary>
      <returns>Kolekce položek <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Žádost obsahující zprávy dávkových žádostí</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Zpracuje dávkové požadavky.</summary>
      <returns>Výsledek operace.</returns>
      <param name="request">Dávková žádost</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.SupportedContentTypes">
      <summary>Získá podporované typy obsahu pro dávkový požadavek.</summary>
      <returns>Podporované typy obsahu pro dávkový požadavek.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ValidateRequest(System.Net.Http.HttpRequestMessage)">
      <summary>Ověří příchozí žádost, která obsahuje zprávy dávkových žádostí.</summary>
      <param name="request">Žádost obsahující zprávy dávkových žádostí</param>
    </member>
    <member name="T:System.Web.Http.Batch.HttpBatchHandler">
      <summary>Definuje abstrakci pro zpracování dávkových žádostí HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Batch.HttpBatchHandler" />.</summary>
      <param name="httpServer">Objekt <see cref="T:System.Web.Http.HttpServer" /> pro zpracování jednotlivých dávkových žádostí</param>
    </member>
    <member name="P:System.Web.Http.Batch.HttpBatchHandler.Invoker">
      <summary>Získá původce pro odeslání dávkových žádostí serveru <see cref="T:System.Web.Http.HttpServer" />.</summary>
      <returns>Původce pro odeslání dávkových žádostí serveru <see cref="T:System.Web.Http.HttpServer" /></returns>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Zpracuje příchozí dávkovou žádost jako jeden objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Dávková odpověď</returns>
      <param name="request">Dávková žádost</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Odešle obslužnou rutinu dávky asynchronně.</summary>
      <returns>Výsledek operace.</returns>
      <param name="request">Žádost o odeslání</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionInvoker">
      <summary>Vyvolá metody akce kontroleru.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Asynchronně vyvolá zadanou akci pomocí zadaného kontextu kontroleru.</summary>
      <returns>Vyvolaná akce.</returns>
      <param name="actionContext">Kontext kontroleru.</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionSelector">
      <summary>Představuje selektor akcí založený na reflexi.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Získá mapování akcí pro <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
      <returns>Mapování akcí.</returns>
      <param name="controllerDescriptor">Informace, které popisují kontroler.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>Vybere akci pro <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />.</summary>
      <returns>Vybraná akce.</returns>
      <param name="controllerContext">Kontext kontroleru.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ControllerServices">
      <summary> Představuje kontejner pro služby, které mohou být specifické pro určitý kontroler.  Bude vytvořena stínová kopie služeb z nadřazeného kontejneru <see cref="T:System.Web.Http.Controllers.ServicesContainer" />. Kontroler zde buď může nastavit službu, nebo přejít ke globálnější sadě služeb.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.#ctor(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ControllerServices" />.</summary>
      <param name="parent">Nadřazený kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ClearSingle(System.Type)">
      <summary>Odebere službu s jednou instancí z výchozích služeb.</summary>
      <param name="serviceType">Typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetService(System.Type)">
      <summary>Načte službu zadaného typu.</summary>
      <returns>První instance služby nebo hodnota Null, pokud služba není nalezena</returns>
      <param name="serviceType">Typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServiceInstances(System.Type)">
      <summary>Načte seznam objektů služeb pro daný typ služby a ověří typ služby.</summary>
      <returns>Seznam objektů služeb zadaného typu.</returns>
      <param name="serviceType">Typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServices(System.Type)">
      <summary>Načte seznam objektů služeb pro daný typ služby.</summary>
      <returns>Seznam objektů služeb zadaného typu nebo prázdný seznam, pokud nelze službu najít.</returns>
      <param name="serviceType">Typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.IsSingleService(System.Type)">
      <summary>Zašle dotaz, zda se jedná o typ služby s jednou instancí.</summary>
      <returns>Hodnota true, pokud má typ služby nanejvýše jednu instanci, nebo hodnota false, pokud typ služby podporuje více instancí.</returns>
      <param name="serviceType">Typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ReplaceSingle(System.Type,System.Object)">
      <summary>Nahradí objekt služby s jednou instancí.</summary>
      <param name="serviceType">Typ služby.</param>
      <param name="service">Objekt služby, který nahrazuje předchozí instanci.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionBinding">
      <summary>Popisuje *způsob* vytvoření vazby, ale neprovádí vlastní svázání.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Controllers.HttpParameterBinding[])">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
      <param name="actionDescriptor">Zpětný ukazatel na akci pro tuto vazbu.  </param>
      <param name="bindings">Synchronní vazby pro jednotlivé parametry.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ActionDescriptor">
      <summary>Získá nebo nastaví zpětný ukazatel na akci pro tuto vazbu.  </summary>
      <returns>Zpětný ukazatel na akci pro tuto vazbu.  </returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.ExecuteBindingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Asynchronně provede vazbu pro daný kontext žádosti.</summary>
      <returns>Úloha signalizovaná po dokončení vazby. </returns>
      <param name="actionContext">Kontext akce pro vazbu. Obsahuje slovník parametrů, které budou obsazeny.</param>
      <param name="cancellationToken">Token sloužící ke zrušení operace vazby. Případně jde o vazač, který také umožňuje provést vazbu parametru.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ParameterBindings">
      <summary>Získá nebo nastaví synchronní vazby pro jednotlivé parametry. </summary>
      <returns>Synchronní vazby pro jednotlivé parametry.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContext">
      <summary>Obsahuje informace o provedení akce.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor(System.Web.Http.Controllers.HttpControllerContext,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpActionContext" />.</summary>
      <param name="controllerContext">Kontext kontroleru.</param>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionArguments">
      <summary>Získá seznam argumentů akce.</summary>
      <returns>Seznam argumentů akce</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionDescriptor">
      <summary>Získá nebo nastaví deskriptor akce pro daný kontext akce.</summary>
      <returns>Popisovač akce</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ControllerContext">
      <summary>Získá nebo nastaví kontext kontroleru.</summary>
      <returns>Kontext kontroleru.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ModelState">
      <summary>Získá slovník stavu modelu pro daný kontext.</summary>
      <returns>Slovník stavu modelu</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Request">
      <summary>Získá zprávu s požadavkem pro daný kontext akce.</summary>
      <returns>Zpráva s požadavkem pro daný kontext akce</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.RequestContext">
      <summary>Získá aktuální kontext požadavku.</summary>
      <returns>Aktuální kontext požadavku.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Response">
      <summary>Získá nebo nastaví zprávu odpovědi pro daný kontext akce.</summary>
      <returns>Zpráva odpovědi pro daný kontext akce</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContextExtensions">
      <summary>Obsahuje rozšiřující metody pro kolekci <see cref="T:System.Web.Http.Controllers.HttpActionContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.TryBindStrongModel``1(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Web.Http.Metadata.ModelMetadataProvider,``0@)">
      <typeparam name="TModel"></typeparam>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionDescriptor">
      <summary>Poskytuje informace o metodách akce.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> se zadanými informacemi, které popisují kontroler akce.</summary>
      <param name="controllerDescriptor">Informace, které popisují kontroler akce.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionBinding">
      <summary>Získá nebo nastaví vazbu popisující akci.</summary>
      <returns>Vazba, která popisuje akci.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionName">
      <summary>Získá název akce.</summary>
      <returns>Název akce</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Configuration">
      <summary>Získá nebo nastaví konfiguraci akce.</summary>
      <returns>Konfigurace akce.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ControllerDescriptor">
      <summary>Získá informace, které popisují kontroler akce.</summary>
      <returns>Informace, které popisují kontroler akce.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
      <summary>Provede popsanou akci a vrátí metodu <see cref="T:System.Threading.Tasks.Task`1" />, která bude po dokončení obsahovat vrácenou hodnotu akce.</summary>
      <returns>Metoda <see cref="T:System.Threading.Tasks.Task`1" />, která bude po dokončení obsahovat vrácenou hodnotu akce.</returns>
      <param name="controllerContext">Kontext kontroleru.</param>
      <param name="arguments">Seznam argumentů.</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1">
      <summary>Vrátí vlastní atributy přidružené k popisovači akce.</summary>
      <returns>Vlastní atributy přidružené k popisovači akce.</returns>
      <typeparam name="T">Popisovač akce</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary>Získá vlastní atributy pro akci.</summary>
      <returns>Kolekce vlastních atributů použitých pro tuto akci.</returns>
      <param name="inherit">Hodnota true pro hledání řetězce dědičnosti této akce pro vyhledání atributů; jinak hodnota false.</param>
      <typeparam name="T">Typ atributu, který má být vyhledán.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilterPipeline">
      <summary>Načte filtry pro danou konfiguraci a akci.</summary>
      <returns>Filtry pro danou konfiguraci a akci.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilters">
      <summary>Načte filtry pro popisovač akce.</summary>
      <returns>Filtry pro popisovač akce.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetParameters">
      <summary>Načte parametry pro popisovač akce.</summary>
      <returns>Parametry pro popisovač akce.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Properties">
      <summary>Získá vlastnosti přidružené k této instanci.</summary>
      <returns>Vlastnosti přidružené k této instanci</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ResultConverter">
      <summary>Získá převaděč pro správnou transformaci výsledku volání ExecuteAsync(HttpControllerContext, IDictionaryString, Object) do instance <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Převaděč výsledku akce.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType">
      <summary>Získá návratový typ popisovače.</summary>
      <returns>Návratový typ popisovače.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.SupportedHttpMethods">
      <summary>Získá kolekci podporovaných metod HTTP pro popisovač.</summary>
      <returns>Kolekce podporovaných metod HTTP pro popisovač.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerContext">
      <summary>Obsahuje informace pro jednu operaci HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpControllerContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.Controllers.HttpRequestContext,System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Controllers.IHttpController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpControllerContext" />.</summary>
      <param name="requestContext">Kontext požadavku</param>
      <param name="request">Žádost HTTP</param>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
      <param name="controller">Kontroler</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IHttpRouteData,System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpControllerContext" />.</summary>
      <param name="configuration">Konfigurace</param>
      <param name="routeData">Data trasy</param>
      <param name="request">Žádost</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Configuration">
      <summary>Získá nebo nastaví konfiguraci.</summary>
      <returns>Konfigurace</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Controller">
      <summary>Získá nebo nastaví kontroler HTTP.</summary>
      <returns>Kontroler HTTP</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.ControllerDescriptor">
      <summary>Získá nebo nastaví popisovač kontroleru.</summary>
      <returns>Popisovač kontroleru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Request">
      <summary>Získá nebo nastaví žádost.</summary>
      <returns>Žádost</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RequestContext">
      <summary>Získá nebo nastaví kontext požadavku.</summary>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RouteData">
      <summary>Získá nebo nastaví data trasy.</summary>
      <returns>Data trasy</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerDescriptor">
      <summary>Reprezentuje informace popisující kontroler HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor(System.Web.Http.HttpConfiguration,System.String,System.Type)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</summary>
      <param name="configuration">Konfigurace</param>
      <param name="controllerName">Název kontroleru</param>
      <param name="controllerType">Typ kontroleru</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Configuration">
      <summary>Získá nebo nastaví konfigurace přidružené ke kontroleru.</summary>
      <returns>Konfigurace přidružené ke kontroleru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerName">
      <summary>Získá nebo nastaví název kontroleru.</summary>
      <returns>Název kontroleru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerType">
      <summary>Získá nebo nastaví typ kontroleru.</summary>
      <returns>Typ kontroleru</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(System.Net.Http.HttpRequestMessage)">
      <summary>Vytvoří instanci kontroleru pro danou třídu <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Vytvořená instance kontroleru</returns>
      <param name="request">Zpráva žádosti</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1">
      <summary>Načte kolekci vlastních atributů kontroleru.</summary>
      <returns>Kolekce vlastních atributů.</returns>
      <typeparam name="T">Typ objektu.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary> Vrátí kolekci atributů, které mohou být přiřazeny k: &lt;typeparamref name="T" /&gt; pro tento kontroler popisovače. </summary>
      <returns>Kolekce atributů přiřazených k tomuto kontroleru.</returns>
      <param name="inherit">Hodnota true pro hledání řetězce dědičnosti tohoto kontroleru pro vyhledání atributů, jinak hodnota false.</param>
      <typeparam name="T">Používá se k filtrování kolekce atributů. Hodnota <see cref="T:System.Object" /> pro načtení všech atributů.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters">
      <summary>Vrací kolekci filtrů přidružených ke kontroleru.</summary>
      <returns>Kolekce filtrů přidružených ke kontroleru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Properties">
      <summary>Získá vlastnosti přidružené k této instanci.</summary>
      <returns>Vlastnosti přidružené k této instanci</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerSettings">
      <summary>Obsahuje nastavení kontroleru HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerSettings.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpControllerSettings" />.</summary>
      <param name="configuration">Objekt konfigurace sloužící k inicializaci instance.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Formatters">
      <summary>Načte kolekci instancí <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> pro kontroler.</summary>
      <returns>Kolekce instancí <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.ParameterBindingRules">
      <summary>Načte kolekci funkcí vazby parametru pro kontroler.</summary>
      <returns>Kolekce funkcí vazby parametru.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Services">
      <summary>Načte kolekci instancí služby pro kontroler.</summary>
      <returns>Kolekce instancí služby.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterBinding">
      <summary> Popisuje vazbu parametru. Vazba by měla být statická (založená pouze na popisovači) a umožňovat sdílení napříč požadavky.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.</summary>
      <param name="descriptor">Položka <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />, která popisuje parametry.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.Descriptor">
      <summary>Získá položku <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />, která byla použita k inicializaci této instance.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /></returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.ErrorMessage">
      <summary>Je-li vazba neplatná, získá chybovou zprávu, která popisuje chybu vazby.</summary>
      <returns>Chybová zpráva. Byla-li vazba úspěšná, má hodnotu Null.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Asynchronně provede vazbu pro daný požadavek.</summary>
      <returns>Objekt úlohy představující asynchronní operaci.</returns>
      <param name="metadataProvider">Zprostředkovatel metadat použitých k ověření.</param>
      <param name="actionContext">Kontext akce pro vazbu. Kontext akce obsahuje slovník parametrů, do kterého bude parametr zadán.</param>
      <param name="cancellationToken">Token sloužící ke zrušení operace vazby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.GetValue(System.Web.Http.Controllers.HttpActionContext)">
      <summary> Získá hodnotu parametru ze slovníku argumentů v kontextu akce.</summary>
      <returns>Hodnta pro tento parametru v daném kontextu akce, nebo hodnota Null, pokud parametr dosud nebyl nastaven.</returns>
      <param name="actionContext">Kontext akce</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid">
      <summary>Získá hodnotu, která určuje, zda byla vazba úspěšná.</summary>
      <returns>Hodnota true, pokud byla vazba úspěšná, jinak hodnota false.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.SetValue(System.Web.Http.Controllers.HttpActionContext,System.Object)">
      <summary>Nastaví výsledky této vazby parametru ve slovníku argumentů v kontextu akce.  </summary>
      <param name="actionContext">Kontext akce</param>
      <param name="value">Hodnota parametru.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.WillReadBody">
      <summary>Vrátí hodnotu, která udává, zda bude tato instance <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> číst obsah entity zprávy HTTP.</summary>
      <returns>Hodnota true, pokud bude instance <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> číst obsah entity, jinak hodnota false.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterDescriptor">
      <summary>Představuje popisovač parametru HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ActionDescriptor">
      <summary>Získá nebo nastaví popisovač akce.</summary>
      <returns>Popisovač akce</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Configuration">
      <summary>Získá nebo nastaví objekt <see cref="T:System.Web.Http.HttpConfiguration" /> pro daný objekt <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> pro daný objekt <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.DefaultValue">
      <summary>Získá výchozí hodnotu parametru.</summary>
      <returns>Výchozí hodnota parametru</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.GetCustomAttributes``1">
      <summary>Načte z parametru kolekci vlastních atributů.</summary>
      <returns>Kolekce vlastních atributů z parametru</returns>
      <typeparam name="T">Typ vlastních atributů</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.IsOptional">
      <summary>Získá hodnotu, která určuje, zda se jedná o volitelný parametr.</summary>
      <returns>Hodnota true, pokud se jedná o volitelný parametr; jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterBinderAttribute">
      <summary>Získá nebo nastaví atribut vazby parametru.</summary>
      <returns>Atribut vazby parametru.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterName">
      <summary>Získá název parametru.</summary>
      <returns>Název parametru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterType">
      <summary>Získá typ parametru.</summary>
      <returns>Typ parametru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Prefix">
      <summary>Získá předponu tohoto parametru.</summary>
      <returns>Předpona tohoto parametru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Properties">
      <summary>Získá vlastnosti tohoto parametru.</summary>
      <returns>Vlastnosti tohoto parametru</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpRequestContext">
      <summary>Reprezentuje kontext přidružený k požadavku.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpRequestContext.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.HttpRequestContext" />.</summary>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.ClientCertificate">
      <summary>Získá nebo nastaví certifikát klienta.</summary>
      <returns>Vrací objekt <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Configuration">
      <summary>Získá nebo nastaví konfiguraci.</summary>
      <returns>Vrací objekt <see cref="T:System.Web.Http.HttpConfiguration" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IncludeErrorDetail">
      <summary>Získá nebo nastaví hodnotu, která určuje, zda mají být do odpovědí pro tento požadavek zahrnuty podrobnosti o chybách, například zprávy o výjimkách nebo trasování zásobníku.</summary>
      <returns>Vrací objekt <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IsLocal">
      <summary>Získá nebo nastaví hodnotu, která určuje, zda požadavek pochází z místní adresy.</summary>
      <returns>Vrací objekt <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Principal">
      <summary>Získá nebo nastaví objekt zabezpečení.</summary>
      <returns>Vrací objekt <see cref="T:System.Security.Principal.IPrincipal" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.RouteData">
      <summary>Získá nebo nastaví data trasy.</summary>
      <returns>Vrací objekt <see cref="T:System.Web.Http.Routing.IHttpRouteData" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Url">
      <summary>Získá nebo nastaví objekt factory používaný k vygenerování adres URL pro jiná rozhraní API.</summary>
      <returns>Vrací objekt <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.VirtualPathRoot">
      <summary>Získá nebo nastaví kořen virtuální cesty.</summary>
      <returns>Vrací objekt <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionHttpMethodProvider"></member>
    <member name="P:System.Web.Http.Controllers.IActionHttpMethodProvider.HttpMethods"></member>
    <member name="T:System.Web.Http.Controllers.IActionResultConverter">
      <summary> Kontrakt pro rutinu převodu, jež může převzít výsledek akce vrácené metodou &lt;see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})" /&gt; a převést jej do instance <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Převádí zadaný objekt <see cref="T:System.Web.Http.Controllers.IActionResultConverter" /> na jiný objekt.</summary>
      <returns>Převedený objekt</returns>
      <param name="controllerContext">Kontext kontroleru.</param>
      <param name="actionResult">Výsledek akce</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionValueBinder">
      <summary>Definuje metodu načtení vazby akce přidružené k hodnotě parametru.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Získá konfiguraci <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />.</returns>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IControllerConfiguration">
      <summary> Je-li kontroler opatřen atributem s tímto rozhraním, je volán za účelem inicializace nastavení kontroleru.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IControllerConfiguration.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary> Tento popisovač kontroleru může být potlačen zpětným voláním pro nastavení kontroleru. </summary>
      <param name="controllerSettings">Nastavení kontroleru, které má být inicializováno.</param>
      <param name="controllerDescriptor">Popisovač kontroleru. Mějte na paměti, že popisovač x<see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> může být přidružen k odvozenému typu kontroleru, pokud bude zděděna konfigurace <see cref="T:System.Web.Http.Controllers.IControllerConfiguration" />.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionInvoker">
      <summary>Obsahuje metodu používanou k vyvolání operace HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Asynchronně provádí operaci HTTP.</summary>
      <returns>Nově spuštěná úloha</returns>
      <param name="actionContext">Kontext spuštění</param>
      <param name="cancellationToken">Token zrušení přidružený k operaci HTTP</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionSelector">
      <summary>Obsahuje logiku pro výběr metody akce.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Vrátí mapu všech instancí <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />, které selektor může vytvořit, s klíči řetězce akce.Ta je primárně volána rozhraním <see cref="T:System.Web.Http.Description.IApiExplorer" /> za účelem zjištění všech možných akcí v kontroleru.</summary>
      <returns>Mapa všech instancí <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />, které selektor může vytvořit, nebo hodnota Null, pokud selektor nemá jasně definované mapování třídy <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />.</returns>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>Vybírá akci kontroleru.</summary>
      <returns>Akce kontroleru</returns>
      <param name="controllerContext">Kontext kontroleru</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpController">
      <summary>Reprezentuje kontroler HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>Provede kontroler k synchronizaci.</summary>
      <returns>Kontroler</returns>
      <param name="controllerContext">Aktuální kontext pro testovací kontroler.</param>
      <param name="cancellationToken">Oznámení, které ruší operaci.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ParameterBindingExtensions">
      <summary>Definuje rozšiřující metody pro položku <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>Sváže parametr, jehož výsledkem je chyba. </summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
      <param name="message">Chybová zpráva, která popisuje příčinou selhání vazby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ParameterBindingAttribute)">
      <summary>Sváže parametr, jako by měl v deklaraci daný atribut.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Parametr, pro který má být poskytnuta vazba.</param>
      <param name="attribute">Atribut popisující vazbu.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Sváže parametr analýzou textu obsahu HTTP.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Sváže parametr analýzou textu obsahu HTTP.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
      <param name="formatters">Seznam formátovacích modulů, který umožňuje výběr vhodného formátovacího modulu pro serializaci parametru do objektu.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>Sváže parametr analýzou textu obsahu HTTP.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
      <param name="formatters">Seznam formátovacích modulů, který umožňuje výběr vhodného formátovacího modulu pro serializaci parametru do objektu.</param>
      <param name="bodyModelValidator">Validátor modelu hlavní části textu sloužící k ověření parametru.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Net.Http.Formatting.MediaTypeFormatter[])">
      <summary>Sváže parametr analýzou textu obsahu HTTP.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
      <param name="formatters">Seznam formátovacích modulů, který umožňuje výběr vhodného formátovacího modulu pro serializaci parametru do objektu.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Sváže parametr analýzou řetězce dotazu.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Sváže parametr analýzou řetězce dotazu.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
      <param name="valueProviderFactories">Objekty faktory zprostředkovatele hodnot, které poskytují data parametru řetězce dotazu.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>Sváže parametr analýzou řetězce dotazu.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
      <param name="binder">Vazač modelu sloužící ke kompilaci parametru do objektu.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Sváže parametr analýzou řetězce dotazu.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
      <param name="binder">Vazač modelu sloužící ke kompilaci parametru do objektu.</param>
      <param name="valueProviderFactories">Objekty faktory zprostředkovatele hodnot, které poskytují data parametru řetězce dotazu.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ValueProviders.ValueProviderFactory[])">
      <summary>Sváže parametr analýzou řetězce dotazu.</summary>
      <returns>Objekt vazby parametru HTTP.</returns>
      <param name="parameter">Popisovač parametru, který popisuje parametr ke svázání.</param>
      <param name="valueProviderFactories">Objekty faktory zprostředkovatele hodnot, které poskytují data parametru řetězce dotazu.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor">
      <summary>Reprezentuje reflektovanou synchronní nebo asynchronní metodu akce.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor,System.Reflection.MethodInfo)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor" /> se zadaným deskriptorem a podrobnostmi metody.</summary>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
      <param name="methodInfo">Informace metody akce</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ActionName">
      <summary>Získá název akce.</summary>
      <returns>Název akce</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.Equals(System.Object)"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
      <summary>Provede popsanou akci a vrátí metodu <see cref="T:System.Threading.Tasks.Task`1" />, která bude po dokončení obsahovat vrácenou hodnotu akce.</summary>
      <returns>Metoda [T:System.Threading.Tasks.Task`1"], která bude po dokončení obsahovat vrácenou hodnotu akce.</returns>
      <param name="controllerContext">Kontext</param>
      <param name="arguments">Argumenty</param>
      <param name="cancellationToken">Token zrušení pro zrušení akce.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary>Vrací pole vlastních atributů definovaných pro tento člen určených podle typu.</summary>
      <returns>Pole vlastních atributů nebo prázdné pole, pokud žádné vlastní atributy neexistují.</returns>
      <param name="inherit">Hodnota true pro hledání řetězce dědičnosti této akce pro vyhledání atributů; jinak hodnota false.</param>
      <typeparam name="T">Typ vlastních atributů</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetFilters">
      <summary>Načte informace o filtrech akce.</summary>
      <returns>Informace o filtru</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetHashCode"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetParameters">
      <summary>Načte parametry metody akce.</summary>
      <returns>Parametry metody akce</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.MethodInfo">
      <summary>Získá nebo nastaví informace metody akce.</summary>
      <returns>Informace metody akce</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ReturnType">
      <summary>Získá návratový typ této metody.</summary>
      <returns>Návratový typ této metody.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.SupportedHttpMethods">
      <summary>Získá nebo nastaví podporované metody HTTP.</summary>
      <returns>Podporované metody HTTP</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor">
      <summary>Představuje reflektovaný popisovač parametru HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Reflection.ParameterInfo)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" />.</summary>
      <param name="actionDescriptor">Popisovač akce</param>
      <param name="parameterInfo">Informace o parametru</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.DefaultValue">
      <summary>Získá výchozí hodnotu parametru.</summary>
      <returns>Výchozí hodnota parametru</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.GetCustomAttributes``1">
      <summary>Načte z parametru kolekci vlastních atributů.</summary>
      <returns>Kolekce vlastních atributů z parametru</returns>
      <typeparam name="TAttribute">Typ vlastních atributů</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.IsOptional">
      <summary>Získá hodnotu, která určuje, zda se jedná o volitelný parametr.</summary>
      <returns>Hodnota true, pokud se jedná o volitelný parametr; jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterInfo">
      <summary>Získá nebo nastaví informace o parametru.</summary>
      <returns>Informace o parametru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterName">
      <summary>Získá název parametru.</summary>
      <returns>Název parametru</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterType">
      <summary>Získá typ parametru.</summary>
      <returns>Typ parametru</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ResponseMessageResultConverter">
      <summary>Reprezentuje převaděč pro akce s návratovým typem <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Převádí objekt <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" /> na jiný objekt.</summary>
      <returns>Převedený objekt</returns>
      <param name="controllerContext">Kontext kontroleru</param>
      <param name="actionResult">Výsledek akce</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ServicesContainer">
      <summary>Abstraktní třída poskytující kontejner pro služby používané webovým rozhraním API ASP.NET.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ServicesContainer" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Add(System.Type,System.Object)">
      <summary> Přidá službu na konec seznamu služeb pro daný typ služby.  </summary>
      <param name="serviceType">Typ služby</param>
      <param name="service">Instance služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.AddRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Přidá služby z určené kolekce na konec seznamu služeb pro daný typ služby. </summary>
      <param name="serviceType">Typ služby</param>
      <param name="services">Služby, které mají být přidány.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Clear(System.Type)">
      <summary> Odebere všechny instance služeb daného typu.  </summary>
      <param name="serviceType">Typ služeb, které mají být vymazány ze seznamu služeb.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearMultiple(System.Type)">
      <summary>Odebere všechny instance typu služby s více instancemi.</summary>
      <param name="serviceType">Odebíraný typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearSingle(System.Type)">
      <summary>Odebere typ služby s jednou instancí.</summary>
      <param name="serviceType">Odebíraný typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Dispose">
      <summary>Provede aplikací definované úlohy spojené s uvolněním nebo resetováním nespravovaných prostředků.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.FindIndex(System.Type,System.Predicate{System.Object})">
      <summary> Vyhledá službu, která odpovídá podmínkám definovaným pomocí zadaného predikátu, a vrátí index o základu 0 pro první výskyt takové služby. </summary>
      <returns>Index o základu 0 pro první nalezený výskyt, jinak -1.</returns>
      <param name="serviceType">Typ služby</param>
      <param name="match">Delegát definující podmínky pro hledaný prvek. </param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetService(System.Type)">
      <summary>Načte instanci služby zadaného typu.</summary>
      <param name="serviceType">Typ služby</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServiceInstances(System.Type)">
      <summary>Načte měnitelný seznam instancí služby zadaného typu.</summary>
      <returns>Měnitelný seznam instancí služby.</returns>
      <param name="serviceType">Typ služby</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServices(System.Type)">
      <summary>Načte kolekci instancí služby zadaného typu.</summary>
      <returns>Kolekce instancí služby.</returns>
      <param name="serviceType">Typ služby</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Insert(System.Type,System.Int32,System.Object)">
      <summary> Vloží službu do kolekce na pozici se zadaným indexem. </summary>
      <param name="serviceType">Typ služby</param>
      <param name="index">Index o základu 0 určující pozici, na kterou má být služba vložena.Je-li předána hodnota <see cref="F:System.Int32.MaxValue" />, bude prvek přidán na konec.</param>
      <param name="service">Služba, která má být vložena</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.InsertRange(System.Type,System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Vloží prvky kolekce do seznamu služeb na pozici se zadaným indexem. </summary>
      <param name="serviceType">Typ služby</param>
      <param name="index">Index o základu 0, na jehož pozici mají být nové prvky vloženy.Je-li předána hodnota <see cref="F:System.Int32.MaxValue" />, budou prvky přidány na konec.</param>
      <param name="services">Kolekce služeb, které mají být vloženy.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.IsSingleService(System.Type)">
      <summary> Určuje, zda má být typ služby načten pomocí metody GetService nebo GetServices.  </summary>
      <returns>Hodnota true, je-li služba singulární. </returns>
      <param name="serviceType">Typ služby k dotazování</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Remove(System.Type,System.Object)">
      <summary> Odebere první výskyt dané služby ze seznamu služeb pro daný typ služby. </summary>
      <returns>Hodnota true, pokud byla položka úspěšně odebrána, jinak hodnota false.</returns>
      <param name="serviceType">Typ služby</param>
      <param name="service">Odebíraná instance služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAll(System.Type,System.Predicate{System.Object})">
      <summary> Odebere všechny prvky, které splňují podmínky určené zadaným predikátem. </summary>
      <returns>Počet prvků odebraných ze seznamu.</returns>
      <param name="serviceType">Typ služby</param>
      <param name="match">Delegát definující podmínky pro odebírané prvky.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAt(System.Type,System.Int32)">
      <summary> Odebere službu z pozice se zadaným indexem. </summary>
      <param name="serviceType">Typ služby</param>
      <param name="index">Index o základu 0 určující odebíranou službu.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Replace(System.Type,System.Object)">
      <summary>Nahradí všechny existující služby daného typu určenou instancí služby.Funguje pro singulární i plurální služby.</summary>
      <param name="serviceType">Typ služby</param>
      <param name="service">Instance služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceMultiple(System.Type,System.Object)">
      <summary>Nahradí všechny instance služby s více instancemi novou instancí.</summary>
      <param name="serviceType">Typ služby.</param>
      <param name="service">Instance služby, která nahradí aktuální služby tohoto typu.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> Nahradí všechny existující služby daného typu určenými instancemi služby. </summary>
      <param name="serviceType">Typ služby</param>
      <param name="services">Instance služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceSingle(System.Type,System.Object)">
      <summary>Nahradí službu s jednou instancí zadaného typu.</summary>
      <param name="serviceType">Typ služby </param>
      <param name="service">Instance služby.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ResetCache(System.Type)">
      <summary>Odebere hodnoty jednoho typu služby uložené v mezipaměti.</summary>
      <param name="serviceType">Typ služby</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ValueResultConverter`1">
      <summary> Převaděč pro vytváření odpovědí z akcí, které vracejí libovolnou hodnotu <paramref name="T" />. </summary>
      <typeparam name="T">Deklarovaný návratový typ akce.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.ValueResultConverter`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Převádí výsledek akce s libovolným návratovým typem <paramref name="T" /> na instanci <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Nově vytvořený objekt <see cref="T:System.Net.Http.HttpResponseMessage" /></returns>
      <param name="controllerContext">Kontext kontroleru akce</param>
      <param name="actionResult">Výsledek provedení</param>
    </member>
    <member name="T:System.Web.Http.Controllers.VoidResultConverter">
      <summary>Reprezentuje převaděč sloužící k vytvoření odpovědi na akce, které nevracejí žádnou hodnotu.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Controllers.VoidResultConverter" />.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>Převádí vytvořenou odpověď z akcí, které nevracejí žádnou hodnotu.</summary>
      <returns>Převedená odpověď</returns>
      <param name="controllerContext">Kontext kontroleru</param>
      <param name="actionResult">Výsledek akce</param>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyResolver">
      <summary>Reprezentuje kontejner vkládání závislostí.</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyResolver.BeginScope">
      <summary> Nastavuje začátek oboru rozlišení. </summary>
      <returns>Obor závislosti</returns>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyScope">
      <summary>Reprezentuje rozhraní pro rozsah závislostí.</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetService(System.Type)">
      <summary>Načte službu z oboru.</summary>
      <returns>Načtená služba</returns>
      <param name="serviceType">Služba, která má být načtena</param>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetServices(System.Type)">
      <summary>Načte kolekci služeb z oboru.</summary>
      <returns>Načtená kolekce služeb</returns>
      <param name="serviceType">Kolekce služeb, která má být načtena</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiDescription">
      <summary> Popisuje rozhraní API definované relativní cestou URI a metodou HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiDescription.#ctor">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Description.ApiDescription" />. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ActionDescriptor">
      <summary> Získá nebo nastaví popisovač akce, který bude pracovat s rozhraním API. </summary>
      <returns> Popisovač akce </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Documentation">
      <summary> Získá nebo nastaví dokumentaci rozhraní API. </summary>
      <returns> Dokumentace </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.HttpMethod">
      <summary> Získá nebo nastaví metodu HTTP. </summary>
      <returns> Metoda HTTP </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ID">
      <summary>Získá ID.Hodnota ID je jedinečná v rámci <see cref="T:System.Web.Http.HttpServer" />.</summary>
      <returns>ID.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ParameterDescriptions">
      <summary> Získá popisy parametrů. </summary>
      <returns>Popisy parametrů.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.RelativePath">
      <summary> Získá nebo nastaví relativní cestu. </summary>
      <returns> Relativní cesta </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ResponseDescription">
      <summary>Získá nebo nastaví popis odpovědi.</summary>
      <returns>Popis odpovědi.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Route">
      <summary> Získá nebo nastaví registrovanou trasu pro rozhraní API. </summary>
      <returns> Trasa </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedRequestBodyFormatters">
      <summary> Získá podporovaná formátování textu žádosti. </summary>
      <returns>Podporované formátovací moduly textu požadavku.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedResponseFormatters">
      <summary> Získá podporovaná formátování odpovědi. </summary>
      <returns>Podporované formátovací moduly odpovědi.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorer">
      <summary> Prozkoumá prostor identifikátoru URI služby na základě tras, kontrolerů a akcí, jež jsou v systému k dispozici. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
      <param name="configuration">Konfigurace</param>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions">
      <summary> Získá popisy rozhraní API. Popisy jsou inicializovány při prvním přístupu. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.DocumentationProvider">
      <summary> Získá nebo nastaví zprostředkovatele dokumentace. Zprostředkovatel bude zodpovědný za dokumentaci rozhraní API. </summary>
      <returns> Zprostředkovatel dokumentace </returns>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.GetHttpMethodsSupportedByAction(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary> Získá kolekci HttpMethods, kterou tato akce podporuje. Voláno při inicializaci objektu <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>Kolekce HttpMethods, kterou tato akce podporuje.</returns>
      <param name="route">Trasa</param>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreAction(System.String,System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary> Určuje, zda má být akce brána v úvahu pro generování <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. Voláno při inicializaci objektu <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>Hodnota true, pokud má být akce brána v úvahu pro generování <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />, v opačném případě hodnota false.</returns>
      <param name="actionVariableValue">Hodnota proměnné akce z trasy</param>
      <param name="actionDescriptor">Popisovač akce</param>
      <param name="route">Trasa</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreController(System.String,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary> Určuje, zda má být kontroler brán v úvahu pro generování <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. Voláno při inicializaci objektu <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />. </summary>
      <returns>Hodnota true, pokud má být kontroler brán v úvahu pro generování <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />, v opačném případě hodnota false.</returns>
      <param name="controllerVariableValue">Hodnota proměnné kontroleru z trasy</param>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
      <param name="route">Trasa</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorerSettingsAttribute">
      <summary> Tento atribut lze používat v kontrolerech a akcích, jež ovlivňují chování objektu <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorerSettingsAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Description.ApiExplorerSettingsAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorerSettingsAttribute.IgnoreApi">
      <summary> Získá nebo nastaví hodnotu, která označuje, zda má být vyloučen kontroler nebo akce z instancí <see cref="T:System.Web.Http.Description.ApiDescription" /> generovaných objektem <see cref="T:System.Web.Http.Description.ApiExplorer" />. </summary>
      <returns>Hodnota true, pokud mají být kontroler nebo akce ignorovány. V opačném případě hodnota false.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterDescription">
      <summary> Popisuje parametr v rozhraní API definovaném relativní cestou URI a metodou HTTP. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiParameterDescription.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Description.ApiParameterDescription" />.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Documentation">
      <summary> Získá nebo nastaví dokumentaci. </summary>
      <returns> Dokumentace </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Name">
      <summary> Získá nebo nastaví název. </summary>
      <returns> Název </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.ParameterDescriptor">
      <summary> Získá nebo nastaví popisovač parametru. </summary>
      <returns> Popisovač parametru </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Source">
      <summary> Získá nebo nastaví zdroj parametru. Může pocházet z identifikátoru URI žádosti, z textu žádosti nebo z jiných míst. </summary>
      <returns> Zdroj </returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterSource">
      <summary> Popisuje, odkud parametr pochází. </summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromBody">
      <summary>Parametr pochází z textu.</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromUri">
      <summary>Parametr pochází z identifikátoru URI.</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.Unknown">
      <summary>Umístění je neznámé.</summary>
    </member>
    <member name="T:System.Web.Http.Description.IApiExplorer">
      <summary> Definuje rozhraní pro získání kolekce <see cref="T:System.Web.Http.Description.ApiDescription" />. </summary>
    </member>
    <member name="P:System.Web.Http.Description.IApiExplorer.ApiDescriptions">
      <summary> Získá popisy rozhraní API. </summary>
    </member>
    <member name="T:System.Web.Http.Description.IDocumentationProvider">
      <summary> Definuje zprostředkovatele zodpovědného za dokumentaci služby. </summary>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary> Získá dokumentaci založenou na objektu <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />. </summary>
      <returns>Dokumentace kontroleru</returns>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpControllerDescriptor)"></member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> Získá dokumentaci založenou na objektu <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />. </summary>
      <returns>Dokumentace kontroleru</returns>
      <param name="parameterDescriptor">Popisovač parametru</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetResponseDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)"></member>
    <member name="T:System.Web.Http.Description.ResponseDescription">
      <summary>Popisuje odpověď rozhraní API.</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseDescription.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Description.ResponseDescription" />.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.DeclaredType">
      <summary>Získá nebo nastaví deklarovaný typ odpovědi.</summary>
      <returns>Deklarovaný typ odpovědi.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.Documentation">
      <summary>Získá nebo nastaví dokumentaci odpovědi.</summary>
      <returns>Dokumentace odpovědi.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.ResponseType">
      <summary>Získá nebo nastaví skutečný typ odpovědi.</summary>
      <returns>Skutečný typ odpovědi.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ResponseTypeAttribute">
      <summary>Slouží k určení typu entity vrácené akcí, pokud deklarovaný návratový typ je <see cref="T:System.Net.Http.HttpResponseMessage" /> nebo <see cref="T:System.Web.Http.IHttpActionResult" />.Typ <see cref="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType" /> bude načten modulem <see cref="T:System.Web.Http.Description.ApiExplorer" /> při generování <see cref="T:System.Web.Http.Description.ApiDescription" />.</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseTypeAttribute.#ctor(System.Type)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Description.ResponseTypeAttribute" />.</summary>
      <param name="responseType">Typ odpovědi.</param>
    </member>
    <member name="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType">
      <summary>Získá typ odpovědi.</summary>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver">
      <summary> Poskytuje implementaci třídy <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> bez externích závislostí. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.GetAssemblies">
      <summary> Vrátí seznam sestavení dostupných pro aplikaci. </summary>
      <returns>Vlastnost &lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt; sestavení.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator">
      <summary>Reprezentuje výchozí implementaci třídy <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />. Jinou implementaci lze registrovat prostřednictvím <see cref="T:System.Web.Http.Services.DependencyResolver" />. Je provedena optimalizace pro případ, kdy pro každou instanci <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> existuje instance <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" />, lze však podporovat také případy, kdy pro jednu instanci <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> existuje několik instancí <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />. Ve druhém případě je vyhledávání o něco pomalejší, protože se prochází slovník <see cref="P:HttpControllerDescriptor.Properties" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary> Vytvoří kontroler <see cref="T:System.Web.Http.Controllers.IHttpController" /> určený typem <paramref name="controllerType" /> pomocí daného kontextu <paramref name="request" />.</summary>
      <returns>Instance typu <paramref name="controllerType" /></returns>
      <param name="request">Zpráva žádosti</param>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
      <param name="controllerType">Typ kontroleru</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector">
      <summary>Reprezentuje výchozí instanci <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> pro výběr prvku <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> podle dat <see cref="T:System.Net.Http.HttpRequestMessage" />. Jinou implementaci lze registrovat prostřednictvím <see cref="P:System.Web.Http.HttpConfiguration.Services" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector" />.</summary>
      <param name="configuration">Konfigurace</param>
    </member>
    <member name="F:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.ControllerSuffix">
      <summary>Určuje řetězec přípony v názvu kontroleru.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerMapping">
      <summary>Vrátí mapu všech instancí <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, které selektor může vybrat, s klíči řetězce řadiče. </summary>
      <returns>Mapa všech instancí <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, které selektor může vytvořit, nebo hodnota Null, pokud selektor nemá jasně definované mapování třídy <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerName(System.Net.Http.HttpRequestMessage)">
      <summary>Získá název kontroleru pro zadaná data <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Název kontroleru pro zadaná data <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva s požadavkem HTTP</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary>Vybere třídu <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> pro daný <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> pro určená data <see cref="T:System.Net.Http.HttpRequestMessage" /></returns>
      <param name="request">Zpráva s požadavkem HTTP</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver">
      <summary> Poskytuje implementaci třídy <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> bez externích závislostí. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor(System.Predicate{System.Type})">
      <summary>Inicializuje novou instanci <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" /> pomocí predikátu k filtrování typů kontrolerů. </summary>
      <param name="predicate">Predikát.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> Vrátí seznam řadičů dostupných pro aplikaci. </summary>
      <returns>Vlastnost &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; řadičů.</returns>
      <param name="assembliesResolver">Překladač sestavení.</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.IsControllerTypePredicate">
      <summary>Získá hodnotu určující, zda je typ překladače predikátem typu kontroleru.</summary>
      <returns>Hodnota true, pokud je typ překladače predikátem typu kontroleru; jinak hodnota false.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpControllerDispatcher">
      <summary>Odešle příchozí zprávu <see cref="T:System.Net.Http.HttpRequestMessage" /> do implementace třídy <see cref="T:System.Web.Http.Controllers.IHttpController" /> ke zpracování.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> se zadanou konfigurací.</summary>
      <param name="configuration">Konfigurace HTTP</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.HttpControllerDispatcher.Configuration">
      <summary>Získá konfiguraci HTTP.</summary>
      <returns>Konfigurace HTTP</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Odešle příchozí zprávu <see cref="T:System.Net.Http.HttpRequestMessage" /> do řadiče <see cref="T:System.Web.Http.Controllers.IHttpController" />.</summary>
      <returns>Objekt <see cref="T:System.Threading.Tasks.Task`1" />, který reprezentuje probíhající operaci</returns>
      <param name="request">Žádost, která má být odeslána</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher">
      <summary> Tato třída je výchozím popisovačem zpráv koncového bodu, který zkoumá vlastnost <see cref="T:System.Web.Http.Routing.IHttpRoute" /> porovnávané trasy a vybírá, který popisovač zpráv se má volat. Má-li položka <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" /> hodnotu Null, dojde k delegaci na položku <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" /> pomocí zadaných položek <see cref="T:System.Web.Http.HttpConfiguration" /> a <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> jako výchozího popisovače. </summary>
      <param name="configuration">Konfigurace serveru.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" /> pomocí zadané položky <see cref="T:System.Web.Http.HttpConfiguration" /> a <see cref="T:System.Net.Http.HttpMessageHandler" />. </summary>
      <param name="configuration">Konfigurace serveru.</param>
      <param name="defaultHandler">Výchozí popisovač, který se má použít, když položka <see cref="T:System.Web.Http.Routing.IHttpRoute" /> nemá vlastnost <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" />.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Odešle požadavek HTTP jako asynchronní operaci.</summary>
      <returns>Objekt úlohy představující asynchronní operaci.</returns>
      <param name="request">Zpráva požadavku HTTP k odeslání.</param>
      <param name="cancellationToken">Token zrušení pro zrušení operace.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IAssembliesResolver">
      <summary>Poskytuje abstrakci pro správu sestavení aplikace.Jinou implementaci lze registrovat prostřednictvím <see cref="T:System.Web.Http.Services.DependencyResolver" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IAssembliesResolver.GetAssemblies">
      <summary> Vrátí seznam sestavení dostupných pro aplikaci. </summary>
      <returns>Vlastnost &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; sestavení.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerActivator">
      <summary>Definuje metody, které jsou vyžadovány pro <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary>Vytvoří objekt <see cref="T:System.Web.Http.Controllers.IHttpController" />.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Controllers.IHttpController" /></returns>
      <param name="request">Požadavek zprávy</param>
      <param name="controllerDescriptor">Popisovač kontroleru HTTP</param>
      <param name="controllerType">Typ kontroleru</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerSelector">
      <summary> Definuje metody, které jsou vyžadovány pro objekt pro vytváření <see cref="T:System.Web.Http.Controllers.IHttpController" />. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping">
      <summary>Vrátí mapu všech instancí <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, které selektor může vybrat, s klíči řetězce řadiče.Ta je primárně volána objektem <see cref="T:System.Web.Http.Description.IApiExplorer" /> za účelem zjištění všech možných kontrolerů v systému.</summary>
      <returns>Mapa všech instancí <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />, které selektor může vytvořit, nebo hodnota Null, pokud selektor nemá jasně definované mapování třídy <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary> Vybere třídu <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> pro daný <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Instance <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /></returns>
      <param name="request">Zpráva žádosti</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver">
      <summary> Poskytuje abstrakci pro správu typů řadičů aplikace. Jinou implementaci lze registrovat prostřednictvím překladače závislostí.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> Vrátí seznam řadičů dostupných pro aplikaci. </summary>
      <returns>Vlastnost &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; řadičů.</returns>
      <param name="assembliesResolver">Překladač pro sestavení, při kterých došlo k chybě.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks">
      <summary>Poskytuje bloky catch použité v tomto sestavení.</summary>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler">
      <summary>Získá blok catch v: System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler.SendAsync.</summary>
      <returns>Blok catch v: System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler.SendAsync.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher">
      <summary>Získá blok catch v: System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher.SendAsync.</summary>
      <returns>Blok catch v: System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher.SendAsync.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer">
      <summary>Získá blok catch v: System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer.SendAsync.</summary>
      <returns>Blok catch v: System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer.SendAsync.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter">
      <summary>Získá blok catch v: System.Web.Http.ApiController.ExecuteAsync s použitím <see cref="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter" />.</summary>
      <returns>Blok catch v: System.Web.Http.ApiController.ExecuteAsync s použitím <see cref="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter" />.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionContext">
      <summary>Představuje výjimku a kontextuální data s ní spojená, když byla zachycena.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" />.</summary>
      <param name="exception">Zachycená výjimka.</param>
      <param name="catchBlock">Blok catch, ve kterém byla výjimka zachycena.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" />.</summary>
      <param name="exception">Zachycená výjimka.</param>
      <param name="catchBlock">Blok catch, ve kterém byla výjimka zachycena.</param>
      <param name="request">Požadavek zpracovávaný při zachycení výjimky.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" />.</summary>
      <param name="exception">Zachycená výjimka.</param>
      <param name="catchBlock">Blok catch, ve kterém byla výjimka zachycena.</param>
      <param name="request">Požadavek zpracovávaný při zachycení výjimky.</param>
      <param name="response">Odpověď vracená při zachycení výjimky.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Web.Http.Controllers.HttpActionContext)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" />.</summary>
      <param name="exception">Zachycená výjimka.</param>
      <param name="catchBlock">Blok catch, ve kterém byla výjimka zachycena.</param>
      <param name="actionContext">Kontext akce, ve kterém k výjimce došlo.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.ActionContext">
      <summary>Získá kontext akce, ve kterém k výjimce došlo, pokud je k dispozici.</summary>
      <returns>Kontext akce, ve kterém k výjimce došlo, pokud je k dispozici.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.CatchBlock">
      <summary>Získá blok catch, ve kterém byla výjimka zachycena.</summary>
      <returns>Blok catch, ve kterém byla výjimka zachycena.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.ControllerContext">
      <summary>Získá kontext kontroleru, ve kterém k výjimce došlo, pokud je k dispozici.</summary>
      <returns>Kontext kontroleru, ve kterém k výjimce došlo, pokud je k dispozici.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Exception">
      <summary>Získá zachycenou výjimku.</summary>
      <returns>Zachycená výjimka.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Request">
      <summary>Získá požadavek zpracovávaný při zachycení výjimky.</summary>
      <returns>Požadavek zpracovávaný při zachycení výjimky.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.RequestContext">
      <summary>Získá kontext požadavku, ve kterém k výjimce došlo.</summary>
      <returns>Kontext požadavku, ve kterém k výjimce došlo.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Response">
      <summary>Získá odpověď odesílanou při zachycení výjimky.</summary>
      <returns>Odpověď odesílanou při zachycení výjimky.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock">
      <summary>Představuje umístění bloku catch pro kontext výjimky.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock" />.</summary>
      <param name="name">Popisek pro blok catch, kde byla výjimka zachycena.</param>
      <param name="isTopLevel">Hodnota označující, zda je blok catch, kde byla výjimka zachycena, posledním blokem před hostitelem.</param>
      <param name="callsHandler">Hodnota označující, zda mohou být výjimky v bloku catch po zaprotokolování ošetřeny.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.CallsHandler">
      <summary>Získá hodnotu označující, zda mohou být výjimky v bloku catch po zaprotokolování ošetřeny.</summary>
      <returns>Hodnota označující, zda mohou být výjimky v bloku catch po zaprotokolování ošetřeny.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.IsTopLevel">
      <summary>Získá hodnotu označující, zda je blok catch, kde byla výjimka zachycena, posledním blokem před hostitelem.</summary>
      <returns>Hodnota označující, zda je blok catch, kde byla výjimka zachycena, posledním blokem před hostitelem.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.Name">
      <summary>Získá popisek pro blok catch, ve kterém byla výjimka zachycena.</summary>
      <returns>Popisek pro blok catch, ve kterém byla výjimka zachycena.</returns>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.ToString">
      <returns>Vrací objekt <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandler">
      <summary>Reprezentuje obslužnou rutinu neošetřené výjimky.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionHandler" />.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.Handle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
      <summary>Při přepisu v odvozené třídě ošetří výjimku synchronně.</summary>
      <param name="context">Kontext obslužné rutiny výjimky.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <summary>Při přepisu v odvozené třídě ošetří výjimku asynchronně.</summary>
      <returns>Úloha, která reprezentuje asynchronní operaci ošetření výjimky.</returns>
      <param name="context">Kontext obslužné rutiny výjimky.</param>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.ShouldHandle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
      <summary>Určuje, zda má být výjimka ošetřená.</summary>
      <returns>Hodnota true, pokud má být výjimka ošetřena, jinak hodnota false.</returns>
      <param name="context">Kontext obslužné rutiny výjimky.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.System#Web#Http#ExceptionHandling#IExceptionHandler#HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <returns>Vrací objekt <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandlerContext">
      <summary>Představuje kontext, ve kterém dochází ke zpracování neošetřené výjimky.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.#ctor(System.Web.Http.ExceptionHandling.ExceptionContext)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionHandlerContext" />.</summary>
      <param name="exceptionContext">Kontext výjimky.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.CatchBlock">
      <summary>Získá blok catch, ve kterém byla výjimka zachycena.</summary>
      <returns>Blok catch, ve kterém byla výjimka zachycena.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Exception">
      <summary>Získá zachycenou výjimku.</summary>
      <returns>Zachycená výjimka.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.ExceptionContext">
      <summary>Získá kontext výjimky poskytující výjimku a související data.</summary>
      <returns>Kontext výjimky poskytující výjimku a související data.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Request">
      <summary>Získá požadavek zpracovávaný při zachycení výjimky.</summary>
      <returns>Požadavek zpracovávaný při zachycení výjimky.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.RequestContext">
      <summary>Získá kontext požadavku, ve kterém k výjimce došlo.</summary>
      <returns>Kontext požadavku, ve kterém k výjimce došlo.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Result">
      <summary>Získá nebo nastaví výsledek poskytující zprávu odpovědi, když je výjimka ošetřena.</summary>
      <returns>Výsledek poskytující zprávu odpovědi, když je výjimka ošetřena.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions">
      <summary>Poskytuje rozšiřující metody pro položku <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" />.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions.HandleAsync(System.Web.Http.ExceptionHandling.IExceptionHandler,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)">
      <summary>Volá obslužnou rutinu výjimky a určuje odpověď pro její zpracování, pokud existuje.</summary>
      <returns>Úloha, která po dokončení obsahuje zprávu s odpovědí, která má být vrácena, pokud jde o ošetřenou výjimku, nebo hodnotu null, pokud výjimka zůstává neošetřená.</returns>
      <param name="handler">Obslužná rutina neošetřených výjimek.</param>
      <param name="context">Kontext výjimky.</param>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLogger">
      <summary>Reprezentuje protokolovač neošetřených výjimek.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionLogger" />.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.Log(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
      <summary>Při přepisu v odvozené třídě protokoluje výjimku synchronně.</summary>
      <param name="context">Kontext protokolovače výjimek.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <summary>Při přepisu v odvozené třídě protokoluje výjimku asynchronně.</summary>
      <returns>Úloha, která reprezentuje asynchronní operaci protokolování výjimky.</returns>
      <param name="context">Kontext protokolovače výjimek.</param>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.ShouldLog(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
      <summary>Určuje, zda má být výjimka zaprotokolována.</summary>
      <returns>Hodnota true, pokud má být výjimka zaprotokolována, jinak hodnota false.</returns>
      <param name="context">Kontext protokolovače výjimek.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.System#Web#Http#ExceptionHandling#IExceptionLogger#LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <returns>Vrací objekt <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLoggerContext">
      <summary>Představuje kontext, ve kterém dochází k protokolování neošetřené výjimky.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.#ctor(System.Web.Http.ExceptionHandling.ExceptionContext)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ExceptionHandling.ExceptionLoggerContext" />.</summary>
      <param name="exceptionContext">Kontext výjimky.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.CallsHandler">
      <summary>Získá nebo nastaví hodnotu označující, zda výjimku může následně ošetřit <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" /> za účelem vytvoření nové zprávy odpovědi.</summary>
      <returns>Hodnota označující, zda výjimku může následně ošetřit <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" /> za účelem vytvoření nové zprávy odpovědi.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.CatchBlock">
      <summary>Získá blok catch, ve kterém byla výjimka zachycena.</summary>
      <returns>Blok catch, ve kterém byla výjimka zachycena.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.Exception">
      <summary>Získá zachycenou výjimku.</summary>
      <returns>Zachycená výjimka.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.ExceptionContext">
      <summary>Získá kontext výjimky poskytující výjimku a související data.</summary>
      <returns>Kontext výjimky poskytující výjimku a související data.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.Request">
      <summary>Získá požadavek zpracovávaný při zachycení výjimky.</summary>
      <returns>Požadavek zpracovávaný při zachycení výjimky.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.RequestContext">
      <summary>Získá kontext požadavku, ve kterém k výjimce došlo.</summary>
      <returns>Kontext požadavku, ve kterém k výjimce došlo.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions">
      <summary>Poskytuje rozšiřující metody pro položku <see cref="T:System.Web.Http.ExceptionHandling.IExceptionLogger" />.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions.LogAsync(System.Web.Http.ExceptionHandling.IExceptionLogger,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)">
      <summary>Volá protokolovač výjimek.</summary>
      <returns>Úloha, která reprezentuje asynchronní operaci protokolování výjimky.</returns>
      <param name="logger">Protokolovač neošetřených výjimek.</param>
      <param name="context">Kontext výjimky.</param>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionServices">
      <summary>Vytvoří služby výjimek pro volání protokolování a zpracování z bloků catch.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetHandler(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá obslužnou rutinu výjimky, která volá registrovanou službu obslužných rutin, pokud existuje, a zajišťuje, aby se výjimky nechtěně nešířily na hostitele.</summary>
      <returns>Obslužná rutina výjimky, která volá registrovanou obslužnou rutinu a zajišťuje, aby se výjimky nechtěně nešířily na hostitele.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetHandler(System.Web.Http.HttpConfiguration)">
      <summary>Získá obslužnou rutinu výjimky, která volá registrovanou službu obslužných rutin, pokud existuje, a zajišťuje, aby se výjimky nechtěně nešířily na hostitele.</summary>
      <returns>Obslužná rutina výjimky, která volá registrovanou obslužnou rutinu a zajišťuje, aby se výjimky nechtěně nešířily na hostitele.</returns>
      <param name="configuration">Konfigurace</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetLogger(System.Web.Http.Controllers.ServicesContainer)">
      <summary>Získá protokolovač výjimek, který volá všechny registrované služby protokolovače.</summary>
      <returns>Kombinovaný protokolovač.</returns>
      <param name="services">Kontejner služeb.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetLogger(System.Web.Http.HttpConfiguration)">
      <summary>Získá protokolovač výjimek, který volá všechny registrované služby protokolovače.</summary>
      <returns>Kombinovaný protokolovač.</returns>
      <param name="configuration">Konfigurace</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.IExceptionHandler">
      <summary>Definuje obslužnou rutinu neošetřených výjimek.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.IExceptionHandler.HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <summary>Zpracujte neošetřené výjimky, buď tím, že je umožníte šířit, nebo jejich ošetřením tím, že poskytnete zprávu odpovědi, která má být místo nich vrácena.</summary>
      <returns>Úloha, která reprezentuje asynchronní operaci ošetření výjimky.</returns>
      <param name="context">Kontext obslužné rutiny výjimky.</param>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.IExceptionLogger">
      <summary>Definuje protokolovač neošetřených výjimek.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.IExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <summary>Protokoluje neošetřenou výjimku.</summary>
      <returns>Úloha, která reprezentuje asynchronní operaci protokolování výjimky.</returns>
      <param name="context">Kontext protokolovače výjimek.</param>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionDescriptorFilterProvider">
      <summary>Poskytuje informace o metodě akce, jako jsou například název, kontroler, parametry, atributy a filtry.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.ActionDescriptorFilterProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Vrátí filtry, které jsou přidruženy k této metodě akce.</summary>
      <returns>Filtry, které jsou přidruženy k této metodě akce</returns>
      <param name="configuration">Konfigurace</param>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionFilterAttribute">
      <summary>Představuje základní třídu pro všechny atributy filtru akcí.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.ActionFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>Probíhá po zavolání metody akce.</summary>
      <param name="actionExecutedContext">Kontext spuštěné akce</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutedAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Probíhá před vyvoláním metody akce.</summary>
      <param name="actionContext">Kontext akce</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.System#Web#Http#Filters#IActionFilter#ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Asynchronně provádí akci filtru.</summary>
      <returns>Nově vytvořená úloha pro tuto operaci</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="cancellationToken">Token zrušení přidružený k této úloze</param>
      <param name="continuation">Delegovaná funkce, která má pokračovat po vyvolání metody akce</param>
    </member>
    <member name="T:System.Web.Http.Filters.AuthorizationFilterAttribute">
      <summary>Poskytuje podrobnosti o filtru autorizace.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Volá se, když proces požaduje autorizaci.</summary>
      <param name="actionContext">Kontext akce, který zapouzdřuje informaci pro použití třídy <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" /></param>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorizationAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.System#Web#Http#Filters#IAuthorizationFilter#ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Spouští filtr autorizace během synchronizace.</summary>
      <returns>Filtr autorizace během synchronizace.</returns>
      <param name="actionContext">Kontext akce, který zapouzdřuje informaci pro použití třídy <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" /></param>
      <param name="cancellationToken">Token zrušení, který ruší operaci.</param>
      <param name="continuation">Pokračování operace.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ConfigurationFilterProvider">
      <summary>Představuje zprostředkovatele filtru konfigurace.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.ConfigurationFilterProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Vrátí filtry, které jsou přidruženy k této metodě konfigurace.</summary>
      <returns>Filtry, které jsou přidruženy k této metodě konfigurace.</returns>
      <param name="configuration">Konfigurace</param>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="T:System.Web.Http.Filters.ExceptionFilterAttribute">
      <summary>Reprezentuje atributy filtru výjimek.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.ExceptionFilterAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>Vyvolává událost výjimky.</summary>
      <param name="actionExecutedContext">Kontext akce</param>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnExceptionAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.System#Web#Http#Filters#IExceptionFilter#ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>Asynchronně spouští filtr výjimek.</summary>
      <returns>Výsledek provedení</returns>
      <param name="actionExecutedContext">Kontext akce</param>
      <param name="cancellationToken">Kontext zrušení</param>
    </member>
    <member name="T:System.Web.Http.Filters.FilterAttribute">
      <summary>Představuje základní třídu pro atributy filtru akcí.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.FilterAttribute" />.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.FilterAttribute.AllowMultiple">
      <summary>Získá hodnotu, která označuje, zda je povoleno více filtrů.</summary>
      <returns>Hodnota true, pokud je povoleno více filtrů, v opačném případě hodnota false</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterInfo">
      <summary>Poskytuje informace o dostupných filtrech akcí.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterInfo.#ctor(System.Web.Http.Filters.IFilter,System.Web.Http.Filters.FilterScope)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.FilterInfo" />.</summary>
      <param name="instance">Instance této třídy</param>
      <param name="scope">Rozsah této třídy.</param>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Instance">
      <summary>Získá nebo nastaví instanci třídy <see cref="T:System.Web.Http.Filters.FilterInfo" />.</summary>
      <returns>Třída <see cref="T:System.Web.Http.Filters.FilterInfo" />.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Scope">
      <summary>Získá nebo nastaví rozsah třídy <see cref="T:System.Web.Http.Filters.FilterInfo" />.</summary>
      <returns>Rozsah třídy FilterInfo.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterScope">
      <summary>Definuje hodnoty určující pořadí spouštění filtrů v rámci téhož typu filtru a pořadí filtru.</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Action">
      <summary>Určuje pořadí po kontroleru. </summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Controller">
      <summary>Určuje pořadí před akcí a po globální položce.</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Global">
      <summary>Určuje akci, která má být provedena před kontrolerem.</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpActionExecutedContext">
      <summary>Představuje akci kontextu HTTP, ve kterém je akce spouštěna.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Exception)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" />.</summary>
      <param name="actionContext">Kontext akce</param>
      <param name="exception">Výjimka</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.ActionContext">
      <summary>Získá nebo nastaví kontext akce HTTP.</summary>
      <returns>Kontext akce HTTP</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Exception">
      <summary>Získá nebo nastaví výjimku, která byla vygenerována během provádění.</summary>
      <returns>Výjimka, která byla vygenerována během provádění</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Request">
      <summary>Získá objekt <see cref="T:System.Net.Http.HttpRequestMessage" /> pro daný kontext.</summary>
      <returns>Objekt <see cref="T:System.Net.Http.HttpRequestMessage" /> pro daný kontext</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Response">
      <summary>Získá nebo nastaví objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> pro daný kontext.</summary>
      <returns>Objekt <see cref="T:System.Net.Http.HttpResponseMessage" /> pro daný kontext</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext">
      <summary>Reprezentuje kontext výzvy ověřování obsahující informace pro provedení výzvy ověřování.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationChallengeContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.IHttpActionResult)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext" />.</summary>
      <param name="actionContext">Kontext akce</param>
      <param name="result">Výsledek aktuální akce.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.ActionContext">
      <summary>Získá kontext akce.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Request">
      <summary>Získá zprávu požadavku.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Result">
      <summary>Získá nebo nastaví výsledek akce k provedení.</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationContext">
      <summary>Reprezentuje kontext ověřování obsahující informace pro provedení ověřování.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Security.Principal.IPrincipal)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.HttpAuthenticationContext" />.</summary>
      <param name="actionContext">Kontext akce</param>
      <param name="principal">Aktuální objekt zabezpečení.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ActionContext">
      <summary>Získá kontext akce.</summary>
      <returns>Kontext akce</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ErrorResult">
      <summary>Získá nebo nastaví výsledek akce, který vygeneruje chybnou odpověď (pokud se ověřování nezdaří, jinak null).</summary>
      <returns>Výsledek akce, který vygeneruje chybnou odpověď.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Principal">
      <summary>Získá nebo nastaví ověřený objekt zabezpečení.</summary>
      <returns>Ověřený objekt zabezpečení.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Request">
      <summary>Získá zprávu požadavku.</summary>
      <returns>Zpráva žádosti</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpFilterCollection">
      <summary>Reprezentuje kolekci filtrů HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Filters.HttpFilterCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Add(System.Web.Http.Filters.IFilter)">
      <summary>Přidá položku na konec kolekce.</summary>
      <param name="filter">Položka, která má být přidána do kolekce</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.AddRange(System.Collections.Generic.IEnumerable{System.Web.Http.Filters.IFilter})"></member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Clear">
      <summary>Odebere všechny položky z kolekce.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Contains(System.Web.Http.Filters.IFilter)">
      <summary>Určuje, zda kolekce obsahuje zadanou položku.</summary>
      <returns>Hodnota true, pokud kolekce obsahuje zadanou položku, jinak hodnota false.</returns>
      <param name="filter">Kontrolovaná položka</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpFilterCollection.Count">
      <summary>Získá počet elementů v kolekci.</summary>
      <returns>Počet elementů v kolekci</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.GetEnumerator">
      <summary>Získá enumerátor procházející kolekci.</summary>
      <returns>Objekt enumerátoru, který lze použít k procházení kolekce</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Remove(System.Web.Http.Filters.IFilter)">
      <summary>Odebere určenou položku z kolekce.</summary>
      <param name="filter">Položka, která má být z kolekce odebrána</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Získá enumerátor procházející kolekci.</summary>
      <returns>Objekt enumerátoru, který lze použít k procházení kolekce</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IActionFilter">
      <summary>Definuje metody, které se používají ve filtru akce.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Asynchronně provádí akci filtru.</summary>
      <returns>Nově vytvořená úloha pro tuto operaci</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="cancellationToken">Token zrušení přidružený k této úloze</param>
      <param name="continuation">Delegovaná funkce, která má pokračovat po vyvolání metody akce</param>
    </member>
    <member name="T:System.Web.Http.Filters.IAuthenticationFilter">
      <summary>Definuje filtr, který provede ověřování.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.AuthenticateAsync(System.Web.Http.Filters.HttpAuthenticationContext,System.Threading.CancellationToken)">
      <summary>Ověří žádost.</summary>
      <returns>Operace Task, která provede ověření.</returns>
      <param name="context">Kontext ověřování.</param>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.ChallengeAsync(System.Web.Http.Filters.HttpAuthenticationChallengeContext,System.Threading.CancellationToken)"></member>
    <member name="T:System.Web.Http.Filters.IAuthorizationFilter">
      <summary>Definuje metody, které jsou požadovány pro filtr autorizace.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthorizationFilter.ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>Spouští filtr autorizace pro synchronizaci.</summary>
      <returns>Filtr autorizace pro synchronizaci</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="cancellationToken">Token zrušení přidružený k filtru</param>
      <param name="continuation">Pokračování</param>
    </member>
    <member name="T:System.Web.Http.Filters.IExceptionFilter">
      <summary>Definuje metody, které jsou vyžadovány pro filtr výjimek.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>Spouští asynchronní filtr výjimek.</summary>
      <returns>Asynchronní filtr výjimek</returns>
      <param name="actionExecutedContext">Kontext spuštěné akce</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="T:System.Web.Http.Filters.IFilter">
      <summary>Definuje metody, které se používají v určitém filtru.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.IFilter.AllowMultiple">
      <summary>Získá nebo nastaví hodnotu informující o tom, zda lze v jednom prvku programu určit více než jednu instanci uvedeného atributu.</summary>
      <returns>Hodnota true, je-li povoleno zadat více než jednu instanci, jinak hodnota false.Výchozí hodnotou je hodnota false.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IFilterProvider">
      <summary>Poskytuje informace o filtru.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Vrací výčet filtrů.</summary>
      <returns>Výčet filtrů</returns>
      <param name="configuration">Konfigurace HTTP</param>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="T:System.Web.Http.Filters.IOverrideFilter"></member>
    <member name="P:System.Web.Http.Filters.IOverrideFilter.FiltersToOverride"></member>
    <member name="T:System.Web.Http.Hosting.HttpPropertyKeys">
      <summary> Poskytuje společné klíče pro vlastnosti uložené v objektu <see cref="P:System.Net.Http.HttpRequestMessage.Properties" />.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.ClientCertificateKey">
      <summary>Poskytuje klíč k certifikátu klienta pro tento požadavek.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DependencyScope">
      <summary>Poskytuje klíč pro data <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> přidružená k tomuto požadavku.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DisposableRequestResourcesKey">
      <summary>Poskytuje klíč pro kolekci prostředků, jež by měla být uvolněna při uvolnění žádosti.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpActionDescriptorKey">
      <summary> Poskytuje klíč pro data <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> přidružená k tomuto požadavku. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpConfigurationKey">
      <summary>Poskytuje klíč pro data <see cref="T:System.Web.Http.HttpConfiguration" /> přidružená k tomuto požadavku.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpRouteDataKey">
      <summary>Poskytuje klíč pro data <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> přidružená k tomuto požadavku.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IncludeErrorDetailKey">
      <summary>Poskytuje klíč, který udává, zda mají být do odpovědi na tento požadavek HTTP zahrnuty podrobnosti o chybách.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsBatchRequest">
      <summary> Poskytuje klíč, který určuje, zda je žádost dávkovou žádostí. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsLocalKey">
      <summary>Poskytuje klíč, který určuje, zda požadavek pochází z místní adresy.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.NoRouteMatched">
      <summary> Poskytuje klíč, který určuje, zda u žádosti nedošlo k neshodě trasy. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestContextKey">
      <summary>Poskytuje klíč pro objekt <see cref="T:System.Web.Http.Controllers.HttpRequestContext" /> pro tento požadavek.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestCorrelationKey">
      <summary>Poskytuje klíč pro objekt <see cref="T:System.Guid" /> uložený v objektu <see cref="T:System.Net.Http.Properties" />. Jedná se o ID korelace tohoto požadavku.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestQueryNameValuePairsKey">
      <summary>Poskytuje klíč pro řetězec analyzovaného dotazu uložený v objektu <see cref="T:System.Net.Http.Properties" />.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RetrieveClientCertificateDelegateKey">
      <summary>Poskytuje klíč pro delegáta, který může načíst certifikát klienta pro tento požadavek.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.SynchronizationContextKey">
      <summary>Poskytuje klíč pro aktuální objekt <see cref="T:System.Threading.SynchronizationContext" /> uložený v objektu Properties(). Pokud má objekt Current() hodnotu null, není uložen žádný kontext.</summary>
    </member>
    <member name="T:System.Web.Http.Hosting.IHostBufferPolicySelector">
      <summary> Rozhraní pro řízení použití požadavků na vyrovnávací paměť a odpovědí v hostiteli. Pokud hostitel poskytuje podporu pro ukládání požadavků a/nebo odpovědí do vyrovnávací paměti, může pomocí tohoto rozhraní stanovit zásadu určující, kdy má být ukládání do vyrovnávací paměti použito.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
      <summary>Určuje, zda by měl hostitel ukládat do vyrovnávací paměti obsah entity <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Hodnota true, pokud se má používat ukládání do vyrovnávací paměti; v opačném případě by se měl použít požadavek vysílaný datovým proudem.</returns>
      <param name="hostContext">Kontext hostitele.</param>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
      <summary>Určuje, zda by měl hostitel ukládat do vyrovnávací paměti obsah entity <see cref="T.System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Hodnota true, pokud se má používat ukládání do vyrovnávací paměti; v opačném případě by se měla použít odpověď vysílaná datovým proudem.</returns>
      <param name="response">Zpráva odpovědi HTTP.</param>
    </member>
    <member name="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler">
      <summary>Reprezentuje popisovač zpráv, který potlačí výsledky ověřování hostitele.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler" />.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Asynchronně odešle zprávu požadavku.</summary>
      <returns>Úloha, která dokončí asynchronní operaci.</returns>
      <param name="request">Zpráva požadavku k odeslání.</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadata">
      <summary>Představuje třídu metadat ModelMetadata.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.ModelMetadata" />.</summary>
      <param name="provider">Zprostředkovatel</param>
      <param name="containerType">Typ kontejneru</param>
      <param name="modelAccessor">Přistupující objekt modelu</param>
      <param name="modelType">Typ modelu</param>
      <param name="propertyName">Název vlastnosti</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.AdditionalValues">
      <summary>Získá slovník, který obsahuje další metadata týkající se modelu.</summary>
      <returns>Slovník, který obsahuje další metadata týkající se modelu</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ContainerType">
      <summary>Získá nebo nastaví typ kontejneru v modelu.</summary>
      <returns>Typ kontejneru v modelu</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ConvertEmptyStringToNull">
      <summary>Získá nebo nastaví hodnotu určující, zda mají být prázdné řetězce, které jsou ve formulářích odeslány zpět, převedeny na hodnotu null.</summary>
      <returns>Hodnota true, pokud mají být prázdné řetězce odesílané zpět ve formulářích převedeny na hodnotu null, jinak hodnota false.Výchozí hodnotou je hodnota true.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Description">
      <summary>Získá nebo nastaví popis modelu.</summary>
      <returns>Popis modeluVýchozí hodnotou je hodnota null.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetDisplayName">
      <summary>Získá zobrazovaný název modelu.</summary>
      <returns>Zobrazovaný název modelu</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetValidators(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Získá seznam validátorů modelu.</summary>
      <returns>Seznam validátorů modelu</returns>
      <param name="validatorProviders">Zprostředkovatelé validátorů pro model</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsComplexType">
      <summary>Získá nebo nastaví hodnotu určující, zda se jedná o komplexní typ modelu.</summary>
      <returns>Hodnota určující, zda je model považován za komplexní.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsNullableValueType">
      <summary>Získá hodnotu, která určuje, zda se jedná o typ s možnou hodnotou null.</summary>
      <returns>Hodnota true, pokud se jedná o typ s možnou hodnotou null, jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsReadOnly">
      <summary>Získá nebo nastaví hodnotu určující, zda je model jen pro čtení.</summary>
      <returns>Hodnota true, pokud se jedná o model jen pro čtení, jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Model">
      <summary>Získá hodnotu modelu</summary>
      <returns>Hodnota modelu může být null.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ModelType">
      <summary>Získá typ modelu.</summary>
      <returns>Typ modelu</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Properties">
      <summary>Získá kolekci objektů metadat modelu, která popisuje vlastnosti modelu.</summary>
      <returns>Kolekce objektů metadat modelu, která popisuje vlastnosti modelu</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.PropertyName">
      <summary>Získá název vlastnosti.</summary>
      <returns>Název vlastnosti</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Provider">
      <summary>Získá nebo nastaví zprostředkovatele.</summary>
      <returns>Zprostředkovatel</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadataProvider">
      <summary>Poskytuje abstraktní základní třídu pro vlastního zprostředkovatele metadat.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Získá objekt ModelMetadata pro každou vlastnost modelu.</summary>
      <returns>Objekt ModelMetadata pro každou vlastnost modelu</returns>
      <param name="container">Kontejner</param>
      <param name="containerType">Typ kontejneru</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Získá metadata pro zadanou vlastnost.</summary>
      <returns>Model metadat zadané vlastnosti</returns>
      <param name="modelAccessor">Přistupující objekt modelu</param>
      <param name="containerType">Typ kontejneru</param>
      <param name="propertyName">Vlastnost, pro kterou se má získat model metadat.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Získá metadata pro zadaný přistupující objekt modelu a typ modelu.</summary>
      <returns>Metadata</returns>
      <param name="modelAccessor">Přistupující objekt modelu</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1">
      <summary>Poskytuje abstraktní třídu pro implementaci zprostředkovatele metadat.</summary>
      <typeparam name="TModelMetadata">Typ metadat modelu</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataFromPrototype(`0,System.Func{System.Object})">
      <summary>Při přepsání v odvozené třídě vytvoří metadata modelu pro danou vlastnost s použitím určeného prototypu.</summary>
      <returns>Modelová metadata pro vlastnost</returns>
      <param name="prototype">Prototyp, z nějž mají být vytvořena metadata modelu</param>
      <param name="modelAccessor">Přistupující objekt modelu</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Při přepsání v odvozené třídě vytvoří metadata modelu pro danou vlastnost.</summary>
      <returns>Modelová metadata pro vlastnost</returns>
      <param name="attributes">Sada atributů</param>
      <param name="containerType">Typ kontejneru</param>
      <param name="modelType">Typ modelu</param>
      <param name="propertyName">Název vlastnosti</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Načte seznam vlastností modelu.</summary>
      <returns>Seznam vlastností modelu</returns>
      <param name="container">Kontejner modelu</param>
      <param name="containerType">Typ kontejneru</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Načte metadata zadané vlastnosti pomocí typu kontejneru a názvu vlastnosti.</summary>
      <returns>Metadata zadané vlastnosti</returns>
      <param name="modelAccessor">Přistupující objekt modelu</param>
      <param name="containerType">Typ kontejneru</param>
      <param name="propertyName">Název vlastnosti</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Vrátí metadata pro zadanou vlastnost pomocí typu modelu.</summary>
      <returns>Metadata zadané vlastnosti</returns>
      <param name="modelAccessor">Přistupující objekt modelu</param>
      <param name="modelType">Typ kontejneru</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes">
      <summary>Poskytuje data mezipaměti prototypu pro <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.#ctor(System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes" />.</summary>
      <param name="attributes">Atributy poskytující data pro inicializaci</param>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Display">
      <summary>Získá nebo nastaví atribut zobrazení metadat.</summary>
      <returns>Atribut zobrazení metadat</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayFormat">
      <summary>Získá nebo nastaví atribut formátu zobrazení metadat.</summary>
      <returns>Atribut formátu zobrazení metadat</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayName"></member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Editable">
      <summary>Získá nebo nastaví atribut upravitelnosti metadat.</summary>
      <returns>Atribut upravitelnosti metadat</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.ReadOnly">
      <summary>Získá nebo nastaví atribut určení metadat jen ke čtení.</summary>
      <returns>Atribut určení metadat jen ke čtení</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata">
      <summary>Poskytuje kontejner pro běžná metadata pro třídu <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" /> pro daný datový model.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" />.</summary>
      <param name="prototype">Prototyp použitý k inicializaci metadat modelu</param>
      <param name="modelAccessor">Přistupující objekt modelu</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" />.</summary>
      <param name="provider">Zprostředkovatel metadat</param>
      <param name="containerType">Typ kontejneru</param>
      <param name="modelType">Typ modelu</param>
      <param name="propertyName">Název vlastnosti</param>
      <param name="attributes">Atributy poskytující data pro inicializaci</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeConvertEmptyStringToNull">
      <summary>Načítá hodnotu určující, zda mají být prázdné řetězce, které jsou ve formulářích odeslány zpět, převedeny na hodnotu null.</summary>
      <returns>Hodnota true, pokud mají být prázdné řetězce odesílané zpět ve formulářích převedeny na hodnotu null, jinak hodnota false.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeDescription">
      <summary>Načte popis modelu.</summary>
      <returns>Popis modelu</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeIsReadOnly">
      <summary>Načte hodnotu, která určuje, zda je model určen pouze ke čtení.</summary>
      <returns>Hodnota true, pokud se jedná o model jen pro čtení, jinak hodnota false.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.GetDisplayName"></member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1">
      <summary>Poskytuje data mezipaměti prototypu pro: <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <typeparam name="TPrototypeCache">Typ mezipaměti prototypu</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.CachedModelMetadata{`0},System.Func{System.Object})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <param name="prototype">Prototyp</param>
      <param name="modelAccessor">Přistupující objekt modelu</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,`0)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />.</summary>
      <param name="provider">Zprostředkovatel</param>
      <param name="containerType">Typ kontejneru</param>
      <param name="modelType">Typ modelu</param>
      <param name="propertyName">Název vlastnosti</param>
      <param name="prototypeCache">Mezipaměť prototypu</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeConvertEmptyStringToNull">
      <summary>Určuje, zda mají být prázdné řetězce vrácené ve formulářích vypočteny a převedeny na hodnoty null.</summary>
      <returns>Hodnota true, pokud mají být prázdné řetězce odesílané zpět ve formulářích vypočteny a převedeny na hodnotu null, jinak hodnota false.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeDescription">
      <summary>Informuje o hodnotě výpočtu.</summary>
      <returns>Hodnota výpočtu</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsComplexType">
      <summary>Získá hodnotu určující, zda se jedná o komplexní typ modelu.</summary>
      <returns>Hodnota, která určuje, zda rámec webového rozhraní API považuje model za komplexní.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsReadOnly">
      <summary>Získá hodnotu určující, zda je počítaný model určen jen pro čtení.</summary>
      <returns>Hodnota true, pokud je počítaný model určen jen pro čtení, jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ConvertEmptyStringToNull">
      <summary>Získá nebo nastaví hodnotu určující, zda mají být prázdné řetězce, které jsou ve formulářích odeslány zpět, převedeny na hodnotu null.</summary>
      <returns>Hodnota true, pokud mají být prázdné řetězce odesílané zpět ve formulářích převedeny na hodnotu null, jinak hodnota false.Výchozí hodnotou je hodnota true.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.Description">
      <summary>Získá nebo nastaví popis modelu.</summary>
      <returns>Popis modelu</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsComplexType">
      <summary>Získá hodnotu určující, zda se jedná o komplexní typ modelu.</summary>
      <returns>Hodnota, která určuje, zda rámec webového rozhraní API považuje model za komplexní.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsReadOnly">
      <summary>Získá nebo nastaví hodnotu určující, zda je model jen pro čtení.</summary>
      <returns>Hodnota true, pokud se jedná o model jen pro čtení, jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.PrototypeCache">
      <summary>Získá nebo nastaví hodnotu, která určuje, zda se mezipaměť prototypu aktualizuje.</summary>
      <returns>Hodnota true, pokud se mezipaměť prototypu aktualizuje; jinak hodnota false</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider">
      <summary>Implementuje výchozího zprostředkovatele metadat modelu.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>Vytváří metadata z prototypu pro zadanou vlastnost.</summary>
      <returns>Metadata pro vlastnost</returns>
      <param name="prototype">Prototyp</param>
      <param name="modelAccessor">Přistupující objekt modelu</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Vytvoří metadata pro zadanou vlastnost.</summary>
      <returns>Metadata pro vlastnost</returns>
      <param name="attributes">Atributy</param>
      <param name="containerType">Typ kontejneru</param>
      <param name="modelType">Typ modelu</param>
      <param name="propertyName">Název vlastnosti</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider">
      <summary>Představuje prázdného zprostředkovatele metadat modelu.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.ModelMetadata,System.Func{System.Object})">
      <summary>Vytvoří metadata z prototypu.</summary>
      <returns>Metadata</returns>
      <param name="prototype">Prototyp metadat modelu.</param>
      <param name="modelAccessor">Přistupující objekt modelu</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>Vytvoří prototyp zprostředkovatele metadat <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" />.</summary>
      <returns>Prototyp zprostředkovatele metadat.</returns>
      <param name="attributes">Atributy</param>
      <param name="containerType">Typ kontejneru</param>
      <param name="modelType">Typ modelu</param>
      <param name="propertyName">Název vlastnosti</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding">
      <summary>Představuje vazbu přímo do tokenu zrušení.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding" />.</summary>
      <param name="descriptor">Popisovač vazby.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Provede vazbu během synchronizace.</summary>
      <returns>Vazba během synchronizace.</returns>
      <param name="metadataProvider">Zprostředkovatel metadat</param>
      <param name="actionContext">Kontext akce</param>
      <param name="cancellationToken">Oznámení po zrušení operací.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute">
      <summary>Představuje atribut, který vyvolá vlastní vazač modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.GetBinder">
      <summary>Načte přidružený vazač modelu.</summary>
      <returns>Odkaz na objekt, který implementuje rozhraní <see cref="T:System.Web.Http.ModelBinding.IModelBinder" />.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.DefaultActionValueBinder">
      <summary>Představuje výchozí hodnotu akce vazače.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Výchozí implementace rozhraní <see cref="T:System.Web.Http.Controllers.IActionValueBinder" />.Toto rozhraní je primárním vstupním bodem pro vazbu parametrů akcí.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> přidružený k tomuto objektu <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</returns>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetParameterBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Získá objekt <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />, který je přidružen k tomuto objektu <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> přidružený k tomuto objektu <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />.</returns>
      <param name="parameter">Popisovač parametru</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ErrorParameterBinding">
      <summary>Definuje chybu vazby.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ErrorParameterBinding" />.</summary>
      <param name="descriptor">Popisovač chyby.</param>
      <param name="message">Zpráva</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ErrorParameterBinding.ErrorMessage">
      <summary>Získá chybovou zprávu.</summary>
      <returns>Chybová zpráva</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Provede metodu vazby během synchronizace.</summary>
      <param name="metadataProvider">Zprostředkovatel metadat</param>
      <param name="actionContext">Kontext akce</param>
      <param name="cancellationToken">Hodnota tokenu zrušení.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormatterParameterBinding">
      <summary>Reprezentuje vazbu parametru, jež bude číst z textu a vyvolá formátování.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <param name="descriptor">Popisovač</param>
      <param name="formatters">Formátování.</param>
      <param name="bodyModelValidator">Validátor modelu hlavní části textu</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.BodyModelValidator">
      <summary>Získá nebo nastaví rozhraní pro validátor modelu hlavní části textu.</summary>
      <returns>Rozhraní pro validátor modelu hlavní části textu</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.ErrorMessage">
      <summary>Získá chybovou zprávu.</summary>
      <returns>Chybová zpráva</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Asynchronně provádí vazbu objektu <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <returns>Výsledek akce</returns>
      <param name="metadataProvider">Zprostředkovatel metadat</param>
      <param name="actionContext">Kontext přidružený k akci</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.Formatters">
      <summary>Získá nebo nastaví vyčíslitelný objekt, který reprezentuje formátování vazby parametru.</summary>
      <returns>Vyčíslitelný objekt, který reprezentuje formátování vazby parametru</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Asynchronně načítá obsah objektu <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />.</summary>
      <returns>Výsledek akce</returns>
      <param name="request">Žádost</param>
      <param name="type">Typ</param>
      <param name="formatters">Formátování.</param>
      <param name="formatterLogger">Protokolovač formátu</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.WillReadBody">
      <summary>Získá informaci o tom, zda bude <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> číst hlavní část textu.</summary>
      <returns>Hodnota true, pokud bude <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> číst hlavní část textu, jinak hodnota false.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormDataCollectionExtensions">
      <summary>Reprezentuje rozšíření kolekce dat formuláře.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection)">
      <summary>Načte rozšíření kolekce určeného typu.</summary>
      <returns>Načtená rozšíření kolekce</returns>
      <param name="formData">Data formuláře</param>
      <typeparam name="T">Obecný typ</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Načte rozšíření kolekce určeného typu.</summary>
      <returns>Rozšíření kolekce</returns>
      <param name="formData">Data formuláře</param>
      <param name="modelName">Název modelu</param>
      <param name="requiredMemberSelector">Požadovaný selektor členů</param>
      <param name="formatterLogger">Protokolovač formátování</param>
      <typeparam name="T">Obecný typ</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type)">
      <summary>Načte rozšíření kolekce určeného typu.</summary>
      <returns>Rozšíření kolekce určeného typu</returns>
      <param name="formData">Data formuláře</param>
      <param name="type">Typ objektu.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Načte rozšíření kolekce určeného typu a s určeným názvem modelu.</summary>
      <returns>Rozšíření kolekce</returns>
      <param name="formData">Data formuláře</param>
      <param name="type">Typ objektu.</param>
      <param name="modelName">Název modelu</param>
      <param name="requiredMemberSelector">Požadovaný selektor členů</param>
      <param name="formatterLogger">Protokolovač formátování</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger,System.Web.Http.HttpConfiguration)">
      <summary>Deserializuje data formuláře na daný typ pomocí vazby modelu.</summary>
      <returns>Nejlepší pokus o vázání objektu. Nejlepší pokus může mít hodnotu null.</returns>
      <param name="formData">Kolekce s analyzovanými daty URL formuláře</param>
      <param name="type">Typ cíle pro čtení jako</param>
      <param name="modelName">Hodnota null nebo prázdná hodnota pro přečtení celého formuláře jako jednoho objektu. V případě dat textu se jedná o běžnou situaci. Nebo název modelu pro provedení částečné vazby u dat formuláře. To je běžné při extrahování jednotlivých polí.</param>
      <param name="requiredMemberSelector">Objekt <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> sloužící k určení požadovaných členů.</param>
      <param name="formatterLogger">Třída <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />, do níž mají být protokolovány události.</param>
      <param name="config">Konfigurace <see cref="T:System.Web.Http.HttpConfiguration" />, ze které se má vybrat vazač. Pokud ještě konfigurace není vytvořená, může mít hodnotu null. V takovém případě se vytvoří nová konfigurace.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehavior">
      <summary>Podává výčet chování vazby HTTP.</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Never">
      <summary>Nepoužívat vazbu HTTP</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Optional">
      <summary>Volitelné chování vazby</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Required">
      <summary>Vazba HTTP je vyžadována.</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute">
      <summary>Poskytuje základní třídu pro atributy chování vazby modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.#ctor(System.Web.Http.ModelBinding.HttpBindingBehavior)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute" />.</summary>
      <param name="behavior">Chování.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.Behavior">
      <summary>Získá nebo nastaví kategorii chování.</summary>
      <returns>Kategorie chování.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.TypeId">
      <summary>Získá jedinečný identifikátor pro tento atribut.</summary>
      <returns>ID tohoto atributu.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding">
      <summary>Vazby parametru na požadavek.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding" />.</summary>
      <param name="descriptor">Popisovač parametru</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Asynchronně provede vazbu parametru.</summary>
      <returns>Svázaný parametr.</returns>
      <param name="metadataProvider">Zprostředkovatel metadat</param>
      <param name="actionContext">Kontext akce</param>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IModelBinder">
      <summary>Definuje metody, které jsou vyžadovány pro vazač modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.IModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Vytvoří vazbu modelu s hodnotou pomocí zadaného kontextu kontroleru a kontextu vazby.</summary>
      <returns>Hodnota true, pokud byla vazba modelu úspěšná, jinak hodnota false</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IValueProviderParameterBinding">
      <summary>Představuje poskytovatele hodnot pro vazbu parametru.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.IValueProviderParameterBinding.ValueProviderFactories">
      <summary>Získá instance <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> použité v této vazbě parametru.</summary>
      <returns>Instance <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> použité v této vazbě parametru.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter">
      <summary>Reprezentuje třídu <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> sloužící ke zpracování dat zakončených adresou URL formuláře HTML, která jsou také označována jako application/x-www-form-urlencoded.  </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor(System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.CanReadType(System.Type)">
      <summary> Určuje, zda tato třída <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" /> může číst zadaný <paramref name="type" /> objektů. </summary>
      <returns>Hodnota true v případě, že objekty tohoto typu lze číst; jinak hodnota false</returns>
      <param name="type">Typ objektu určeného ke čtení.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Načte objekt pro zadaný <paramref name="type" /> z určeného proudu. Tato metoda je volána v průběhu deserializace.</summary>
      <returns>Úloha <see cref="T:System.Threading.Tasks.Task" />, jejímž výsledkem bude přečtená instance objektu.</returns>
      <param name="type">Typ objektu určeného ke čtení.</param>
      <param name="readStream">Datový proud <see cref="T:System.IO.Stream" />, z něhož má být provedeno čtení.</param>
      <param name="content">Obsah, který je čten.</param>
      <param name="formatterLogger">Třída <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />, do níž mají být protokolovány události.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderAttribute">
      <summary>Určuje, že tento parametr používá vazač modelu.Volitelně může určovat konkrétní vazač modelu a zprostředkovatele hodnot, jež řídí daný vazač modelu.Odvozené atributy mohou poskytovat užitečná nastavení pro vazač modelu nebo zprostředkovatele hodnot.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor(System.Type)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" />.</summary>
      <param name="binderType">Typ vazače modelu.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.BinderType">
      <summary>Získá nebo nastaví typ vazače modelu.</summary>
      <returns>Typ vazače modelu. </returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>Získá vazbu pro parametr.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> obsahující danou vazbu.</returns>
      <param name="parameter">Parametr k vytvoření vazby.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary> Získá rozhraní IModelBinder pro tento typ. </summary>
      <returns> Vazač modelu s jinou hodnotou než Null.</returns>
      <param name="configuration">Konfigurace</param>
      <param name="modelType">Typ modelu, který má vazač svázat.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinderProvider(System.Web.Http.HttpConfiguration)">
      <summary>Získá zprostředkovatele vazače modelu.</summary>
      <returns>Instance <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</returns>
      <param name="configuration">Objekt konfigurace <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary> Získá zprostředkovatele hodnot, kteří budou dodáni do vazače modelu. </summary>
      <returns>Kolekce instancí <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /></returns>
      <param name="configuration">Objekt konfigurace <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.Name">
      <summary>Získá nebo nastaví název, který bude považován během vazby modelu za název parametru.</summary>
      <returns>Název parametru, který má být zohledněn.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.SuppressPrefixCheck">
      <summary>Získá nebo nastaví hodnotu, která určuje, zda má být potlačena kontrola předpon.</summary>
      <returns>Hodnota true, pokud má být kontrola předpon potlačena, v opačném případě hodnota false</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderConfig">
      <summary>Poskytuje kontejner pro konfiguraci vazače modelu.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ResourceClassKey">
      <summary>Získá nebo nastaví název souboru prostředků (klíč třídy), který obsahuje lokalizované hodnoty řetězce.</summary>
      <returns>Název souboru prostředků (klíč třídy)</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.TypeConversionErrorMessageProvider">
      <summary>Získá nebo nastaví aktuálního zprostředkovatele pro chybovou zprávu převodu typu.</summary>
      <returns>Aktuální zprostředkovatel pro chybovou zprávu převodu typu.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ValueRequiredErrorMessageProvider">
      <summary>Získá nebo nastaví aktuálního zprostředkovatele pro chybové zprávy povinných hodnot.</summary>
      <returns>Zprostředkovatel chybové zprávy.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderErrorMessageProvider">
      <summary>Poskytuje kontejner pro zprostředkovatele chybové zprávy vazače modelu.</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding">
      <summary> Popisuje parametr, který bude vázán prostřednictvím objektu ModelBinding.   </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding" />.</summary>
      <param name="descriptor">Popisovač parametru</param>
      <param name="modelBinder">Vazač modelu</param>
      <param name="valueProviderFactories">Kolekce objektů factory zprostředkovatele hodnot.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.Binder">
      <summary>Získá vazač modelu.</summary>
      <returns>Vazač modelu</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>Asynchronně provede vazbu parametru prostřednictvím vazače modelu.</summary>
      <returns>Úloha signalizovaná po dokončení vazby.</returns>
      <param name="metadataProvider">Zprostředkovatel metadat, která mají být použita k ověření.</param>
      <param name="actionContext">Kontext akce pro vazbu.</param>
      <param name="cancellationToken">Token zrušení přiřazený k této úloze pro zrušení operace vazby.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ValueProviderFactories">
      <summary>Získá kolekci objektů factory zprostředkovatele hodnot.</summary>
      <returns>Kolekce objektů factory zprostředkovatele hodnot.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderProvider">
      <summary>Poskytuje abstraktní základní třídu pro zprostředkovatele vazače modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Najde vazač pro daný typ.</summary>
      <returns>Vazač, který se může pokusit o svázání tohoto typu. Může mít i hodnotu Null, pokud má vazač statickou informaci o tom, že daný typ nemůže za žádných okolností svázat.</returns>
      <param name="configuration">Objekt konfigurace</param>
      <param name="modelType">Typ modelu, s kterým má být vytvořena vazba</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBindingContext">
      <summary>Poskytuje kontext, ve kterém funguje vazač modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor(System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" />.</summary>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>Získá nebo nastaví hodnotu, která označuje, zda má vazač používat prázdnou předponu.</summary>
      <returns>Hodnota true, pokud má vazač používat prázdnou předponu, v opačném případě hodnota false</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.Model">
      <summary>Získá nebo nastaví model.</summary>
      <returns>Model</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelMetadata">
      <summary>Získá nebo nastaví metadata modelu.</summary>
      <returns>Metadata modelu</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelName">
      <summary>Získá nebo nastaví název modelu.</summary>
      <returns>Název modelu</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelState">
      <summary>Získá nebo nastaví stav modelu.</summary>
      <returns>Stav modelu</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelType">
      <summary>Získá nebo nastaví typ modelu.</summary>
      <returns>Typ modelu</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.PropertyMetadata">
      <summary>Získá metadata vlastnosti.</summary>
      <returns>Metadata vlastnosti</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValidationNode">
      <summary>Získá nebo nastaví ověřovací uzel.</summary>
      <returns>Ověřovací uzel</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValueProvider">
      <summary>Získá nebo nastaví zprostředkovatele hodnoty.</summary>
      <returns>Zprostředkovatel hodnoty</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelError">
      <summary>Představuje chybu, ke které došlo během vazby modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelError" /> pomocí zadané výjimky.</summary>
      <param name="exception">Výjimka</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception,System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelError" /> pomocí zadané výjimky a chybové zprávy.</summary>
      <param name="exception">Výjimka</param>
      <param name="errorMessage">Chybová zpráva</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelError" /> pomocí zadané chybové zprávy.</summary>
      <param name="errorMessage">Chybová zpráva</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.ErrorMessage">
      <summary>Získá nebo nastaví chybovou zprávu.</summary>
      <returns>Chybová zpráva</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.Exception">
      <summary>Získá nebo nastaví objekt výjimky.</summary>
      <returns>Objekt výjimky</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelErrorCollection">
      <summary>Reprezentuje kolekci instancí <see cref="T:System.Web.Http.ModelBinding.ModelError" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.Exception)">
      <summary>Přidá zadaný objekt Exception do kolekce chyb modelu.</summary>
      <param name="exception">Výjimka</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.String)">
      <summary>Přidá zadanou chybovou zprávu do kolekce chyb modelu.</summary>
      <param name="errorMessage">Chybová zpráva</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelState">
      <summary>Zapouzdří stav vazby modelu do vlastnosti argumentu metody akce nebo do samotného argumentu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelState.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelState" />.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Errors">
      <summary>Získá objekt <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" /> obsahující všechny chyby, ke kterým došlo během vazby modelu.</summary>
      <returns>Chyby stavu modelu</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Value">
      <summary>Získá objekt <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" />, který zapouzdřuje hodnotu vázanou během vazby modelu.</summary>
      <returns>Hodnota stavu modelu</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelStateDictionary">
      <summary>Představuje stav pokusu o vytvoření vazby odeslaného formuláře s metodou akce, která obsahuje informace o ověření.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> pomocí hodnot, které jsou zkopírovány ze zadaného slovníku stavů modelu.</summary>
      <param name="dictionary">Slovník</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Přidá zadanou položku do slovníku stavů modelu.</summary>
      <param name="item">Objekt, který má být přidán do slovníku stavů modelu</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.String,System.Web.Http.ModelBinding.ModelState)">
      <summary>Přidá do slovníku stavů modelu element, který obsahuje zadaný klíč a hodnotu.</summary>
      <param name="key">Klíč elementu, který chcete přidat</param>
      <param name="value">Hodnota elementu, který chcete přidat</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>Přidá zadanou chybu modelu do kolekce chyb pro slovník stavů modelu, který je přidružen k zadanému klíči.</summary>
      <param name="key">Klíč</param>
      <param name="exception">Výjimka</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>Přidá zadanou chybovou zprávu do kolekce chyb pro slovník stavů modelu, který je přidružen k zadanému klíči.</summary>
      <param name="key">Klíč</param>
      <param name="errorMessage">Chybová zpráva</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Clear">
      <summary>Odebere všechny položky ze slovníku stavů modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Určuje, zda slovník stavů modelu obsahuje konkrétní hodnotu.</summary>
      <returns>Hodnota true, pokud se položka nachází ve slovníku stavu modelu; jinak hodnota false.</returns>
      <param name="item">Objekt, který má být vyhledán ve slovníku stavů modelu</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.ContainsKey(System.String)">
      <summary>Určuje, zda slovník stavů modelu obsahuje zadaný klíč.</summary>
      <returns>Hodnota true, pokud slovník stavu modelu obsahuje zadaný klíč, jinak hodnota false.</returns>
      <param name="key">Klíč, který má být vyhledán ve slovníku stavů modelu</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState}[],System.Int32)">
      <summary>Zkopíruje elementy slovníku stavů modelu do pole počínaje od zadaného indexu.</summary>
      <param name="array">Pole Pole musí mít indexování s nulovým základem.</param>
      <param name="arrayIndex">Index pole (počítáno od nuly), od kterého začíná kopírování</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Count">
      <summary>Získá počet dvojic klíč/hodnota v kolekci.</summary>
      <returns>Počet dvojic klíč/hodnota v kolekci</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.GetEnumerator">
      <summary>Vrátí enumerátor, který lze použít pro iteraci prostřednictvím kolekce.</summary>
      <returns>Enumerátor, který lze použít pro iteraci prostřednictvím kolekce</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsReadOnly">
      <summary>Získá hodnotu, která určuje, zda je kolekce určena jen pro čtení.</summary>
      <returns>Hodnota true, pokud je kolekce určena jen pro čtení, jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsValid">
      <summary>Získá hodnotu, která označuje, zda je tato instance slovníku stavů modelu platná.</summary>
      <returns>Hodnota true, pokud je tato instance platná, jinak hodnota false.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.IsValidField(System.String)">
      <summary>Určuje, zda existují objekty <see cref="T:System.Web.Http.ModelBinding.ModelError" />, které jsou přidruženy k zadanému klíči nebo tvoří jeho předponu.</summary>
      <returns>Hodnota true, pokud slovník stavu modelu obsahuje hodnotu přidruženou k zadanému klíči, jinak hodnota false.</returns>
      <param name="key">Klíč</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Item(System.String)">
      <summary>Získá nebo nastaví hodnotu, která je přidružena k zadanému klíči.</summary>
      <returns>Položka stavu modelu</returns>
      <param name="key">Klíč</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Keys">
      <summary>Získá kolekci obsahující klíče ve slovníku.</summary>
      <returns>Kolekce, která obsahuje klíče slovníku stavů modelu</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Merge(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>Zkopíruje hodnoty ze zadaného objektu <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> do tohoto slovníku a přepíše přitom existující hodnoty, pokud se klíče shodují.</summary>
      <param name="dictionary">Slovník</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>Odebere ze slovníku stavů modelu první výskyt zadaného objektu.</summary>
      <returns>Hodnota true, pokud byla položka úspěšně odebrána ze slovníku stavu modelu, jinak hodnota false. Tato metoda vrátí hodnotu false také v případě, že položku nelze ve slovníku stavu modelu nalézt.</returns>
      <param name="item">Objekt, který má být odebrán ze slovníku stavů modelu</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.String)">
      <summary>Odebere ze slovníku stavů modelu element se zadaným klíčem.</summary>
      <returns>Hodnota true, pokud byl element úspěšně odebrán, jinak hodnota false. Tato metoda vrátí hodnotu false také v případě, že klíč nelze ve slovníku stavu modelu nalézt.</returns>
      <param name="key">Klíč elementu, který chcete odebrat</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.SetModelValue(System.String,System.Web.Http.ValueProviders.ValueProviderResult)">
      <summary>Nastaví hodnotu zadaného klíče pomocí zadaného slovníku zprostředkovatele hodnoty.</summary>
      <param name="key">Klíč</param>
      <param name="value">Hodnota</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Vrací enumerátor procházející kolekci.</summary>
      <returns>Objekt IEnumerator, který lze použít k procházení kolekce</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.TryGetValue(System.String,System.Web.Http.ModelBinding.ModelState@)">
      <summary>Pokusí se získat hodnotu, která je přidružena k zadanému klíči.</summary>
      <returns>Hodnota true, pokud objekt obsahuje element se zadaným klíčem; jinak hodnota. false</returns>
      <param name="key">Klíč hodnoty, kterou chcete získat</param>
      <param name="value">Hodnota přidružená k zadanému klíči</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Values">
      <summary>Získá kolekci obsahující hodnoty ve slovníku.</summary>
      <returns>Kolekce, která obsahuje hodnoty slovníku stavů modelu</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection">
      <summary> Kolekce funkcí, které mohou vytvořit vazbu parametru pro daný parametr.    </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Add(System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> Přidá funkci na konec kolekce.  Přidaná funkce představuje obálku kolem položky, která kontroluje, zda položka parameterType odpovídá položce typeMatch. </summary>
      <param name="typeMatch">Typ k porovnání s položkou HttpParameterDescriptor.ParameterType</param>
      <param name="funcInner">Vnitřní funkce, která je volána, pokud porovnávání typů proběhne úspěšně</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Insert(System.Int32,System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> Vloží funkci k zadanému indexu v kolekci. /// Přidaná funkce představuje obálku kolem položky, která kontroluje, zda položka parameterType odpovídá položce typeMatch. </summary>
      <param name="index">Index, ke kterému má být provedeno vložení.</param>
      <param name="typeMatch">Typ k porovnání s položkou HttpParameterDescriptor.ParameterType</param>
      <param name="funcInner">Vnitřní funkce, která je volána, pokud porovnávání typů proběhne úspěšně</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.LookupBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> Spouštějte popořadě jednotlivé funkce, dokud jedna z nich nevrátí vazbu s jinou hodnotou než Null.  </summary>
      <returns>První vazba s jinou hodnotou než Null vrácená pro tento parametr. Hodnota Null, není-li vrácena žádná vazba.</returns>
      <param name="parameter">Parametr k vytvoření vazby.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1">
      <summary>Mapuje žádost prohlížeče na pole.</summary>
      <typeparam name="TElement">Typ pole</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Určuje, zda je model vázaný.</summary>
      <returns>Hodnota true, pokud je daný model vázaný, jinak hodnota false.</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>Převede kolekci na pole.</summary>
      <returns>Hodnota true ve všech případech</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby.</param>
      <param name="newCollection">Nová kolekce</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider">
      <summary>Poskytuje vazač modelu pro pole.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Vrací vazač modelu pro pole.</summary>
      <returns>Objekt vazače modelu nebo hodnota Null, pokud je získání vazače modelu neúspěšné</returns>
      <param name="configuration">Konfigurace</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1">
      <summary>Mapuje žádost prohlížeče na kolekci.</summary>
      <typeparam name="TElement">Typ kolekce</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Vytvoří vazbu modelu pomocí zadaného kontextu spuštění a kontextu vazby.</summary>
      <returns>Hodnota true, pokud je vazba modelu úspěšná, v opačném případě hodnota false</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>Poskytuje způsob, jakým mohou odvozené třídy manipulovat s kolekcí před jejím vrácením z vazače.</summary>
      <returns>Hodnota true ve všech případech</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
      <param name="newCollection">Nová kolekce</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider">
      <summary>Poskytuje vazač modelu pro kolekci.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Načte vazač modelu pro kolekci.</summary>
      <returns>Vazač modelu</returns>
      <param name="configuration">Konfigurace modelu</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto">
      <summary>Představuje objekt pro přenos dat (DTO) pro komplexní model.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDto.#ctor(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Metadata.ModelMetadata})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <param name="modelMetadata">Metadata modelu</param>
      <param name="propertyMetadata">Kolekce metadat vlastností.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.ModelMetadata">
      <summary>Získá nebo nastaví metadata modelu objektu <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Metadata modelu objektu <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.PropertyMetadata">
      <summary>Získá nebo nastaví kolekci metadat vlastností objektu <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Kolekce metadat vlastností objektu <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.Results">
      <summary>Získá nebo nastaví výsledky objektu <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
      <returns>Výsledky objektu <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder">
      <summary>Představuje vazač modelu pro objekt <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Určuje, zda je daný model vázaný.</summary>
      <returns>Hodnota true, pokud je daný model vázaný, jinak hodnota false.</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider">
      <summary>Představuje komplexní model, který volá zprostředkovatele vazače modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Načte přidružený vazač modelu.</summary>
      <returns>Vazač modelu</returns>
      <param name="configuration">Konfigurace</param>
      <param name="modelType">Typ modelu, který se má načíst.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult">
      <summary>Představuje výsledek pro objekt <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.#ctor(System.Object,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult" />.</summary>
      <param name="model">Objekt modelu.</param>
      <param name="validationNode">Ověřovací uzel</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.Model">
      <summary>Získá nebo nastaví obsah pro tento objekt.</summary>
      <returns>Model pro tento objekt.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.ValidationNode">
      <summary>Získá nebo nastaví třídu <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> pro tento objekt.</summary>
      <returns>Třída <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> pro tento objekt.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder">
      <summary>Představuje rozhraní <see cref="T:System.Web.Http.ModelBinding.IModelBinder" />, které provede delegaci pro jednu instanci z kolekce instancí <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" />.</summary>
      <param name="binders">Výčet vazačů</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Web.Http.ModelBinding.IModelBinder[])">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" />.</summary>
      <param name="binders">Pole vazačů</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Určuje, zda je daný model vázaný.</summary>
      <returns>Hodnota true, pokud je model vázaný, jinak hodnota false.</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider">
      <summary>Reprezentuje třídu pro zprostředkovatele vazačů kompozitních modelů.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.ModelBinderProvider})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" />.</summary>
      <param name="providers">Kolekce tříd <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /></param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Získá vazač pro model.</summary>
      <returns>Vazač modelu</returns>
      <param name="configuration">Konfigurace vazače</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.Providers">
      <summary>Získá zprostředkovatele vazačů kompozitních modelů.</summary>
      <returns>Kolekce zprostředkovatelů</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2">
      <summary>Mapuje žádost prohlížeče na datový objekt slovníku.</summary>
      <typeparam name="TKey">Typ klíče</typeparam>
      <typeparam name="TValue">Typ hodnoty</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Převede kolekci na slovník.</summary>
      <returns>Hodnota true ve všech případech</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
      <param name="newCollection">Nová kolekce</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider">
      <summary>Poskytuje vazač modelu pro slovník.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Načte přidružený vazač modelu.</summary>
      <returns>Přidružený vazač modelu</returns>
      <param name="configuration">Konfigurace, jež se má použít.</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2">
      <summary>Mapuje žádost prohlížeče na datový objekt dvojice klíč/hodnota.</summary>
      <typeparam name="TKey">Typ klíče</typeparam>
      <typeparam name="TValue">Typ hodnoty</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Vytvoří vazbu modelu pomocí zadaného kontextu spuštění a kontextu vazby.</summary>
      <returns>Hodnota true, pokud je vazba modelu úspěšná, v opačném případě hodnota false</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider">
      <summary>Poskytuje vazač modelu pro kolekci dvojic klíč/hodnota.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Načte přidružený vazač modelu.</summary>
      <returns>Přidružený vazač modelu</returns>
      <param name="configuration">Konfigurace</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder">
      <summary>Mapuje žádost prohlížeče na měnitelný datový objekt.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Vytvoří vazbu modelu pomocí zadaného kontextu akce a kontextu vazby.</summary>
      <returns>Hodnota true, pokud byla vazba úspěšná, jinak hodnota false.</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CanUpdateProperty(System.Web.Http.Metadata.ModelMetadata)">
      <summary>Načte hodnotu, která označuje, zda lze vlastnost aktualizovat.</summary>
      <returns>Hodnota true, pokud lze vlastnost aktualizovat; jinak hodnota false.</returns>
      <param name="propertyMetadata">Metadata vyhodnocované vlastnosti.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CreateModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Vytvoří instanci modelu.</summary>
      <returns>Nově vytvořený objekt modelu.</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.EnsureModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Vytvoří instanci modelu, pokud v kontextu vazby ještě neexistuje žádná instance.</summary>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.GetMetadataForProperties(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Načte metadata pro vlastnosti modelu.</summary>
      <returns>Metadata pro vlastnosti modelu.</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.SetProperty(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Web.Http.Metadata.ModelMetadata,System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult,System.Web.Http.Validation.ModelValidator)">
      <summary>Nastaví hodnotu zadané vlastnosti</summary>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
      <param name="propertyMetadata">Metadata pro vlastnost, která má být nastavena.</param>
      <param name="dtoResult">Informace o ověření dané vlastnosti.</param>
      <param name="requiredValidator">Validátor pro model.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider">
      <summary>Poskytuje vazač modelu pro měnitelné objekty.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Načte vazač modelu pro zadaný typ.</summary>
      <returns>Vazač modelu</returns>
      <param name="configuration">Konfigurace</param>
      <param name="modelType">Typ modelu, který se má načíst.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider">
      <summary>Poskytuje jednoduchý vazač modelu pro tuto třídu vazby modelu.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Func{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" />.</summary>
      <param name="modelType">Typ modelu</param>
      <param name="modelBinderFactory">Objekt pro vytváření vazače modelu</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" /> pomocí zadaného typu modelu a vazače modelu.</summary>
      <param name="modelType">Typ modelu</param>
      <param name="modelBinder">Vazač modelu</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Vrátí vazač modelu na základě zadaného kontextu provádění a kontextu vazby.</summary>
      <returns>Vazač modelu nebo hodnota Null, pokud je získání vazače modelu neúspěšné</returns>
      <param name="configuration">Konfigurace</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.ModelType">
      <summary>Získá typ modelu.</summary>
      <returns>Typ modelu</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.SuppressPrefixCheck">
      <summary>Získá nebo nastaví hodnotu, která určuje, zda má být potlačena kontrola předpon.</summary>
      <returns>Hodnota true, pokud má být kontrola předpon potlačena, v opačném případě hodnota false</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder">
      <summary>Mapuje žádost prohlížeče na datový objekt. Tento typ se používá, pokud vazba modelu vyžaduje převod pomocí převaděče typů rozhraní .NET Framework.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Vytvoří vazbu modelu pomocí zadaného kontextu kontroleru a kontextu vazby.</summary>
      <returns>Hodnota true, pokud je vazba modelu úspěšná, v opačném případě hodnota false</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider">
      <summary>Poskytuje vazač modelu pro model, který vyžaduje převod typů.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Načte vazač modelu pro model, který vyžaduje převod typů.</summary>
      <returns>Vazač modelu nebo hodnota nothing, pokud typ nelze převést nebo neexistuje převáděná hodnota</returns>
      <param name="configuration">Konfigurace vazače</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder">
      <summary>Mapuje žádost prohlížeče na datový objekt. Tato třída se používá, pokud vazba modelu nevyžaduje převod typů.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>Vytvoří vazbu modelu pomocí zadaného kontextu spuštění a kontextu vazby.</summary>
      <returns>Hodnota true, pokud je vazba modelu úspěšná, v opačném případě hodnota false</returns>
      <param name="actionContext">Kontext akce</param>
      <param name="bindingContext">Kontext vazby</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider">
      <summary>Poskytuje vazač modelu pro model, který nevyžaduje převod typů.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>Načte přidružený vazač modelu.</summary>
      <returns>Přidružený vazač modelu</returns>
      <param name="configuration">Konfigurace</param>
      <param name="modelType">Typ modelu</param>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestErrorMessageResult">
      <summary>Reprezentuje výsledek akce, který vrátí odpověď <see cref="F:System.Net.HttpStatusCode.BadRequest" /> a provede vyjednávání obsahu v objektu <see cref="T:System.Web.Http.HttpError" /> na základě <see cref="P:System.Web.Http.HttpError.Message" />. </summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" />.</summary>
      <param name="message">Chybová zpráva zobrazovaná uživateli.</param>
      <param name="contentNegotiator">Vyjednavač obsahu pro zpracování vyjednávání obsahu.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
      <param name="formatters">Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" />. </summary>
      <param name="message">Chybová zpráva zobrazovaná uživateli.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.ContentNegotiator">
      <summary>Získá vyjednavače obsahu pro zpracování vyjednávání obsahu.</summary>
      <returns>Vrací objekt <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Vrací objekt <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Formatters">
      <summary>Získá formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</summary>
      <returns>Vrací objekt <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Message">
      <summary>Získá chybovou zprávu zobrazovanou uživateli.</summary>
      <returns>Vrací objekt <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Vrací objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestResult">
      <summary>Reprezentuje výsledek akce, který vrátí prázdnou odpověď <see cref="F:System.Net.HttpStatusCode.BadRequest" />.</summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.BadRequestResult" />.</summary>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.BadRequestResult" />.</summary>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Asynchronně zpracuje požadavek.</summary>
      <returns>Úloha, která dokončí operaci zpracování.</returns>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Zpráva požadavku, která vedla k těmto výsledkům.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ConflictResult">
      <summary>Reprezentuje výsledek akce, který vrátí prázdnou HttpStatusCode.Conflict odpověď.</summary>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.ConflictResult" />.</summary>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.ConflictResult" />.</summary>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Asynchronně provede operaci výsledku konfliktu.</summary>
      <returns>Asynchronně provede zadanou úlohu.</returns>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="P:System.Web.Http.Results.ConflictResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Zpráva požadavku HTTP, která vedla k těmto výsledkům.</returns>
    </member>
    <member name="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1">
      <summary>Reprezentuje výsledek akce, který provede generování trasy a vyjednávání obsahu a vrátí odpověď <see cref="F:System.Net.HttpStatusCode.Created" />, pokud vyjednávání obsahu proběhne úspěšně.</summary>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="routeName">Název trasy, která má být použita ke generování adresy URL.</param>
      <param name="routeValues">Data trasy, která se mají použít ke generování adresy URL.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.Routing.UrlHelper,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="routeName">Název trasy, která má být použita ke generování adresy URL.</param>
      <param name="routeValues">Data trasy, která se mají použít ke generování adresy URL.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <param name="urlFactory">Objekt factory, který má být použit ke generování adresy URL trasy.</param>
      <param name="contentNegotiator">Vyjednavač obsahu pro zpracování vyjednávání obsahu.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
      <param name="formatters">Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Content">
      <summary>Získá hodnotu obsahu, která má být vyjednána a naformátována v obsahu entity.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ContentNegotiator">
      <summary>Získá vyjednavače obsahu pro zpracování vyjednávání obsahu.</summary>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Formatters">
      <summary>Získá formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteName">
      <summary>Získá název trasy, která má být použita ke generování adresy URL.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteValues">
      <summary>Získá data trasy, která se mají použít ke generování adresy URL.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.UrlFactory">
      <summary>Získá objekt factory, který má být použit ke generování adresy URL trasy.</summary>
    </member>
    <member name="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1">
      <summary>Reprezentuje výsledek akce, který provede vyjednávání obsahu a vrátí odpověď <see cref="F:System.Net.HttpStatusCode.Created" />, pokud operace proběhne úspěšně.</summary>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="location">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <param name="content">Umístění, v němž byl obsah vytvořen.</param>
      <param name="contentNegotiator">Vyjednavač obsahu pro zpracování vyjednávání obsahu.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
      <param name="formatters">Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="location">Umístění, v němž byl obsah vytvořen.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Content">
      <summary>Získá hodnotu obsahu, která má být vyjednána a naformátována v obsahu entity.</summary>
      <returns>Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ContentNegotiator">
      <summary>Získá vyjednavače obsahu pro zpracování vyjednávání obsahu.</summary>
      <returns>Vyjednavač obsahu pro zpracování vyjednávání obsahu.</returns>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Asynchronně provede operaci vytvořeného výsledku vyjednaného obsahu.</summary>
      <returns>Asynchronně zpracuje návratovou hodnotu.</returns>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Formatters">
      <summary>Získá formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</summary>
      <returns>Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Location">
      <summary>Získá umístění, v němž byl obsah vytvořen.</summary>
      <returns>Umístění, v němž byl obsah vytvořen.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Zpráva požadavku HTTP, která vedla k těmto výsledkům.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ExceptionResult">
      <summary>Reprezentuje výsledek akce, který vrátí odpověď <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> a provede vyjednávání obsahu v objektu <see cref="T:System.Web.Http.HttpError" /> na základě <see cref="P:System.Web.Http.Results.ExceptionResult.Exception" />. </summary>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.ExceptionResult" />.</summary>
      <param name="exception">Výjimka, která má být zahrnuta v chybě.</param>
      <param name="includeErrorDetail">Hodnota true, pokud má chyba zahrnout zprávy výjimek; jinak hodnota false. </param>
      <param name="contentNegotiator">Vyjednavač obsahu pro zpracování vyjednávání obsahu.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
      <param name="formatters">Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</param>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.ExceptionResult" />. </summary>
      <param name="exception">Výjimka, která má být zahrnuta v chybě.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.ContentNegotiator">
      <summary>Získá vyjednavače obsahu pro zpracování vyjednávání obsahu.</summary>
      <returns>Vrací objekt <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Exception">
      <summary>Získá výjimku, která má být zahrnuta v chybě.</summary>
      <returns>Vrací objekt <see cref="T:System.Exception" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Vrací objekt <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Formatters">
      <summary>Získá formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</summary>
      <returns>Vrací objekt <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.IncludeErrorDetail">
      <summary>Získá hodnotu, která určuje, zda chyba má zahrnovat zprávy výjimek.</summary>
      <returns>Vrací objekt <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Vrací objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.FormattedContentResult`1">
      <summary>Reprezentuje výsledek akce, který vrátí formátovaný obsah.</summary>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="content">Hodnota obsahu, která má být naformátována v obsahu entity.</param>
      <param name="formatter">Formátování, které bude použito k naformátování obsahu.</param>
      <param name="mediaType">Hodnota hlavičky Content-Type nebo <see cref="null" /> pro výběr výchozí hodnoty formátovacím modulem.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="content">Hodnota obsahu, která má být naformátována v obsahu entity.</param>
      <param name="formatter">Formátování, které bude použito k naformátování obsahu.</param>
      <param name="mediaType">Hodnota hlavičky Content-Type nebo <see cref="null" /> pro výběr výchozí hodnoty formátovacím modulem.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Content">
      <summary>Získá hodnotu obsahu, která má být formátována v obsahu entity.</summary>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Formatter">
      <summary>Získá formátovací modul, který bude použit k formátování obsahu.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.MediaType">
      <summary>Získá hodnotu hlavičky Content-Type nebo <see cref="null" /> pro výběr výchozí hodnoty formátovacím modulem.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.StatusCode">
      <summary>Získá stavový kód HTTP pro zprávu odpovědi.</summary>
    </member>
    <member name="T:System.Web.Http.Results.InternalServerErrorResult">
      <summary>Reprezentuje výsledek akce, který vrátí prázdnou odpověď <see cref="F:System.Net.HttpStatusCode.InternalServerError" />.</summary>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />. </summary>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />. </summary>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Vrací objekt <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InternalServerErrorResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Vrací objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.InvalidModelStateResult">
      <summary>Reprezentuje výsledek akce, který vrátí odpověď <see cref="F:System.Net.HttpStatusCode.BadRequest" /> a provede vyjednávání obsahu v objektu <see cref="T:System.Web.Http.HttpError" /> na základě <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />.</summary>
      <param name="modelState">Stav modelu, který má být zahrnut v chybě</param>
      <param name="includeErrorDetail">Hodnota true, pokud má chyba zahrnout zprávy výjimek; jinak hodnota false.</param>
      <param name="contentNegotiator">Vyjednavač obsahu pro zpracování vyjednávání obsahu.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
      <param name="formatters">Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</param>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />.</summary>
      <param name="modelState">Stav modelu, který má být zahrnut v chybě</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ContentNegotiator">
      <summary>Získá vyjednavače obsahu pro zpracování vyjednávání obsahu.</summary>
      <returns>Vyjednavač obsahu pro zpracování vyjednávání obsahu.</returns>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Vytvoří zprávu odpovědi asynchronně.</summary>
      <returns>Úloha, která po dokončení obsahuje zprávu odpovědi.</returns>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Formatters">
      <summary>Získá formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</summary>
      <returns>Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.IncludeErrorDetail">
      <summary>Získá hodnotu, která určuje, zda chyba má zahrnovat zprávy výjimek.</summary>
      <returns>Hodnota true, pokud má chyba zahrnout zprávy výjimek; jinak hodnota false.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ModelState">
      <summary>Získá stav modelu, který má být zahrnut v chybě.</summary>
      <returns>Stav modelu, který má být zahrnut v chybě</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Zpráva požadavku, která vedla k těmto výsledkům.</returns>
    </member>
    <member name="T:System.Web.Http.Results.JsonResult`1">
      <summary>Reprezentuje výsledek akce, který vrátí odpověď <see cref="F:System.Net.HttpStatusCode.OK" /> s daty JSON.</summary>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.JsonResult`1" /> se zadanými hodnotami.</summary>
      <param name="content">Hodnota obsahu, která má být serializována v obsahu entity.</param>
      <param name="serializerSettings">Nastavení serializátoru.</param>
      <param name="encoding">Kódování obsahu</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.JsonResult`1" /> se zadanými hodnotami.</summary>
      <param name="content">Hodnota obsahu, která má být serializována v obsahu entity.</param>
      <param name="serializerSettings">Nastavení serializátoru.</param>
      <param name="encoding">Kódování obsahu</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Content">
      <summary>Získá hodnotu obsahu, která má být serializována v obsahu entity.</summary>
      <returns>Hodnota obsahu, která má být serializována v obsahu entity.</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Encoding">
      <summary>Získá kódování obsahu.</summary>
      <returns>Kódování obsahu</returns>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Vytvoří zprávu odpovědi asynchronně.</summary>
      <returns>Úloha, která po dokončení obsahuje zprávu odpovědi.</returns>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Zpráva požadavku, která vedla k těmto výsledkům.</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.SerializerSettings">
      <summary>Získá nastavení serializátoru.</summary>
      <returns>Nastavení serializátoru.</returns>
    </member>
    <member name="T:System.Web.Http.Results.NegotiatedContentResult`1">
      <summary>Reprezentuje výsledek akce, který provádí vyjednávání obsahu.</summary>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <param name="contentNegotiator">Vyjednavač obsahu pro zpracování vyjednávání obsahu.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
      <param name="formatters">Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</param>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Content">
      <summary>Získá hodnotu obsahu, která má být vyjednána a naformátována v obsahu entity.</summary>
      <returns>Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.ContentNegotiator">
      <summary>Získá vyjednavače obsahu pro zpracování vyjednávání obsahu.</summary>
      <returns>Vyjednavač obsahu pro zpracování vyjednávání obsahu.</returns>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Asynchronně zpracuje výsledky vyjednaného obsahu HTTP.</summary>
      <returns>Asynchronně zpracuje výsledky vyjednaného obsahu HTTP.</returns>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Formatters">
      <summary>Získá formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</summary>
      <returns>Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Zpráva požadavku HTTP, která vedla k těmto výsledkům.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.StatusCode">
      <summary>Získá stavový kód HTTP pro zprávu odpovědi.</summary>
      <returns>Stavový kód HTTP pro zprávu odpovědi.</returns>
    </member>
    <member name="T:System.Web.Http.Results.NotFoundResult">
      <summary>Reprezentuje výsledek akce, který vrátí prázdnou odpověď <see cref="F:System.Net.HttpStatusCode.NotFound" />.</summary>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.NotFoundResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkNegotiatedContentResult`1">
      <summary>Reprezentuje výsledek akce, který provede vyjednávání obsahu a vrátí odpověď HttpStatusCode.OK, pokud operace proběhne úspěšně.</summary>
      <typeparam name="T">Typ obsahu entity.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <param name="contentNegotiator">Vyjednavač obsahu pro zpracování vyjednávání obsahu.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
      <param name="formatters">Formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> se zadanými hodnotami.</summary>
      <param name="content">Hodnota obsahu, která má být vyjednána a naformátována v obsahu entity.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Content">
      <summary>Získá hodnotu obsahu, která má být vyjednána a naformátována v obsahu entity.</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.ContentNegotiator">
      <summary>Získá vyjednavače obsahu pro zpracování vyjednávání obsahu.</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Formatters">
      <summary>Získá formátovací moduly, které budou použity k vyjednávání a naformátování obsahu.</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkResult">
      <summary>Reprezentuje výsledek akce, který vrátí prázdnou HttpStatusCode.OK odpověď.</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.NotFoundResult" />.</summary>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Provádí se asynchronně.</summary>
      <returns>Vrátí úlohu.</returns>
      <param name="cancellationToken">Token zrušení</param>
    </member>
    <member name="P:System.Web.Http.Results.OkResult.Request">
      <summary>Získá zprávu požadavku HTTP pro dané výsledky.</summary>
      <returns>Zpráva požadavku HTTP pro dané výsledky.</returns>
    </member>
    <member name="T:System.Web.Http.Results.RedirectResult">
      <summary>Představuje výsledek akce pro &lt;viz cref="F:System.Net.HttpStatusCode.Redirect"/&gt;.</summary>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.#ctor(System.Uri,System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy &lt;viz cref="T:System.Web.Http.Results.RedirectResult"/&gt; se zadanými hodnotami.</summary>
      <param name="location">Umístění pro přesměrování</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.#ctor(System.Uri,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy &lt;viz cref="T:System.Web.Http.Results.RedirectResult"/&gt; se zadanými hodnotami.</summary>
      <param name="location">Umístění pro přesměrování</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Vrací objekt <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectResult.Location">
      <summary>Získá umístění, v němž byl obsah vytvořen.</summary>
      <returns>Vrací objekt <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Vrací objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.RedirectToRouteResult">
      <summary>Reprezentuje výsledek akce, který provede generování trasy a vrací &lt;viz cref="F:System.Net.HttpStatusCode.Redirect"/&gt;            odpověď.</summary>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy &lt;viz cref="T:System.Web.Http.Results.RedirectToRouteResult"/&gt; se zadanými hodnotami.</summary>
      <param name="routeName">Název trasy, která má být použita ke generování adresy URL.</param>
      <param name="routeValues">Data trasy, která se mají použít ke generování adresy URL.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.UrlHelper,System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy &lt;viz cref="T:System.Web.Http.Results.RedirectToRouteResult"/&gt; se zadanými hodnotami.</summary>
      <param name="routeName">Název trasy, která má být použita ke generování adresy URL.</param>
      <param name="routeValues">Data trasy, která se mají použít ke generování adresy URL.</param>
      <param name="urlFactory">Objekt factory, který má být použit ke generování adresy URL trasy.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Vrací objekt <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Vrací objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.RouteName">
      <summary>Získá název trasy, která má být použita ke generování adresy URL.</summary>
      <returns>Vrací objekt <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.RouteValues">
      <summary>Získá data trasy, která se mají použít ke generování adresy URL.</summary>
      <returns>Vrací objekt <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.UrlFactory">
      <summary>Získá objekt factory, který má být použit ke generování adresy URL trasy.</summary>
      <returns>Vrací objekt <see cref="T:System.Web.Http.Routing.UrlHelper" />.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ResponseMessageResult">
      <summary>Reprezentuje výsledek akce, který vrátí zadanou zprávu odpovědi.</summary>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.ResponseMessageResult" />.</summary>
      <param name="response">Odpověď</param>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.ResponseMessageResult.Response">
      <summary>Získá zprávu odpovědi.</summary>
    </member>
    <member name="T:System.Web.Http.Results.StatusCodeResult">
      <summary>Reprezentuje výsledek akce, který vrátí určený stavový kód HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.StatusCodeResult" />.</summary>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.StatusCodeResult" />.</summary>
      <param name="statusCode">Stavový kód HTTP pro zprávu odpovědi.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>Vytvoří zprávu odpovědi asynchronně.</summary>
      <returns>Úloha, která po dokončení obsahuje zprávu odpovědi.</returns>
      <param name="cancellationToken">Token pro monitorování požadavků na zrušení.</param>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Zpráva požadavku, která vedla k těmto výsledkům.</returns>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.StatusCode">
      <summary>Získá stavový kód HTTP pro zprávu odpovědi.</summary>
      <returns>Stavový kód HTTP pro zprávu odpovědi.</returns>
    </member>
    <member name="T:System.Web.Http.Results.UnauthorizedResult">
      <summary>Reprezentuje výsledek akce, který vrátí odpověď <see cref="F:System.Net.HttpStatusCode.Unauthorized" />. </summary>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.StatusCodeResult" />. </summary>
      <param name="challenges">Výzvy WWW-Authenticate.</param>
      <param name="request">Zpráva požadavku, která vedla k těmto výsledkům.</param>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Web.Http.ApiController)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Results.StatusCodeResult" />. </summary>
      <param name="challenges">Výzvy WWW-Authenticate.</param>
      <param name="controller">Kontroler, z něhož je třeba získat závislosti nutné ke zpracování.</param>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Challenges">
      <summary>Získá výzvy WWW-Authenticate.</summary>
      <returns>Vrací objekt <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>Vrací objekt <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Request">
      <summary>Získá zprávu požadavku, která vedla k těmto výsledkům.</summary>
      <returns>Vrací objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultDirectRouteProvider">
      <summary>Výchozí implementace třídy <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.#ctor"></member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetActionDirectRoutes(System.Web.Http.Controllers.HttpActionDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Routing.IDirectRouteFactory},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Vytvoří instance položky <see cref="T:System.Web.Http.Routing.RouteEntry" /> na základě zadaných objektů factory a akce.Položky cesty poskytují přímé směrování k zadané akci.</summary>
      <returns>Sada položek trasy.</returns>
      <param name="actionDescriptor">Popisovač akce</param>
      <param name="factories">Objekty factory přímé trasy.</param>
      <param name="constraintResolver">Řešitel omezení.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetActionRouteFactories(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>Získá sadu objektů factory trasy pro zadaný popisovač akce.</summary>
      <returns>Sada objektů factory trasy.</returns>
      <param name="actionDescriptor">Popisovač akce</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetControllerDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Collections.Generic.IReadOnlyList{System.Web.Http.Routing.IDirectRouteFactory},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Vytvoří instance položky <see cref="T:System.Web.Http.Routing.RouteEntry" /> na základě zadaných objektů factory, kontroleru a akcí.Položky trasy poskytují přímé směrování k zadanému kontroleru a mohou dosáhnout sady zadaných akcí.</summary>
      <returns>Sada položek trasy.</returns>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
      <param name="actionDescriptors">Popisovače akce.</param>
      <param name="factories">Objekty factory přímé trasy.</param>
      <param name="constraintResolver">Řešitel omezení.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetControllerRouteFactories(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Získá objekty factory trasy pro zadaný popisovač kontroleru.</summary>
      <returns>Sada objektů factory trasy.</returns>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Získá přímé trasy pro zadaný popisovač kontroleru a popisovače akce na základě atributů objektu <see cref="T:System.Web.Http.Routing.IDirectRouteFactory" />.</summary>
      <returns>Sada položek trasy.</returns>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
      <param name="actionDescriptors">Popisovače akce pro všechny akce.</param>
      <param name="constraintResolver">Řešitel omezení.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetRoutePrefix(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>Získá předponu trasy ze zadaného kontroleru.</summary>
      <returns>Předpona trasy nebo hodnota null.</returns>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultInlineConstraintResolver">
      <summary>Výchozí implementace třídy <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" />.Vyřeší omezení analýzou klíče a argumentů omezení, s využitím mapy pro vyřešení typu omezení a voláním příslušného konstruktoru pro daný typ omezení.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.DefaultInlineConstraintResolver" />.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.DefaultInlineConstraintResolver.ConstraintMap">
      <summary> Získá měnitelný slovník, který mapuje klíče omezení na konkrétní typ omezení. </summary>
      <returns>Měnitelný slovník, který mapuje klíče omezení na konkrétní typ omezení.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary>Vyřeší vložené omezení.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />, který je výsledkem vyřešení vloženého omezení.</returns>
      <param name="inlineConstraint">Vložené omezení k vyřešení.</param>
    </member>
    <member name="T:System.Web.Http.Routing.DirectRouteFactoryContext">
      <summary>Představuje kontext, který podporuje vytvoření přímé trasy.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver,System.Boolean)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.DirectRouteFactoryContext" />.</summary>
      <param name="prefix">Předpona trasy, pokud existuje, definovaná kontrolerem.</param>
      <param name="actions">Popisovače akcí, pro které má být vytvořena trasa.</param>
      <param name="inlineConstraintResolver">Řešitel vloženého omezení.</param>
      <param name="targetIsAction">Hodnota určující, zda je trasa nakonfigurována na úrovni akce nebo kontroleru.</param>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.Actions">
      <summary>Získá popisovače akcí, pro které má být vytvořena trasa.</summary>
      <returns>Popisovače akcí, pro které má být vytvořena trasa.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.CreateBuilder(System.String)">
      <summary>Vytvoří tvůrce trasy, který může vytvořit trasu odpovídající tomuto kontextu.</summary>
      <returns>Tvůrce trasy, který může vytvořit trasu odpovídající tomuto kontextu.</returns>
      <param name="template">Šablona trasy.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.CreateBuilder(System.String,System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Vytvoří tvůrce trasy, který může vytvořit trasu odpovídající tomuto kontextu.</summary>
      <returns>Tvůrce trasy, který může vytvořit trasu odpovídající tomuto kontextu.</returns>
      <param name="template">Šablona trasy.</param>
      <param name="constraintResolver">Řešitel vloženého omezení, pokud existuje; jinak hodnota null.</param>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.InlineConstraintResolver">
      <summary>Získá řešitele vloženého omezení.</summary>
      <returns>Řešitel vloženého omezení.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.Prefix">
      <summary>Získá předponu trasy, pokud existuje, definovanou kontrolerem.</summary>
      <returns>Předpona trasy, pokud existuje, definovaná kontrolerem.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.TargetIsAction">
      <summary>Získá hodnotu určující, zda je trasa nakonfigurována na úrovni akce nebo kontroleru.</summary>
      <returns>Hodnota true, pokud je trasa nakonfigurována na úrovni akce; jinak hodnota false (tzn. pokud je trasa nakonfigurována na úrovni kontroleru).</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpMethodConstraint">
      <summary>Umožňuje definovat, které příkazy HTTP jsou povoleny, pokud směrování ASP.NET určuje, zda se adresa URL shoduje s trasou.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.#ctor(System.Net.Http.HttpMethod[])">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpMethodConstraint" /> pomocí příkazů HTTP, které jsou pro trasu povoleny.</summary>
      <param name="allowedMethods">Příkazy HTTP, které jsou pro trasu platné</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpMethodConstraint.AllowedMethods">
      <summary>Získá nebo nastaví kolekci povolených příkazů HTTP trasy.</summary>
      <returns>Kolekce povolených příkazů HTTP trasy</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určuje, zda byla žádost učiněna pomocí příkazu HTTP, který je jedním z povolených příkazů trasy.</summary>
      <returns>Hodnota true, pokud směrování ASP.NET zpracovává žádost, která byla učiněna pomocí povoleného příkazu HTTP, v opačném případě hodnota false Hodnota true, pokud směrování ASP.NET generuje adresu URL a zadané hodnoty obsahují příkaz HTTP, který se shoduje s jedním z povolených příkazů HTTP, v opačném případě hodnota false Výchozí hodnota je true.</returns>
      <param name="request">Žádost, u které se kontroluje shoda s adresou URL</param>
      <param name="route">Objekt, u kterého se kontroluje shoda s adresou URL</param>
      <param name="parameterName">Název kontrolovaného parametru</param>
      <param name="values">Objekt obsahující parametry trasy</param>
      <param name="routeDirection">Objekt, který označuje, zda je při zpracování příchozí žádosti nebo generování adresy URL prováděna kontrola omezení.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.System#Web#Http#Routing#IHttpRouteConstraint#Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určuje, zda byla žádost učiněna pomocí příkazu HTTP, který je jedním z povolených příkazů trasy.</summary>
      <returns>Hodnota true, pokud směrování ASP.NET zpracovává žádost, která byla učiněna pomocí povoleného příkazu HTTP, v opačném případě hodnota false Hodnota true, pokud směrování ASP.NET generuje adresu URL a zadané hodnoty obsahují příkaz HTTP, který se shoduje s jedním z povolených příkazů HTTP, v opačném případě hodnota false Výchozí hodnota je true.</returns>
      <param name="request">Žádost, u které se kontroluje shoda s adresou URL</param>
      <param name="route">Objekt, u kterého se kontroluje shoda s adresou URL</param>
      <param name="parameterName">Název kontrolovaného parametru</param>
      <param name="values">Objekt obsahující parametry trasy</param>
      <param name="routeDirection">Objekt, který označuje, zda je při zpracování příchozí žádosti nebo generování adresy URL prováděna kontrola omezení.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRoute">
      <summary>Představuje třídu trasy hostování na vlastním serveru (tj.hostování mimo prostředí ASP.NET).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Šablona trasy.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Šablona trasy.</param>
      <param name="defaults">Výchozí hodnoty parametrů trasy.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Šablona trasy.</param>
      <param name="defaults">Výchozí hodnoty parametrů trasy.</param>
      <param name="constraints">Omezení pro parametry trasy.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Šablona trasy.</param>
      <param name="defaults">Výchozí hodnoty parametrů trasy.</param>
      <param name="constraints">Omezení pro parametry trasy.</param>
      <param name="dataTokens">Případné další tokeny pro parametry trasy.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Net.Http.HttpMessageHandler)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <param name="routeTemplate">Šablona trasy.</param>
      <param name="defaults">Výchozí hodnoty parametrů trasy.</param>
      <param name="constraints">Omezení pro parametry trasy.</param>
      <param name="dataTokens">Případné další tokeny pro parametry trasy.</param>
      <param name="handler">Popisovač zpráv, který bude příjemcem požadavku.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Constraints">
      <summary>Získá omezení pro parametry trasy.</summary>
      <returns>Omezení pro parametry trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.DataTokens">
      <summary>Získá všechny další datové tokeny, jež nejsou přímo používány k určení, zda trasa odpovídá příchozímu objektu <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Všechny další datové tokeny, jež nejsou přímo používány k určení toho, zda trasa odpovídá příchozímu objektu <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Defaults">
      <summary>Získá výchozí hodnoty pro parametry trasy, pokud je neposkytuje příchozí objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Výchozí hodnoty pro parametry trasy, pokud je neposkytuje příchozí objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary>Vyhledáním objektu <see cref="T:System.Web.Http.Routing.HttpRouteData" /> pro tuto trasu určí, zda daná trasa odpovídá příchozímu požadavku.</summary>
      <returns>Objekt <see cref="T:System.Web.Http.Routing.HttpRouteData" /> pro trasu, pokud odpovídá; jinak hodnota Null.</returns>
      <param name="virtualPathRoot">Kořenový adresář virtuální cesty</param>
      <param name="request">Žádost HTTP</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Pokusí se vygenerovat identifikátor URI, který zastupuje hodnoty předané na základě aktuálních hodnot z objektu <see cref="T:System.Web.Http.Routing.HttpRouteData" /> a nových hodnot, pomocí zadaného objektu <see cref="T:System.Web.Http.Routing.HttpRoute" />.</summary>
      <returns>Instance <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" />, nebo hodnota null, pokud identifikátor URI nelze vygenerovat.</returns>
      <param name="request">Zpráva s požadavkem HTTP</param>
      <param name="values">Hodnoty trasy</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Handler">
      <summary>Získá nebo nastaví obslužnou rutinu trasy HTTP.</summary>
      <returns>Obslužná rutina trasy HTTP.</returns>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRoute.HttpRouteKey">
      <summary>Určuje klíč trasy HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.ProcessConstraint(System.Net.Http.HttpRequestMessage,System.Object,System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost HTTP</param>
      <param name="constraint">Omezení pro parametry trasy.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Jedna z výčtových hodnot výčtu <see cref="System.Web.Http.Routing.HttpRouteDirection" />.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.RouteTemplate">
      <summary>Získá šablonu trasy popisující odpovídající vzor identifikátoru URI.</summary>
      <returns>Šablona trasy popisující odpovídající vzor identifikátoru URI.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteData">
      <summary>Zapouzdřuje informace o trase HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRouteData" />.</summary>
      <param name="route">Objekt definující trasu</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRouteData" />.</summary>
      <param name="route">Objekt definující trasu</param>
      <param name="values">Hodnota</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Route">
      <summary>Získá objekt, který reprezentuje trasu.</summary>
      <returns>objekt, který reprezentuje trasu.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Values">
      <summary>Získá kolekci hodnot parametru URL a výchozích hodnot pro trasu.</summary>
      <returns>Objekt obsahující hodnoty získané analýzou adresy URL a výchozích hodnot.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDataExtensions">
      <summary>Odebere všechny volitelné parametry, které nemají hodnotu z dat trasy.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteDataExtensions.GetSubRoutes(System.Web.Http.Routing.IHttpRouteData)">
      <summary>Je-li trasa ve skutečnosti spojení jiných tras, vrátí podmnožinu dílčích tras.</summary>
      <returns>Vrátí podmnožinu dílčích cest obsažených v této trase.</returns>
      <param name="routeData">Spojení dat směrování</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteDataExtensions.RemoveOptionalRoutingParameters(System.Web.Http.Routing.IHttpRouteData)">
      <summary>Odebere všechny volitelné parametry, které nemají hodnotu z dat trasy.</summary>
      <param name="routeData">Data trasy, která mají být místně měněna.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDirection">
      <summary>Určí výčet směru trasy.</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriGeneration">
      <summary>Směr UriGeneration.</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriResolution">
      <summary>Směr UriResolution.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteValueDictionary">
      <summary>Představuje třídu trasy pro hostování zadaných dvojic klíč/hodnota na vlastním serveru.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
      <param name="dictionary">Slovník</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Object)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" />.</summary>
      <param name="values">Hodnota klíče.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpVirtualPathData">
      <summary>Představuje data související s virtuální cestou HTTP.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpVirtualPathData.#ctor(System.Web.Http.Routing.IHttpRoute,System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" />.</summary>
      <param name="route">Trasa virtuální cesty.</param>
      <param name="virtualPath">Adresa URL vytvořená z definice trasy.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.Route">
      <summary>Získá nebo nastaví trasu virtuální cesty.</summary>
      <returns>Trasa virtuální cesty.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.VirtualPath">
      <summary>Získá nebo nastaví adresu URL vytvořenou z definice trasy.</summary>
      <returns>Adresa URL vytvořená z definice trasy.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteBuilder">
      <summary>Definuje tvůrce, který vytváří přímé trasy k akcím (trasy atributů).</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Actions">
      <summary>Získá popisovače akcí, pro které má být vytvořena trasa.</summary>
      <returns>Popisovače akcí, pro které má být vytvořena trasa.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteBuilder.Build">
      <summary>Vytvoří položku trasy na základě aktuálních hodnot vlastností.</summary>
      <returns>Vytvořená položka trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Constraints">
      <summary>Získá nebo nastaví omezení trasy.</summary>
      <returns>Omezení trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.DataTokens">
      <summary>Získá nebo nastaví tokeny dat trasy.</summary>
      <returns>Tokeny dat trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Defaults">
      <summary>Získá nebo nastaví výchozí hodnoty trasy.</summary>
      <returns>Výchozí nastavení trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Name">
      <summary>Získá nebo nastaví název trasy, pokud existuje; jinak hodnota null.</summary>
      <returns>Název trasy, pokud existuje; jinak hodnota null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Order">
      <summary>Získá nebo nastaví pořadí trasy.</summary>
      <returns>Pořadí trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Precedence">
      <summary>Získá nebo nastaví prioritu trasy.</summary>
      <returns>Priorita trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.TargetIsAction">
      <summary>Získá hodnotu určující, zda je trasa nakonfigurována na úrovni akce nebo kontroleru.</summary>
      <returns>Hodnota true, pokud je trasa nakonfigurována na úrovni akce; jinak hodnota false (tzn. pokud je trasa nakonfigurována na úrovni kontroleru).</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Template">
      <summary>Získá nebo nastaví šablonu trasy.</summary>
      <returns>Šablona trasy.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteFactory">
      <summary>Definuje objekt pro vytváření, který vytváří trasu přímo k sadě popisovačů akcí (trasa atributu).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteFactory.CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)">
      <summary>Vytvoří položku přímé trasy.</summary>
      <returns>Položka přímé trasy.</returns>
      <param name="context">Kontext, který má být použit k vytvoření trasy.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteProvider">
      <summary>Definuje zprostředkovatele pro trasy, jejichž přímým cílem jsou popisovače akcí (trasy atributů).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteProvider.GetDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>Získá přímé trasy pro určitý kontroler.</summary>
      <returns>Sada položek trasy pro kontroler.</returns>
      <param name="controllerDescriptor">Popisovač kontroleru</param>
      <param name="actionDescriptors">Popisovače akce.</param>
      <param name="constraintResolver">Řešitel vloženého omezení.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRoute">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> definuje rozhraní pro trasu vyjadřující způsob mapování příchozího objektu <see cref="T:System.Net.Http.HttpRequestMessage" /> na určitý kontroler a akci. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Constraints">
      <summary> Získá omezení pro parametry trasy. </summary>
      <returns>Omezení pro parametry trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.DataTokens">
      <summary> Získá všechny další datové tokeny, jež nejsou přímo používány k určení, zda trasa odpovídá příchozímu objektu <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Další tokeny dat.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Defaults">
      <summary> Získá výchozí hodnoty pro parametry trasy, pokud je neposkytuje příchozí objekt <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Výchozí hodnoty parametrů trasy.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary> Vyhledáním objektu &lt;see cref="!:IRouteData" /&gt; pro tuto trasu určí, zda daná trasa odpovídá příchozí žádosti. </summary>
      <returns>Objekt &lt;see cref="!:RouteData" /&gt; pro trasu, pokud odpovídá; jinak hodnota null.</returns>
      <param name="virtualPathRoot">Kořenový adresář virtuální cesty</param>
      <param name="request">Žádost</param>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Získá data virtuální cesty na základě trasy a zadaných hodnot.</summary>
      <returns>Data virtuální cesty.</returns>
      <param name="request">Zpráva žádosti</param>
      <param name="values">Hodnoty</param>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Handler">
      <summary>Získá popisovač zpráv, který bude příjemcem požadavku.</summary>
      <returns>Popisovač zpráv.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.RouteTemplate">
      <summary> Získá šablonu trasy popisující odpovídající vzor identifikátoru URI.  </summary>
      <returns>Šablona trasy.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteConstraint">
      <summary>Představuje základní omezení trasy třídy.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteData">
      <summary>Poskytuje informace o trase.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Route">
      <summary>Získá objekt, který reprezentuje trasu.</summary>
      <returns>Objekt, který reprezentuje trasu.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Values">
      <summary>Získá kolekci hodnot parametru URL a výchozích hodnot pro trasu.</summary>
      <returns>Hodnoty, které jsou analyzovány z adresy URL a z výchozích hodnot.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteInfoProvider">
      <summary> Poskytuje informace pro definování trasy. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Name">
      <summary> Získá název trasy k vytvoření. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Order">
      <summary> Získá pořadí trasy relativně k jiným trasám. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Template">
      <summary> Získá šablonu trasy popisující odpovídající vzor identifikátoru URI. </summary>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpVirtualPathData">
      <summary>Definuje vlastnosti pro trasu HTTP.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.Route">
      <summary>Získá trasu HTTP.</summary>
      <returns>Trasa HTTP.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.VirtualPath">
      <summary>Získá identifikátor URI představující virtuální cestu aktuální trasy HTTP.</summary>
      <returns>Identifikátor URI představující virtuální cestu aktuální trasy HTTP.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IInlineConstraintResolver">
      <summary> Definuje abstrakci pro vyřešení vložených omezení ve formě instancí objektu <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.IInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary> Vyřeší vložené omezení. </summary>
      <returns>Objekt <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />, který je výsledkem vyřešení vloženého omezení.</returns>
      <param name="inlineConstraint">Vložené omezení k vyřešení.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IRoutePrefix">
      <summary>Definuje předponu trasy.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IRoutePrefix.Prefix">
      <summary>Získá předponu trasy.</summary>
      <returns>Předpona trasy</returns>
    </member>
    <member name="T:System.Web.Http.Routing.RouteEntry">
      <summary>Představuje pojmenovanou trasu.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.RouteEntry.#ctor(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.RouteEntry" />.</summary>
      <param name="name">Název trasy, pokud existuje; jinak hodnota null.</param>
      <param name="route">Trasa</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteEntry.Name">
      <summary>Získá název trasy, pokud existuje; jinak hodnota null.</summary>
      <returns>Název trasy, pokud existuje; jinak hodnota null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteEntry.Route">
      <summary>Získá trasu.</summary>
      <returns>Trasa</returns>
    </member>
    <member name="T:System.Web.Http.Routing.RouteFactoryAttribute">
      <summary>Představuje atribut trasy, který může obsahovat vlastní omezení.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.RouteFactoryAttribute.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.RouteFactoryAttribute" />.</summary>
      <param name="template">Šablona trasy.</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Constraints">
      <summary>Získá omezení trasy, pokud existují; jinak hodnota null.</summary>
      <returns>Omezení trasy, pokud existují; jinak hodnota null.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.RouteFactoryAttribute.CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)">
      <summary>Vytvoří položku trasy.</summary>
      <returns>Vytvořená položka trasy.</returns>
      <param name="context">Kontext</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.DataTokens">
      <summary>Získá tokeny dat trasy, pokud existují; jinak hodnota null.</summary>
      <returns>Tokeny dat trasy, pokud existují; jinak hodnota null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Defaults">
      <summary>Získá výchozí hodnoty trasy, pokud existují; jinak hodnota null.</summary>
      <returns>Výchozí hodnoty trasy, pokud existují; jinak hodnota null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Name">
      <summary>Získá nebo nastaví název trasy, pokud existuje; jinak hodnota null.</summary>
      <returns>Název trasy, pokud existuje; jinak hodnota null.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Order">
      <summary>Získá nebo nastaví pořadí trasy.</summary>
      <returns>Pořadí trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Template">
      <summary>Získá šablonu trasy.</summary>
      <returns>Šablona trasy.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.StopRoutingHandler">
      <summary>Reprezentuje obslužnou rutinu určující, že směrování by nemělo vyřizovat požadavky pro šablonu trasy.Pokud trasa poskytuje tuto třídu jako obslužnou rutinu, bude požadavky odpovídající trase ignorovány.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.StopRoutingHandler.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.StopRoutingHandler" />.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.UrlHelper">
      <summary>Představuje objekt pro vytváření adres URL. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor">
      <summary> Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.UrlHelper" />. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <param name="request">Požadavek HTTP pro tuto instanci</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Content(System.String)">
      <summary>Vytvoří absolutní adresu URL pomocí zadané cesty.</summary>
      <returns>Vygenerovaná adresa URL.</returns>
      <param name="path">Cesta URL, jíž může být relativní adresa URL, adresa URL od kořene nebo virtuální cesta.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Vrací odkaz pro zadanou trasu.</summary>
      <returns>Odkaz pro zadanou trasu</returns>
      <param name="routeName">Název trasy</param>
      <param name="routeValues">Objekt, který obsahuje parametry trasy</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Object)">
      <summary>Vrací odkaz pro zadanou trasu.</summary>
      <returns>Odkaz pro zadanou trasu</returns>
      <param name="routeName">Název trasy</param>
      <param name="routeValues">Hodnota trasy</param>
    </member>
    <member name="P:System.Web.Http.Routing.UrlHelper.Request">
      <summary>Získá nebo nastaví hodnotu <see cref="T:System.Net.Http.HttpRequestMessage" /> aktuální instance <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <returns>Hodnota <see cref="T:System.Net.Http.HttpRequestMessage" /> aktuální instance</returns>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Vrací trasu pro objekt <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <returns>Trasa pro objekt <see cref="T:System.Web.Http.Routing.UrlHelper" /></returns>
      <param name="routeName">Název trasy</param>
      <param name="routeValues">Seznam hodnot tras</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Object)">
      <summary>Vrací trasu pro objekt <see cref="T:System.Web.Http.Routing.UrlHelper" />.</summary>
      <returns>Trasa pro objekt <see cref="T:System.Web.Http.Routing.UrlHelper" /></returns>
      <param name="routeName">Název trasy</param>
      <param name="routeValues">Hodnoty trasy</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint">
      <summary>Omezí parametr trasy, aby obsahoval pouze malá nebo velká písmena anglické abecedy (A až Z).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.AlphaRouteConstraint.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint" />.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint">
      <summary>Omezí parametr trasy, aby reprezentoval pouze logické hodnoty.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint">
      <summary>Omezuje trasu pomocí několika podřízených omezení.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.#ctor(System.Collections.Generic.IList{System.Web.Http.Routing.IHttpRouteConstraint})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint" />.</summary>
      <param name="constraints">Podřízená omezení musí odpovídat tomuto omezení.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Constraints">
      <summary>Získá podřízená omezení, která musí odpovídat tomuto omezení.</summary>
      <returns>Podřízená omezení musí odpovídat tomuto omezení.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint">
      <summary>Omezí parametr trasy, aby reprezentoval pouze hodnoty <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Trasa směru.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint">
      <summary>Omezí parametr trasy, aby reprezentoval pouze desetinná čísla.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DoubleRouteConstraint">
      <summary>Omezí parametr trasy, aby reprezentoval pouze 64bitové hodnoty s plovoucí desetinnou čárkou.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.FloatRouteConstraint">
      <summary>Omezí parametr trasy, aby reprezentoval pouze 32bitové hodnoty s plovoucí desetinnou čárkou.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint">
      <summary>Omezí parametr trasy, aby reprezentoval pouze hodnoty <see cref="T:System.Guid" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.IntRouteConstraint">
      <summary>Omezí parametr trasy, aby reprezentoval pouze 32bitové celočíselné hodnoty.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.IntRouteConstraint" />.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint">
      <summary>Omezí parametr trasy na řetězec s danou délkou nebo s délkou v daném rozsahu délek.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32,System.Int32)">
      <summary>Inicializuje novou instanci třídy the <see cref="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint" />, která omezuje parametr trasy na řetězec dané délky.</summary>
      <param name="minLength">Minimální délka parametru trasy.</param>
      <param name="maxLength">Maximální délka parametru trasy.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Length">
      <summary>Získá délku parametru trasy, je-li nastavena.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MaxLength">
      <summary>Získá maximální délku parametru trasy, je-li nastavena.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MinLength">
      <summary>Získá minimální délku parametru trasy, je-li nastavena.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LongRouteConstraint">
      <summary>Omezí parametr trasy, aby reprezentoval pouze 64bitové celočíselné hodnoty.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint">
      <summary>Omezí parametr trasy na řetězec s maximální délkou.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.#ctor(System.Int32)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint" />.</summary>
      <param name="maxLength">Maximální délka.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.MaxLength">
      <summary>Získá maximální délku parametru trasy.</summary>
      <returns>Maximální délka parametru trasy.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxRouteConstraint">
      <summary>Omezí parametr trasy na celé číslo s maximální délkou.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.#ctor(System.Int64)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Max">
      <summary>Získá maximální hodnotu parametru trasy.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint">
      <summary>Omezí parametr trasy na řetězec s maximální délkou.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.#ctor(System.Int32)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint" />.</summary>
      <param name="minLength">Minimální délka,</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.MinLength">
      <summary>Získá minimální délku parametru trasy.</summary>
      <returns>Minimální délka parametru trasy.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinRouteConstraint">
      <summary>Omezí parametr trasy na typ long s minimální hodnotou.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.#ctor(System.Int64)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.MinRouteConstraint" />.</summary>
      <param name="min">Minimální hodnota parametru trasy.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinRouteConstraint.Min">
      <summary>Získá minimální hodnotu parametru trasy.</summary>
      <returns>Minimální hodnota parametru trasy.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint">
      <summary>Omezuje trasu pomocí vnitřního omezení, které neselže, je-li volitelný parametr nastaven na jeho výchozí hodnotu.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.#ctor(System.Web.Http.Routing.IHttpRouteConstraint)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint" />.</summary>
      <param name="innerConstraint">Vnitřní omezení, které musí být splněno, pokud parametr není volitelným parametrem bez hodnoty.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.InnerConstraint">
      <summary>Získá vnitřní omezení, které musí být splněno, pokud parametr není volitelným parametrem bez hodnoty.</summary>
      <returns>Vnitřní omezení, které musí být splněno, pokud parametr není volitelným parametrem bez hodnoty.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint">
      <summary>Omezí parametr trasy na celé číslo v určeném rozsahu hodnot.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.#ctor(System.Int64,System.Int64)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint" />.</summary>
      <param name="min">Minimální hodnota.</param>
      <param name="max">Maximální hodnota</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Max">
      <summary>Získá maximální hodnotu parametru trasy.</summary>
      <returns>Maximální hodnota parametru trasy.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Min">
      <summary>Získá minimální hodnotu parametru trasy.</summary>
      <returns>Minimální hodnota parametru trasy.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint">
      <summary>Omezí parametr trasy, aby odpovídal regulárnímu výrazu.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.#ctor(System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint" />.</summary>
      <param name="pattern">Vzor</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>Určí, zda se tato instance rovná zadané trase.</summary>
      <returns>Hodnota true, pokud se tato instance rovná zadané trase, jinak hodnota false.</returns>
      <param name="request">Žádost</param>
      <param name="route">Trasa k porovnání.</param>
      <param name="parameterName">Název parametru</param>
      <param name="values">Seznam hodnot parametrů.</param>
      <param name="routeDirection">Směr trasy.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Pattern">
      <summary>Získá regulární výraz k porovnání shody.</summary>
      <returns>Regulární výraz k porovnání shody.</returns>
    </member>
    <member name="T:System.Web.Http.Services.Decorator">
      <summary> Poskytuje metodu pro načtení nejvnitřnějšího objektu pro objekt, který může být zabalen obálkou &lt;viz cref="T:System.Web.Http.Services.IDecorator`1" /&gt;. </summary>
    </member>
    <member name="M:System.Web.Http.Services.Decorator.GetInner``1(``0)">
      <summary> Získá nejvnitřnější objekt, který neimplementuje &lt;viz cref="T:System.Web.Http.Services.IDecorator`1" /&gt;. </summary>
      <param name="outer">Objekt, který je třeba rozbalit.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.Services.DefaultServices">
      <summary>Představuje kontejner pro instance služeb používaný třídou <see cref="T:System.Web.Http.HttpConfiguration" />.Mějte na paměti, že tento kontejner podporuje pouze známé typy a metody pro získání nebo nastavení náhodných typů služeb způsobí vydání výjimky <see cref="T:System.ArgumentException" />.Chcete-li vytvářet náhodné typy, použijte rozhraní <see cref="T:System.Web.Http.Dependencies.IDependencyResolver" />.Typy podporované tímto kontejnerem:        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /><see cref="T:System.Web.Http.Description.IApiExplorer" /><see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /><see cref="T:System.Web.Http.Validation.IBodyModelValidator" /><see cref="T:System.Net.Http.Formatting.IContentNegotiator" /><see cref="T:System.Web.Http.Description.IDocumentationProvider" /><see cref="T:System.Web.Http.Filters.IFilterProvider" /><see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /><see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /><see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /><see cref="T:System.Web.Http.Tracing.ITraceManager" /><see cref="T:System.Web.Http.Tracing.ITraceWriter" /><see cref="T:System.Web.Http.Query.IStructuredQueryBuilder" /><see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /><see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /><see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /><see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />Předání typu, který není uveden v tomto seznamu, do kterékoli metody v tomto rozhraní bude mít za následek výjimku <see cref="T:System.ArgumentException" />.</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Services.DefaultServices" />.</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Services.DefaultServices" /> se zadaným objektem <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
      <param name="configuration">Objekt <see cref="T:System.Web.Http.HttpConfiguration" /></param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ClearSingle(System.Type)">
      <summary>Odebere službu s jednou instancí z výchozích služeb.</summary>
      <param name="serviceType">Typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetService(System.Type)">
      <summary>Načte službu zadaného typu.</summary>
      <returns>První instance služby nebo hodnota Null, pokud služba není nalezena</returns>
      <param name="serviceType">Typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServiceInstances(System.Type)">
      <summary>Načte seznam objektů služeb pro daný typ služby a ověří typ služby.</summary>
      <returns>Seznam objektů služeb zadaného typu.</returns>
      <param name="serviceType">Typ služby</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServices(System.Type)">
      <summary>Načte seznam objektů služeb pro daný typ služby.</summary>
      <returns>Seznam objektů služeb zadaného typu nebo prázdný seznam, pokud nelze službu najít.</returns>
      <param name="serviceType">Typ služby.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.IsSingleService(System.Type)">
      <summary>Zašle dotaz, zda se jedná o typ služby s jednou instancí.</summary>
      <returns>Hodnota true, pokud má typ služby nanejvýše jednu instanci, nebo hodnota false, pokud typ služby podporuje více instancí.</returns>
      <param name="serviceType">Typ služby</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ReplaceSingle(System.Type,System.Object)">
      <summary>Nahradí objekt služby s jednou instancí.</summary>
      <param name="serviceType">Typ služby</param>
      <param name="service">Objekt služby, který nahrazuje předchozí instanci.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ResetCache(System.Type)">
      <summary>Odebere hodnoty jednoho typu služby uložené v mezipaměti.</summary>
      <param name="serviceType">Typ služby</param>
    </member>
    <member name="T:System.Web.Http.Services.IDecorator`1">
      <summary> Definuje dekoratéra, který zveřejní vnitřní dekorovaný object. </summary>
      <typeparam name="T">Tento parametr typu je kovariant. To znamená, že můžete použít buď typ, který jste zadali, nebo jakýkoli typ, který je více odvozený. Další informace o kovarianci a kontravarianci naleznete v tématu .</typeparam>
    </member>
    <member name="P:System.Web.Http.Services.IDecorator`1.Inner">
      <summary> Získá vnitřní objekt. </summary>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceManager">
      <summary>Představuje třídu trasování výkonu pro zaznamenání zahájení/ukončení a doby trvání metody do protokolu.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceManager.Initialize(System.Web.Http.HttpConfiguration)">
      <summary>Inicializuje třídu <see cref="T:System.Web.Http.Tracing.ITraceManager" /> se zadanou konfigurací.</summary>
      <param name="configuration">Konfigurace</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriter">
      <summary>Reprezentuje zápis trasování.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriter.Trace(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Vyvolá určenou metodu traceAction, která umožní nastavit hodnoty do nového objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" /> v případě a pouze v případě, že trasování je v dané kategorii a úrovni povoleno. </summary>
      <param name="request">Aktuální objekt <see cref="T:System.Net.Http.HttpRequestMessage" />.Může být hodnota null, avšak při následné analýze trasování to potom zabrání v korelaci trasy k určité žádosti.</param>
      <param name="category">Logická kategorie trasování.Uživatelé mohou definovat svou vlastní.</param>
      <param name="level">Objekt <see cref="T:System.Web.Http.Tracing.TraceLevel" />, do něhož se má toto trasování zapsat.</param>
      <param name="traceAction">Akce, jež má být vyvolána, pokud je trasování zapnuto.Volající by měl vyplnit pole daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" /> v této akci.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriterExtensions">
      <summary>Představuje rozšiřující metody pro rozhraní <see cref="T:System.Web.Http.Tracing.ITraceWriter" />. </summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Poskytuje sadu metod a vlastností, které pomáhají ladit kód se zadaným zapisovačem, požadavkem, kategorií a výjimkou.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">K chybě došlo během provádění.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Poskytuje sadu metod a vlastností, které pomáhají ladit kód se zadaným zapisovačem, požadavkem, kategorií, výjimkou, formátem zprávy a argumentem.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">K chybě došlo během provádění.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Poskytuje sadu metod a vlastností, které pomáhají ladit kód se zadaným zapisovačem, požadavkem, kategorií, výjimkou, formátem zprávy a argumentem.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Zobrazí v seznamu chybovou zprávu se zadaným zapisovačem, požadavkem, kategorií a výjimkou.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">K chybě došlo během provádění.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Zobrazí v seznamu chybovou zprávu se zadaným zapisovačem, požadavkem, kategorií, výjimkou, formátem zprávy a argumentem.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">Výjimka</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument ve zprávě.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Zobrazí v seznamu chybovou zprávu se zadaným zapisovačem, požadavkem, kategorií, formátem zprávy a argumentem.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument ve zprávě.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Zobrazí chybovou zprávu ve třídě <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> se zadaným zapisovačem, požadavkem, kategorií a výjimkou.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">Výjimka, která se zobrazí během provádění.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Zobrazí chybovou zprávu ve třídě <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> se zadaným zapisovačem, požadavkem, kategorií, výjimkou, formátem zprávy a argumentem.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">Výjimka</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Zobrazí chybovou zprávu ve třídě <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> se zadaným zapisovačem, požadavkem, kategorií, formátem zprávy a argumentem.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Zobrazí podrobnosti ve třídě <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">K chybě došlo během provádění.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Zobrazí podrobnosti ve třídě <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">K chybě došlo během provádění.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Zobrazí podrobnosti ve třídě <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)">
      <summary>Určuje naslouchací procesy trasování v kolekci Listeners.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="level">Úroveň trasování</param>
      <param name="exception">K chybě došlo během provádění.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])">
      <summary>Určuje naslouchací procesy trasování v kolekci Listeners.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="level">Úroveň trasování</param>
      <param name="exception">K chybě došlo během provádění.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])">
      <summary>Určuje naslouchací procesy trasování v kolekci Listeners.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="level">Objekt <see cref="T:System.Web.Http.Tracing.TraceLevel" /> pro trasování.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary>Trasuje začátek i konec určené operace.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="level">Objekt <see cref="T:System.Web.Http.Tracing.TraceLevel" /> pro trasování.</param>
      <param name="operatorName">Název objektu provádějícího operaci.Může mít hodnotu null.</param>
      <param name="operationName">Název prováděné operace.Může mít hodnotu null.</param>
      <param name="beginTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán před provedením operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Může mít hodnotu null.</param>
      <param name="execute">Odkaz &lt;see cref="T:System.Func`1" /&gt;, který vrátí úlohu <see cref="T:System.Threading.Tasks.Task" /> k provedení operace</param>
      <param name="endTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán po úspěšném provedení operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Může mít hodnotu null.</param>
      <param name="errorTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán v případě chyby při provádění operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Může mít hodnotu null.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Trasuje začátek i konec určené operace. </summary>
      <returns>Úloha <see cref="T:System.Threading.Tasks.Task" /> vrácená operací</returns>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="level">Objekt <see cref="T:System.Web.Http.Tracing.TraceLevel" /> pro trasování.</param>
      <param name="operatorName">Název objektu provádějícího operaci.Může mít hodnotu null.</param>
      <param name="operationName">Název prováděné operace.Může mít hodnotu null.</param>
      <param name="beginTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán před provedením operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Může mít hodnotu null.</param>
      <param name="execute">Odkaz &lt;see cref="T:System.Func`1" /&gt;, který vrátí úlohu <see cref="T:System.Threading.Tasks.Task" /> k provedení operace</param>
      <param name="endTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán po úspěšném provedení operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Do této akce bude předán také výsledek dokončené úlohy.Tato akce může být null.</param>
      <param name="errorTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán v případě chyby při provádění operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Může mít hodnotu null.</param>
      <typeparam name="TResult">Typ výsledku vytvořeného úlohou <see cref="T:System.Threading.Tasks.Task" /></typeparam>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> Trasuje začátek i konec určené operace. </summary>
      <returns>Úloha <see cref="T:System.Threading.Tasks.Task" /> vrácená operací</returns>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="level">Objekt <see cref="T:System.Web.Http.Tracing.TraceLevel" /> pro trasování.</param>
      <param name="operatorName">Název objektu provádějícího operaci.Může mít hodnotu null.</param>
      <param name="operationName">Název prováděné operace.Může mít hodnotu null.</param>
      <param name="beginTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán před provedením operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Může mít hodnotu null.</param>
      <param name="execute">Odkaz &lt;see cref="T:System.Func`1" /&gt;, který vrátí úlohu <see cref="T:System.Threading.Tasks.Task" /> k provedení operace</param>
      <param name="endTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán po úspěšném provedení operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Může mít hodnotu null.</param>
      <param name="errorTrace">Objekt <see cref="T:System.Action" />, který má být vyvolán v případě chyby při provádění operace, aby umožnil vyplnění daného objektu <see cref="T:System.Web.Http.Tracing.TraceRecord" />.Může mít hodnotu null.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>Udává úroveň pro upozornění v souvislosti s prováděním.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">K chybě došlo během provádění.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>Udává úroveň pro upozornění v souvislosti s prováděním.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="exception">K chybě došlo během provádění.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>Udává úroveň pro upozornění v souvislosti s prováděním.</summary>
      <param name="traceWriter">Objekt <see cref="T:System.Web.Http.Tracing.ITraceWriter" /></param>
      <param name="request">Objekt <see cref="T:System.Net.Http.HttpRequestMessage" />, ke kterému má být přidruženo trasování.Může mít hodnotu null.</param>
      <param name="category">Logická kategorie trasování.</param>
      <param name="messageFormat">Formát zprávy.</param>
      <param name="messageArguments">Argument zprávy.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceCategories">
      <summary>Určuje výčet kategorií trasování.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ActionCategory">
      <summary>Kategorie akce</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ControllersCategory">
      <summary>Kategorie kontrolerů</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FiltersCategory">
      <summary>Kategorie filtrů</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FormattingCategory">
      <summary>Kategorie formátování</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.MessageHandlersCategory">
      <summary>Kategorie obslužných rutin zpráv</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ModelBindingCategory">
      <summary>Kategorie vazby modelu</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RequestCategory">
      <summary>Kategorie požadavku</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RoutingCategory">
      <summary>Kategorie směrování</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceKind">
      <summary>Určuje druh trasovací operace.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Begin">
      <summary>Trasování označující začátek nějaké operace</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.End">
      <summary>Trasování označující knec nějaké operace</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Trace">
      <summary>Jediné trasování, nikoli součást páru trasování Začátek/Konec</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceLevel">
      <summary>Určuje výčet úrovně trasování.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Debug">
      <summary>Úroveň trasování pro trasování ladění</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Error">
      <summary>Úroveň trasování pro trasování chyb</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Fatal">
      <summary>Úroveň trasování pro trasování závažných chyb</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Info">
      <summary>Úroveň trasování pro informativní trasování</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Off">
      <summary>Trasování je zakázáno.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Warn">
      <summary>Úroveň trasování pro trasování upozornění</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceRecord">
      <summary>Reprezentuje záznam trasování.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.TraceRecord.#ctor(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Tracing.TraceRecord" />.</summary>
      <param name="request">Požadavek zprávy</param>
      <param name="category">Kategorie trasování</param>
      <param name="level">Úroveň trasování</param>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Category">
      <summary>Získá nebo nastaví kategorii trasování.</summary>
      <returns>Kategorie trasování</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Exception">
      <summary>Získá nebo nastaví výjimku.</summary>
      <returns>Výjimka</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Kind">
      <summary>Získá nebo nastaví typ trasování.</summary>
      <returns>Druh trasování</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Level">
      <summary>Získá nebo nastaví úroveň trasování.</summary>
      <returns>Úroveň trasování</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Message">
      <summary>Získá nebo nastaví zprávu.</summary>
      <returns>Zpráva</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operation">
      <summary>Získá nebo nastaví logický název prováděné operace.</summary>
      <returns>Logický název prováděné operace</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operator">
      <summary>Získá nebo nastaví logický název objektu provádějícího operaci.</summary>
      <returns>Logický název objektu provádějícího operaci</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Properties">
      <summary>Získá volitelné uživatelem definované vlastnosti.</summary>
      <returns>Volitelné uživatelem definované vlastnosti</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Request">
      <summary>Získá ze záznamu zprávu <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> ze záznamu</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.RequestId">
      <summary>Získá ID korelace z objektu <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" />.</summary>
      <returns>ID korelace z objektu <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" /></returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Status">
      <summary>Získá nebo nastaví objekt <see cref="T:System.Net.HttpStatusCode" />, který je přidružen k objektu <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>
        <see cref="T:System.Net.HttpStatusCode" /> přidružený k tomuto objektu <see cref="T:System.Net.Http.HttpResponseMessage" />.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Timestamp">
      <summary>Získá objekt <see cref="T:System.DateTime" /> tohoto trasování (prostřednictvím objektu <see cref="P:System.DateTime.UtcNow" />).</summary>
      <returns>Objekt <see cref="T:System.DateTime" /> tohoto trasování (prostřednictvím objektu <see cref="P:System.DateTime.UtcNow" />)</returns>
    </member>
    <member name="T:System.Web.Http.Validation.DefaultBodyModelValidator">
      <summary>Představuje třídu sloužící k rekurzivnímu ověřování objektu.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.DefaultBodyModelValidator" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.ShouldValidateType(System.Type)">
      <summary>Určuje, zda mají být ověřovány instance určitého typu.</summary>
      <returns>Hodnota true, pokud má být typ ověřen; v opačném případě hodnota false</returns>
      <param name="type">Typ, který má být ověřen.</param>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary>Určuje, zda je <paramref name="model" /> platný, a přidá všechny chyby ověření do objektu <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> kontextu <paramref name="actionContext" />.</summary>
      <returns>Hodnota true, pokud je model platný, jinak hodnota false</returns>
      <param name="model">Model, který má být ověřen</param>
      <param name="type">Objekt <see cref="T:System.Type" />, který má být použit pro ověření.</param>
      <param name="metadataProvider">Objekt <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />, který je používán k poskytování metadat modelu.</param>
      <param name="actionContext">Objekt <see cref="T:System.Web.Http.Controllers.HttpActionContext" />, ve kterém je model ověřován.</param>
      <param name="keyPrefix">Objekt <see cref="T:System.String" />, který má být připojen ke klíči u všech chyb ověření.</param>
    </member>
    <member name="T:System.Web.Http.Validation.IBodyModelValidator">
      <summary>Reprezentuje rozhraní pro ověřování modelů.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.IBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary> Určuje, zda je model platný, a přidá všechny chyby ověření do objektu <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> kontextu actionContext.</summary>
      <returns>Hodnota true, pokud je model platný, jinak hodnota false.</returns>
      <param name="model">Model, který má být ověřen</param>
      <param name="type">Objekt <see cref="T:System.Type" />, který má být použit pro ověření.</param>
      <param name="metadataProvider">Objekt <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />, který je používán k poskytování metadat modelu.</param>
      <param name="actionContext">Objekt <see cref="T:System.Web.Http.Controllers.HttpActionContext" />, ve kterém je model ověřován.</param>
      <param name="keyPrefix">Objekt <see cref="T:System.String" />, který má být připojen ke klíči u všech chyb ověření.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelStateFormatterLogger">
      <summary>Tato třída <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> protokoluje chyby formátování do zadané entity <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelStateFormatterLogger" />.</summary>
      <param name="modelState">Stav modelu.</param>
      <param name="prefix">Předpona</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.Exception)">
      <summary>Zaznamená chybu zadaného modelu do protokolu.</summary>
      <param name="errorPath">Cesta k chybě.</param>
      <param name="exception">Chybová zpráva</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.String)">
      <summary>Zaznamená chybu zadaného modelu do protokolu.</summary>
      <param name="errorPath">Cesta k chybě.</param>
      <param name="errorMessage">Chybová zpráva</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatedEventArgs">
      <summary>Poskytuje data pro událost <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validated" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatedEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelValidatedEventArgs" />.</summary>
      <param name="actionContext">Kontext akce</param>
      <param name="parentNode">Nadřazený uzel</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ActionContext">
      <summary>Získá nebo nastaví kontext akce.</summary>
      <returns>Kontext akce</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ParentNode">
      <summary>Získá nebo nastaví nadřazeného tohoto uzlu.</summary>
      <returns>Nadřazený tohoto uzlu</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatingEventArgs">
      <summary>Poskytuje data pro událost <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validating" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatingEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelValidatingEventArgs" />.</summary>
      <param name="actionContext">Kontext akce</param>
      <param name="parentNode">Nadřazený uzel</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ActionContext">
      <summary>Získá nebo nastaví kontext akce.</summary>
      <returns>Kontext akce</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ParentNode">
      <summary>Získá nebo nastaví nadřazeného tohoto uzlu.</summary>
      <returns>Nadřazený tohoto uzlu</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationNode">
      <summary>Poskytuje kontejner pro informace o ověření modelu.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> pomocí metadat modelu a klíče stavu.</summary>
      <param name="modelMetadata">Metadata modelu</param>
      <param name="modelStateKey">Klíč stavu modelu</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidationNode})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> pomocí metadat modelu, klíče stavu modelu a podřízených uzlů ověření modelu.</summary>
      <param name="modelMetadata">Metadata modelu</param>
      <param name="modelStateKey">Klíč stavu modelu</param>
      <param name="childNodes">Podřízené uzly modelu</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ChildNodes">
      <summary>Získá nebo nastaví podřízené uzly.</summary>
      <returns>Podřízené uzly</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.CombineWith(System.Web.Http.Validation.ModelValidationNode)">
      <summary>Sloučí aktuální instanci <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> se zadanou instancí <see cref="T:System.Web.Http.Validation.ModelValidationNode" />.</summary>
      <param name="otherNode">Uzel ověření modelu, který má být sloučen s aktuální instancí</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelMetadata">
      <summary>Získá nebo nastaví metadata modelu.</summary>
      <returns>Metadata modelu</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelStateKey">
      <summary>Získá nebo nastaví klíč stavu modelu.</summary>
      <returns>Klíč stavu modelu</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.SuppressValidation">
      <summary>Získá nebo nastaví hodnotu, která označuje, zda má být potlačeno ověření.</summary>
      <returns>Hodnota true, chcete-li ověření potlačit, v opačném případě hodnota false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Ověří model pomocí zadaného kontextu spuštění.</summary>
      <param name="actionContext">Kontext akce</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>Ověří model pomocí zadaného kontextu spuštění a nadřazeného uzlu.</summary>
      <param name="actionContext">Kontext akce</param>
      <param name="parentNode">Nadřazený uzel</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ValidateAllProperties">
      <summary>Získá nebo nastaví hodnotu, která označuje, zda mají být ověřeny všechny vlastnosti modelu.</summary>
      <returns>Hodnota true, pokud mají být ověřeny všechny vlastnosti modelu, nebo hodnota false, pokud má být ověření vynecháno.</returns>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validated">
      <summary>Objeví se, pokud je model ověřen.</summary>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validating">
      <summary>Objeví se, pokud je model právě ověřován.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector">
      <summary>Reprezentuje výběr požadovaných členů vyhledáním jakýchkoli požadovaných parametrů ModelValidators spojených se členem.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector" />.</summary>
      <param name="metadataProvider">Zprostředkovatel metadat</param>
      <param name="validatorProviders">Zprostředkovatelé ověření</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>Informuje o tom, zda je člen vyžadován pro ověření.</summary>
      <returns>Hodnota true, pokud je člen vyžadován pro ověření, jinak hodnota false.</returns>
      <param name="member">Člen</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationResult">
      <summary>Poskytuje kontejner pro výsledek ověření.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationResult.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelValidationResult" />.</summary>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.MemberName">
      <summary>Získá nebo nastaví název člena.</summary>
      <returns>Název člena</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.Message">
      <summary>Získá nebo nastaví zprávu s výsledkem ověření.</summary>
      <returns>Zpráva s výsledkem ověření</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidator">
      <summary>Poskytuje základní třídu pro implementaci ověřovací logiky.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelValidator" />.</summary>
      <param name="validatorProviders">Zprostředkovatelé ověření</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.GetModelValidator(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Vrací validátora kompozitního modelu pro daný model.</summary>
      <returns>Validátor kompozitního modelu pro daný model</returns>
      <param name="validatorProviders">Výčet zprostředkovatelů ověření</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.IsRequired">
      <summary>Získá hodnotu, která označuje, zda je vlastnost modelu povinná.</summary>
      <returns>Hodnota true, pokud je vlastnost modelu povinná, v opačném případě hodnota true.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Ověří zadaný objekt.</summary>
      <returns>Seznam výsledků ověření</returns>
      <param name="metadata">Metadata</param>
      <param name="container">Kontejner</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.ValidatorProviders">
      <summary>Získá nebo načte výčet zprostředkovatelů ověření.</summary>
      <returns>Výčet zprostředkovatelů ověření</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatorProvider">
      <summary>Poskytne seznam validátorů modelu.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Získá seznam validátorů přidružených k tomuto prvku <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />.</summary>
      <returns>Seznam validátorů</returns>
      <param name="metadata">Metadata</param>
      <param name="validatorProviders">Zprostředkovatelé ověření</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider">
      <summary>Poskytuje abstraktní třídu pro třídy implementující zprostředkovatele ověřování.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>Získá popisovač typu pro zadaný typ.</summary>
      <returns>Popisovač typu pro zadaný typ</returns>
      <param name="type">Typ zprostředkovatele ověřování</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Získá validátory pro model na základě metadat a zprostředkovatelů ověření.</summary>
      <returns>Validátory pro model</returns>
      <param name="metadata">Metadata</param>
      <param name="validatorProviders">Výčet zprostředkovatelů ověření</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Získá validátory pro model na základě metadat, zprostředkovatelů ověření a seznamu atributů.</summary>
      <returns>Validátory pro model</returns>
      <param name="metadata">Metadata</param>
      <param name="validatorProviders">Výčet zprostředkovatelů ověření</param>
      <param name="attributes">Seznam atributů</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory">
      <summary>Představuje metodu, která vytvoří instanci <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" />.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider">
      <summary>Reprezentuje implementaci třídy <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />, která poskytuje validátory atributů odvozených od třídy <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />. Poskytuje také validátor pro typy, které implementují třídu <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Chcete-li zajistit podporu ověřování na straně klienta, můžete buď registrovat adaptéry prostřednictvím statických metod této třídy, nebo nechat ověřovací atributy implementovat třídu <see cref="T:System.Web.Http.Validation.IClientValidatable" />. Logika pro podporu IClientValidatable je implementována ve třídě <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" />. </summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Získá validátory pro model pomocí zadaných metadat, zprostředkovatele ověření a atributů.</summary>
      <returns>Validátory pro model</returns>
      <param name="metadata">Metadata</param>
      <param name="validatorProviders">Zprostředkovatelé ověření</param>
      <param name="attributes">Atributy</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>Zaregistruje adaptér pro ověřování na straně klienta.</summary>
      <param name="attributeType">Typ atributu ověřování</param>
      <param name="adapterType">Typ adaptéru</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>Zaregistruje objekt factory adaptéru pro zprostředkovatele ověřování.</summary>
      <param name="attributeType">Typ atributu</param>
      <param name="factory">Objekt factory, který bude použit k vytvoření objektu.<see cref="T:System.Web.Http.Validation.ModelValidator" /> pro zadaný atribut,</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>Zaregistruje výchozí adaptér.</summary>
      <param name="adapterType">Typ adaptéru</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>Zaregistruje výchozí objekt factory adaptéru.</summary>
      <param name="factory">Objekt factory, který bude použit k vytvoření <see cref="T:System.Web.Http.Validation.ModelValidator" /> pro výchozí adaptér</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
      <summary>Registruje typ výchozího adaptéru pro objekty, které implementují třídu <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Typ adaptéru musí být odvozen od třídy <see cref="T:System.Web.Http.Validation.ModelValidator" /> a musí obsahovat veřejný konstruktor, který přebírá dva parametry typu <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> a <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
      <param name="adapterType">Typ adaptéru</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Registruje objekt pro vytváření výchozího adaptéru pro objekty, které implementují třídu <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. </summary>
      <param name="factory">Objekt factory</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
      <summary>Registruje typ adaptéru pro daný modelType, který musí implementovat třídu <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. Typ adaptéru musí být odvozen od třídy <see cref="T:System.Web.Http.Validation.ModelValidator" /> a musí obsahovat veřejný konstruktor, který přebírá dva parametry typu <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> a <see cref="T:System.Web.Http.Controllers.HttpActionContext" />. </summary>
      <param name="modelType">Typ modelu</param>
      <param name="adapterType">Typ adaptéru</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Registruje objekt pro vytváření adaptéru pro daný modelType, který musí implementovat třídu <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />. </summary>
      <param name="modelType">Typ modelu</param>
      <param name="factory">Objekt factory</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory">
      <summary>Poskytuje objekt pro vytváření validátorů založených na objektu <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider">
      <summary>Reprezentuje zprostředkovatele ověření pro model datových členů.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Získá validátory pro model.</summary>
      <returns>Validátory pro model</returns>
      <param name="metadata">Metadata</param>
      <param name="validatorProviders">Enumerátor zprostředkovatelů ověření</param>
      <param name="attributes">Seznam atributů</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider">
      <summary>Implementace modulu <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />, který poskytuje validátory generující výjimky, pokud je model neplatný.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Získá seznam validátorů přidružených k tomuto prvku <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" />.</summary>
      <returns>Seznam validátorů</returns>
      <param name="metadata">Metadata</param>
      <param name="validatorProviders">Zprostředkovatelé ověření</param>
      <param name="attributes">Seznam atributů</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider">
      <summary>Reprezentuje zprostředkovatele pro požadovaný validátor modelu členů.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.#ctor(System.Net.Http.Formatting.IRequiredMemberSelector)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider" />.</summary>
      <param name="requiredMemberSelector">Požadovaný selektor členů</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Získá validátor pro model členů.</summary>
      <returns>Validátor pro model členů</returns>
      <param name="metadata">Metadata</param>
      <param name="validatorProviders">Zprostředkovatelé ověření</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator">
      <summary>Poskytuje validátor modelu.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" />.</summary>
      <param name="validatorProviders">Zprostředkovatelé ověření</param>
      <param name="attribute">Atribut ověření modelu</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Attribute">
      <summary>Získá nebo nastaví ověřovací atribut pro validátor modelu.</summary>
      <returns>Atribut ověření pro validátor modelu</returns>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.IsRequired">
      <summary>Získá hodnotu určující, zda je vyžadováno ověření modelu.</summary>
      <returns>Hodnota true, pokud je vyžadováno ověření modelu. V opačném případě hodnota false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Ověří model a vrátí případné chyby ověření.</summary>
      <returns>Seznam chybových zpráv ověření modelu nebo prázdný seznam (pokud k žádným chybám nedošlo).</returns>
      <param name="metadata">Metadata modelu</param>
      <param name="container">Kontejner modelu</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ErrorModelValidator">
      <summary>Validátor <see cref="T:System.Web.Http.Validation.ModelValidator" />, který má představovat chybu.Tento validátor vždy vygeneruje výjimku, bez ohledu na skutečnou hodnotu modelu.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.String)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Validators.ErrorModelValidator" />.</summary>
      <param name="validatorProviders">Seznam zprostředkovatelů validátorů modelů.</param>
      <param name="errorMessage">Chybová zpráva pro výjimku.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Ověří zadaný objekt.</summary>
      <returns>Seznam výsledků ověření</returns>
      <param name="metadata">Metadata</param>
      <param name="container">Kontejner</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator">
      <summary>Reprezentuje objekt <see cref="T:System.Web.Http.Validation.ModelValidator" /> pro požadované členy. </summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator" />.</summary>
      <param name="validatorProviders">Zprostředkovatelé ověření</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.IsRequired">
      <summary>Získá nebo nastaví hodnotu obsahující pokyn pro serializační stroj, že při ověřování musí být přítomen člen.</summary>
      <returns>Hodnota true, pokud je člen vyžadován, jinak hodnota false.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Ověří objekt.</summary>
      <returns>Seznam výsledků ověření</returns>
      <param name="metadata">Metadata</param>
      <param name="container">Kontejner</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter">
      <summary>Poskytuje adaptér objektu, který lze ověřit.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter" />.</summary>
      <param name="validatorProviders">Zprostředkovatel ověření.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>Ověří zadaný objekt.</summary>
      <returns>Seznam výsledků ověření</returns>
      <param name="metadata">Metadata</param>
      <param name="container">Kontejner</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IEnumerableValueProvider">
      <summary>Představuje základní třídu pro zprostředkovatele hodnot, jejichž hodnoty pocházejí z kolekce, která implementuje rozhraní <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IEnumerableValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Načte klíče ze zadaného prvku <paramref name="prefix" />.</summary>
      <returns>Klíče ze zadaného prvku <paramref name="prefix" />.</returns>
      <param name="prefix">Předpona</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IUriValueProviderFactory">
      <summary>Představuje rozhraní implementované kteroukoli třídou <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />, která podporuje vytvoření rozhraní <see cref="T:System.Web.Http.ValueProviders.IValueProvider" /> pro přístup k identifikátoru <see cref="T:System.Uri" /> příchozího objektu <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IValueProvider">
      <summary>Definuje metody požadované pro zprostředkovatele hodnoty v aplikaci ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.ContainsPrefix(System.String)">
      <summary>Určuje, zda kolekce obsahuje zadanou předponu.</summary>
      <returns>Hodnota true, pokud kolekce obsahuje zadanou předponu, jinak hodnota false.</returns>
      <param name="prefix">Předpona, kterou chcete vyhledat.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.GetValue(System.String)">
      <summary>Načte objekt hodnoty pomocí zadaného klíče.</summary>
      <returns>Objekt hodnoty pro zadaný klíč nebo hodnota null, pokud klíč není nalezen.</returns>
      <param name="key">Klíč objektu hodnoty, který má být načten.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderAttribute">
      <summary> Tento atribut určuje vlastní objekt <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />. </summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" />.</summary>
      <param name="valueProviderFactory">Typ vazače modelu</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type[])">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" />.</summary>
      <param name="valueProviderFactories">Pole typů vazače modelu.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>Získá objekty factory zprostředkovatelů hodnot.</summary>
      <returns>Kolekce objektů factory zprostředkovatelů hodnot.</returns>
      <param name="configuration">Objekt konfigurace</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderAttribute.ValueProviderFactoryTypes">
      <summary>Získá typy objektů vrácené objektem factory zprostředkovatele hodnot.</summary>
      <returns>Kolekce typů.</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderFactory">
      <summary>Představuje objekt pro vytváření objektů zprostředkovatele hodnoty.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Vrátí objekt zprostředkovatele hodnoty pro zadaný kontext kontroleru.</summary>
      <returns>Objekt zprostředkovatele hodnoty</returns>
      <param name="actionContext">Objekt, který zapouzdřuje informace o aktuální žádosti HTTP</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderResult">
      <summary>Představuje výsledek vazby hodnoty (například z vystavení formuláře nebo řetězce dotazu) k vlastnosti argumentu metody akce nebo k argumentu samotnému.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" />.</summary>
      <param name="rawValue">Nezpracovaná hodnota</param>
      <param name="attemptedValue">Pokusná hodnota</param>
      <param name="culture">Jazyková verze</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.AttemptedValue">
      <summary>Získá nebo nastaví nezpracovanou hodnotu, která je převedena na řetězec k zobrazení.</summary>
      <returns>Nezpracovaná hodnota převedená na řetězec za účelem zobrazení.</returns>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type)">
      <summary>Převede hodnotu zapouzdřenou tímto výsledkem na zadaný typ.</summary>
      <returns>Převedená hodnota</returns>
      <param name="type">Cílový typ</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>Převede hodnotu zapouzdřenou tímto výsledkem na zadaný typ pomocí zadaných informací o jazykové verzi.</summary>
      <returns>Převedená hodnota</returns>
      <param name="type">Cílový typ</param>
      <param name="culture">Jazyková verze, která se má použít v převodu.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.Culture">
      <summary>Získá nebo nastaví jazykovou verzi.</summary>
      <returns>Jazyková verze</returns>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.RawValue">
      <summary>Získá nebo nastaví nezpracovanou hodnotu zadanou zprostředkovatelem hodnoty.</summary>
      <returns>Nezpracovaná hodnota, kterou poskytne zprostředkovatel hodnot.</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider">
      <summary>Představuje zprostředkovatele hodnot, jehož hodnoty pocházejí ze seznamu zprostředkovatelů hodnot, který implementuje rozhraní <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor(System.Collections.Generic.IList{System.Web.Http.ValueProviders.IValueProvider})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" />.</summary>
      <param name="list">Seznam zprostředkovatelů hodnot.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.ContainsPrefix(System.String)">
      <summary>Určuje, zda kolekce obsahuje zadaný prvek <paramref name="prefix" />.</summary>
      <returns>Hodnota true, pokud kolekce obsahuje zadaný prvek <paramref name="prefix" />, jinak hodnota false.</returns>
      <param name="prefix">Předpona, kterou chcete vyhledat.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Načte klíče ze zadaného prvku <paramref name="prefix" />.</summary>
      <returns>Klíče ze zadaného prvku <paramref name="prefix" />.</returns>
      <param name="prefix">Předpona, z níž jsou načteny klíče.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetValue(System.String)">
      <summary>Načte objekt hodnoty pomocí zadaného prvku <paramref name="key" />.</summary>
      <returns>Objekt hodnoty pro zadaný prvek <paramref name="key" />.</returns>
      <param name="key">Klíč objektu hodnoty, který má být načten.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.InsertItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>Vloží do kolekce element v zadaném indexu.</summary>
      <param name="index">Index založený na nule, do kterého se má položka <paramref name="item" /> vložit</param>
      <param name="item">Objekt, který se má vložit.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.SetItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>Nahradí element v zadaném indexu.</summary>
      <param name="index">Index elementu založený na nule, který se má nahradit</param>
      <param name="item">Nová hodnota pro element v zadaném indexu</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory">
      <summary>Představuje objekt factory pro vytvoření seznamu objektů zprostředkovatele hodnot.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory" />.</summary>
      <param name="factories">Kolekce objektů factory zprostředkovatele hodnot.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Načte seznam objektů zprostředkovatele hodnot pro zadaný kontext kontroleru.</summary>
      <returns>Seznam objektů zprostředkovatele hodnot pro zadaný kontext kontroleru.</returns>
      <param name="actionContext">Objekt, který zapouzdřuje informace o aktuální žádosti HTTP</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider">
      <summary>Zprostředkovatel hodnot pro dvojice název/hodnota.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Globalization.CultureInfo)"></member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Globalization.CultureInfo)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" />.</summary>
      <param name="values">Dvojice název/hodnota pro zprostředkovatele.</param>
      <param name="culture">Jazyková verze použitá pro dvojice název/hodnota.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Globalization.CultureInfo)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" /> s využitím delegované funkce, která poskytne dvojice název/hodnota.</summary>
      <param name="valuesFactory">Delegovaná funkce, která vrátí kolekci dvojic název/hodnota.</param>
      <param name="culture">Jazyková verze použitá pro dvojice název/hodnota.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.ContainsPrefix(System.String)">
      <summary>Určuje, zda kolekce obsahuje zadanou předponu.</summary>
      <returns>Hodnota true, pokud kolekce obsahuje zadanou předponu, jinak hodnota false.</returns>
      <param name="prefix">Předpona, kterou chcete vyhledat.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetKeysFromPrefix(System.String)">
      <summary>Získá klíče z předpony.</summary>
      <returns>Klíče</returns>
      <param name="prefix">Předpona</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetValue(System.String)">
      <summary>Načte objekt hodnoty pomocí zadaného klíče.</summary>
      <returns>Objekt hodnoty pro zadaný klíč</returns>
      <param name="key">Klíč objektu hodnoty, který má být načten.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider">
      <summary>Představuje zprostředkovatele hodnoty pro řetězce dotazu, které jsou obsaženy v objektu <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider" />.</summary>
      <param name="actionContext">Objekt, který zapouzdřuje informace o aktuální žádosti HTTP</param>
      <param name="culture">Objekt, který obsahuje informace o cílové jazykové verzi</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory">
      <summary>Představuje třídu, která zodpovídá za vytvoření nové instance objektu zprostředkovatele hodnoty řetězce dotazu.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Načte objekt zprostředkovatele hodnoty pro zadaný kontext kontroleru.</summary>
      <returns>Objekt zprostředkovatele hodnoty řetězce dotazu</returns>
      <param name="actionContext">Objekt, který zapouzdřuje informace o aktuální žádosti HTTP</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider">
      <summary>Představuje zprostředkovatele hodnoty pro data trasy obsažená v objektu, který implementuje rozhraní IDictionary(Of TKey, TValue).</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider" />.</summary>
      <param name="actionContext">Objekt, který obsahuje informace o žádosti HTTP</param>
      <param name="culture">Objekt, který obsahuje informace o cílové jazykové verzi</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory">
      <summary>Představuje objekt pro vytváření objektů zprostředkovatele hodnot dat trasy.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.#ctor">
      <summary>Inicializuje novou instanci třídy <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory" />.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>Načte objekt zprostředkovatele hodnoty pro zadaný kontext kontroleru.</summary>
      <returns>Objekt zprostředkovatele hodnoty</returns>
      <param name="actionContext">Objekt, který zapouzdřuje informace o aktuální žádosti HTTP</param>
    </member>
  </members>
</doc>